openapi: 3.1.0
info:
  title: Konnect API (BETA)
  version: 2.0.0
  description: >
    This is a BETA specification. Endpoints in this specification may change
    with zero notice
  contact:
    name: Kong
    url: https://cloud.konghq.com
servers:
  - url: https://global.api.konghq.com
  - url: https://us.api.konghq.com
  - url: https://eu.api.konghq.com
  - url: https://au.api.konghq.com
  - url: https://me.api.konghq.com
  - url: https://in.api.konghq.com
paths:
  /v1/service-catalog/integration-instances:
    post:
      x-speakeasy-entity-operation: IntegrationInstance#create
      operationId: create-integration-instance
      summary: Create Integration Instance
      description: Creates an integration instance.
      requestBody:
        $ref: '#/components/requestBodies/CreateIntegrationInstanceRequest'
      responses:
        '201':
          $ref: '#/components/responses/IntegrationInstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Integration Instances
  /v1/service-catalog/integration-instances/{id}:
    parameters:
      - name: id
        in: path
        description: The `id` of the integration instance.
        required: true
        schema:
          type: string
          example: 3f51fa25-310a-421d-bd1a-007f859021a3
    get:
      x-speakeasy-entity-operation: IntegrationInstance#read
      operationId: fetch-integration-instance
      summary: Fetch Integration Instance
      description: Fetches a integration instance.
      responses:
        '200':
          $ref: '#/components/responses/IntegrationInstanceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Integration Instances
    patch:
      x-speakeasy-entity-operation: IntegrationInstance#update
      operationId: update-integration-instance
      summary: Update Integration Instance
      description: Updates an integration instance.
      requestBody:
        $ref: '#/components/requestBodies/UpdateIntegrationInstanceRequest'
      responses:
        '200':
          $ref: '#/components/responses/IntegrationInstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Integration Instances
    delete:
      x-speakeasy-entity-operation: IntegrationInstance#delete
      operationId: delete-integration-instance
      summary: Delete Integration Instance
      description: Deletes an integration instance.
      responses:
        '204':
          description: Integration Instance was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Integration Instances
  /v1/service-catalog/integration-instances/{integrationInstanceId}/resources:
    parameters:
      - name: integrationInstanceId
        in: path
        description: The `id` of the integration instance.
        required: true
        schema:
          type: string
          example: 3f51fa25-310a-421d-bd1a-007f859021a3
    post:
      x-speakeasy-entity-operation: Resource#create
      operationId: initialize-resource
      summary: Initialize Resource
      description: >
        Initializes a placeholder resource. This operation is typically used in
        GitOps workflows or other infrastructure-as-code setups where a resource
        is declared before it is fully discovered.

        The initialized resource acts as a stub â€” it contains minimal
        identifying metadata and does not yet include the full set of attributes
        typically populated by integration-based discovery.

        After initialization, the resource will be automatically hydrated with
        additional data by catalog integrations responsible for discovering and
        maintaining its up-to-date state.

        This API is not intended for direct resource management, but rather for
        signaling the intent to track a given resource, allowing integrations to
        take over and populate it asynchronously.
      requestBody:
        $ref: '#/components/requestBodies/InitializeCatalogResourceRequest'
      responses:
        '201':
          $ref: '#/components/responses/CatalogResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Resources
  /v1/service-catalog/integration-instances/{integrationInstanceId}/resources/{resourceId}:
    parameters:
      - name: integrationInstanceId
        in: path
        description: The `id` of the integration instance.
        required: true
        schema:
          type: string
          example: 3f51fa25-310a-421d-bd1a-007f859021a3
      - name: resourceId
        in: path
        description: The `id` of the resource.
        required: true
        schema:
          type: string
          example: AflTNLY0tTQhv2my
    patch:
      x-speakeasy-entity-operation: Resource#update
      operationId: update-resource
      summary: Update Resource
      description: Updates a resource.
      requestBody:
        $ref: '#/components/requestBodies/UpdateCatalogResourceRequest'
      responses:
        '200':
          $ref: '#/components/responses/CatalogResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Resources
    delete:
      x-unstable: true
      x-internal: true
      x-speakeasy-entity-operation: Resource#delete
      operationId: archive-resource
      summary: Archive Resource
      description: Archives a resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                archived:
                  type: boolean
                  const: true
              additionalProperties: false
      responses:
        '200':
          $ref: '#/components/responses/CatalogResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/service-catalog/resource-mappings:
    post:
      x-speakeasy-entity-operation: ResourceMapping#create
      operationId: create-resource-mapping
      summary: Create Resource Mapping
      description: Creates a mapping between a catalog resource and service.
      requestBody:
        $ref: '#/components/requestBodies/CreateCatalogResourceMappingRequest'
      responses:
        '201':
          $ref: '#/components/responses/CatalogResourceMappingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Resource Mappings
  /v1/service-catalog/resource-mappings/{resourceMappingId}:
    parameters:
      - name: resourceMappingId
        in: path
        description: The `id` of the resource mapping.
        required: true
        schema:
          type: string
          format: uuid
          example: d277faad-ed4e-4c56-a0fb-acce065dee34
        x-speakeasy-match: id
    get:
      x-speakeasy-entity-operation: ResourceMapping#read
      operationId: fetch-resource-mapping
      summary: Fetch Resource Mapping
      description: Fetches a resource mapping by ID.
      responses:
        '200':
          $ref: '#/components/responses/CatalogResourceMappingResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Resource Mappings
    delete:
      x-speakeasy-entity-operation: ResourceMapping#delete
      operationId: delete-resource-mapping
      summary: Delete Resource Mapping
      description: Removes an existing mapping between a catalog resource and service.
      responses:
        '204':
          description: Resource Mapping was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Resource Mappings
  /v1/service-catalog/services:
    post:
      x-speakeasy-entity-operation: CatalogService#create
      operationId: create-catalog-service
      summary: Create Service
      description: Creates a service.
      requestBody:
        $ref: '#/components/requestBodies/CreateCatalogServiceRequest'
      responses:
        '201':
          $ref: '#/components/responses/CatalogServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Services
  /v1/service-catalog/services/{id}:
    parameters:
      - name: id
        in: path
        description: The `id` of the service.
        required: true
        schema:
          type: string
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
    get:
      x-speakeasy-entity-operation: CatalogService#read
      operationId: fetch-catalog-service
      summary: Fetch Service
      description: Fetches a service.
      responses:
        '200':
          $ref: '#/components/responses/CatalogServiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Services
    patch:
      x-speakeasy-entity-operation: CatalogService#update
      operationId: update-catalog-service
      summary: Update Service
      description: Updates a service.
      requestBody:
        $ref: '#/components/requestBodies/UpdateCatalogServiceRequest'
      responses:
        '200':
          $ref: '#/components/responses/CatalogServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Services
    delete:
      x-speakeasy-entity-operation: CatalogService#delete
      operationId: delete-catalog-service
      summary: Delete Service
      description: Deletes a service.
      responses:
        '204':
          description: Service was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
      tags:
        - Catalog Services
components:
  schemas:
    CreateCatalogService:
      type: object
      properties:
        name:
          description: >
            The machine name of the Service that uniquely identifies it within
            the catalog.
          type: string
          example: user-svc
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the Service.
          type: string
          example: User Service
          maxLength: 120
          minLength: 1
        description:
          description: Optionally provide a description of the Service.
          type: string
          maxLength: 2048
          nullable: true
        labels:
          $ref: '#/components/schemas/Labels'
        custom_fields:
          $ref: '#/components/schemas/CustomFields'
      additionalProperties: false
      required:
        - name
        - display_name
    UpdateCatalogService:
      type: object
      properties:
        name:
          description: >
            The machine name of the Service that uniquely identifies it within
            the catalog.
          type: string
          example: user-svc
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the Service.
          type: string
          example: User Service
          maxLength: 120
          minLength: 1
        description:
          description: Optionally provide a description of the Service.
          type: string
          maxLength: 2048
          nullable: true
        labels:
          $ref: '#/components/schemas/LabelsUpdate'
        custom_fields:
          $ref: '#/components/schemas/CustomFields'
      additionalProperties: false
    CatalogService:
      description: The service object contains information about a Service Catalog service.
      type: object
      properties:
        id:
          description: The service ID.
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          readOnly: true
        name:
          description: >
            The machine name of the Service that uniquely identifies it within
            the catalog.
          type: string
          example: user-svc
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the Service.
          type: string
          example: User Service
          maxLength: 120
          minLength: 1
        description:
          description: Optionally provide a description of the Service.
          type: string
          maxLength: 2048
          nullable: true
        custom_fields:
          $ref: '#/components/schemas/CustomFields'
        labels:
          $ref: '#/components/schemas/Labels'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - id
        - name
        - display_name
        - description
        - custom_fields
        - labels
        - created_at
        - updated_at
      title: CatalogService
    CreateIntegrationInstance:
      type: object
      properties:
        integration_name:
          description: The type of integration instance to create.
          type: string
          example: aws-lambda
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        name:
          description: >
            The machine name of the integration instance that uniquely
            identifies it within the catalog.
          type: string
          example: aws-lambda-prod
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the integration instance.
          type: string
          example: AWS (prod)
          maxLength: 120
          minLength: 1
        description:
          description: Optionally provide a description of the integration instance.
          type: string
          maxLength: 2048
          nullable: true
        config:
          $ref: '#/components/schemas/IntegrationInstanceConfig'
      additionalProperties: false
      required:
        - integration_name
        - name
        - display_name
        - config
    UpdateIntegrationInstance:
      type: object
      properties:
        name:
          description: >
            The machine name of the integration instance that uniquely
            identifies it within the catalog.
          type: string
          example: aws-lambda-prod
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the integration instance.
          type: string
          example: AWS (prod)
          maxLength: 120
          minLength: 1
        description:
          description: Optionally provide a description of the integration instance.
          type: string
          maxLength: 2048
          nullable: true
        config:
          $ref: '#/components/schemas/IntegrationInstanceConfig'
      additionalProperties: false
    IntegrationInstance:
      description: Information about an integration instance.
      type: object
      properties:
        id:
          description: The integration instance ID.
          type: string
          format: uuid
          example: 3f51fa25-310a-421d-bd1a-007f859021a3
          readOnly: true
        name:
          description: >
            The machine name of the integration instance that uniquely
            identifies it within the catalog.
          type: string
          example: aws-lambda-prod
          maxLength: 120
          minLength: 1
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the integration instance.
          type: string
          example: AWS (prod)
          maxLength: 120
          minLength: 1
        description:
          description: The description of the integration instance.
          type: string
          maxLength: 2048
          nullable: true
        integration:
          $ref: '#/components/schemas/IntegrationRefWithoutInstance'
        authorized:
          description: >-
            Denotes whether the integration instance has been authorized within
            the catalog.
          type: boolean
          example: true
          readOnly: true
        config:
          $ref: '#/components/schemas/IntegrationInstanceConfig'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - id
        - name
        - display_name
        - description
        - integration
        - authorized
        - config
        - created_at
        - updated_at
    IntegrationInstanceConfig:
      description: >
        JSON object representing configuration specific to the integration
        instance.

        The expected schema depends on the integration type and is dynamically
        registered at runtime.
      type: object
      example:
        account_region: eu
      default: {}
      additionalProperties: true
    InitializeCatalogResource:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CatalogResourceType'
        data:
          $ref: '#/components/schemas/CatalogResourceConfig'
      additionalProperties: false
      required:
        - type
        - config
    UpdateCatalogResource:
      type: object
      properties:
        archived:
          description: >
            Whether or not to archive the resource.

            When a resource is archived, all catalog service mappings will be
            removed.
          type: boolean
          example: false
      additionalProperties: false
    CatalogResource:
      description: Information about a catalog resource.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CatalogResourceId'
        name:
          description: >
            The name of the resource.

            Will be `null` when the resource has not yet been hydrated by the
            integration.
          type: string
          maxLength: 255
          minLength: 1
          nullable: true
        integration:
          $ref: '#/components/schemas/IntegrationRef'
        type:
          $ref: '#/components/schemas/CatalogResourceType'
        config:
          $ref: '#/components/schemas/CatalogResourceConfig'
        attributes:
          description: >
            JSON object containing schemaless attributes of the resource.

            This field is always populated by the system backing the
            integration.

            When `null`, the resource has been manually initialized via API but
            has

            yet to be hydrated by the integration.
          type: object
          additionalProperties: true
          nullable: true
          readOnly: true
        archived:
          description: Whether or not the resource has been archived.
          type: boolean
          example: false
        service_associations:
          description: The number of catalog services this resource is mapped to.
          type: number
          example: 2
          minimum: 0
          readOnly: true
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - id
        - name
        - integration
        - type
        - config
        - attributes
        - archived
        - service_associations
        - created_at
        - updated_at
    CatalogResourceId:
      description: The resource ID.
      type: string
      format: base64url
      example: 4UdXnoaDYYJsH_Ir
      maxLength: 16
      minLength: 16
    CatalogResourceConfig:
      description: >
        JSON object representing the properties used to identify the resource in
        the third-party system.

        The schema depends on the resource type and is dynamically registered at
        runtime.
      type: object
      example:
        control_plane_id: ccadfb0a-56cd-4f74-955d-aec1d87157c8
        gateway_service_id: 94896d05-0c4d-45eb-aae3-de754885dd58
      additionalProperties: true
      x-speakeasy-type-override: any
    CatalogResourceType:
      description: >
        The resource type. Available resource types are compiled from the
        integrations installed within the catalog.
      type: string
      example: gateway_svc
      maxLength: 120
      minLength: 1
    CreateCatalogResourceMapping:
      type: object
      properties:
        service:
          description: The `id` or `name` of the service to map the resource to.
          type: string
          example: user-svc
          x-speakeasy-name-override: service_id
        resource:
          description: The resource ID.
          type: string
          format: base64url
          example: 4UdXnoaDYYJsH_Ir
          maxLength: 16
          minLength: 16
          x-speakeasy-name-override: resource_id
      additionalProperties: false
      required:
        - service
        - resource
    CatalogResourceMapping:
      description: Describes a mapping between a catalog resource and a service.
      type: object
      properties:
        id:
          description: The resource mapping ID.
          type: string
          format: uuid
          example: d277faad-ed4e-4c56-a0fb-acce065dee34
        resource:
          $ref: '#/components/schemas/CatalogResourceRef'
        service:
          $ref: '#/components/schemas/CatalogServiceRef'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - id
        - resource
        - service
        - created_at
    CustomFields:
      description: >
        Map of customizable, catalog-defined fields providing information about
        a service.
      type: object
      example:
        owner: John Appleseed
        dashboard:
          name: On-Call Dashboard
          link: https://my-dashboard-svc.io/dashboards/1
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/TextCustomField'
          - $ref: '#/components/schemas/NumericCustomField'
          - $ref: '#/components/schemas/BooleanCustomField'
          - $ref: '#/components/schemas/UrlCustomField'
      x-speakeasy-type-override: any
    TextCustomField:
      type: string
      nullable: true
    NumericCustomField:
      type: number
      nullable: true
    BooleanCustomField:
      type: boolean
      nullable: true
    UrlCustomField:
      type: object
      properties:
        name:
          description: The human-readable name of the URL link.
          type: string
          example: On-Call Dashboard
        link:
          description: The href value of the URL link.
          type: string
          format: uri-reference
          example: https://my-dashboard-svc.io/dashboards/1
      nullable: true
      required:
        - name
        - link
    CatalogServiceRef:
      description: Short-hand descriptor of a catalog service.
      type: object
      properties:
        id:
          description: The service ID.
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        name:
          description: >
            The machine name of the service that uniquely identifies it within
            the catalog.
          type: string
          example: user-svc
        display_name:
          description: The display name of the service.
          type: string
          example: User Service
      required:
        - id
        - name
        - display_name
    IntegrationRef:
      description: Short-hand descriptor of an integration installed within the catalog.
      type: object
      properties:
        name:
          type: string
          example: gateway-manager
        display_name:
          type: string
          example: gateway-manager
        instance:
          $ref: '#/components/schemas/IntegrationInstanceRef'
      required:
        - name
        - display_name
        - instance
    IntegrationRefWithoutInstance:
      description: Short-hand descriptor of an integration that omits instance metadata.
      type: object
      properties:
        name:
          type: string
          example: gateway-manager
        display_name:
          type: string
          example: gateway-manager
      required:
        - name
        - display_name
    IntegrationInstanceRef:
      description: Short-hand descriptor of an integration instance.
      type: object
      properties:
        id:
          description: The integration instance ID.
          type: string
          format: uuid
          example: 772b9caf-ddbc-4f4f-8aa4-8dfbbe420351
        name:
          description: >
            The machine name of the integration instance that uniquely
            identifies it within the catalog.
          type: string
          example: aws-lambda-prod
          pattern: ^[0-9a-z.-]+$
        display_name:
          description: The display name of the integration instance.
          type: string
          example: AWS (prod)
      required:
        - id
        - name
        - display_name
    CatalogResourceRef:
      description: Short-hand descriptor of a catalog resource.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CatalogResourceId'
        name:
          description: The name of the resource.
          type: string
          nullable: true
        integration:
          $ref: '#/components/schemas/IntegrationRef'
        type:
          $ref: '#/components/schemas/CatalogResourceType'
        config:
          $ref: '#/components/schemas/CatalogResourceConfig'
      required:
        - id
        - name
        - type
        - config
        - integration
    Labels:
      description: >
        Labels store metadata of an entity that can be used for filtering an
        entity list or for searching across entity types. 


        Keys must be of length 1-63 characters, and cannot start with "kong",
        "konnect", "mesh", "kic", or "_".
      type: object
      example:
        env: test
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z-._]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
      maxProperties: 50
      title: Labels
    CreatedAt:
      description: An ISO-8601 timestamp representation of entity creation date.
      type: string
      format: date-time
      example: '2022-11-04T20:10:06.927Z'
      readOnly: true
      x-speakeasy-param-suppress-computed-diff: true
    UpdatedAt:
      description: An ISO-8601 timestamp representation of entity update date.
      type: string
      format: date-time
      example: '2022-11-04T20:10:06.927Z'
      readOnly: true
      x-speakeasy-param-suppress-computed-diff: true
    BaseError:
      description: standard error
      type: object
      properties:
        status:
          description: >
            The HTTP status code of the error. Useful when passing the response

            body to child properties in a frontend UI. Must be returned as an
            integer.
          type: integer
          readOnly: true
        title:
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          type: string
          readOnly: true
        type:
          description: The error type.
          type: string
          readOnly: true
        instance:
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          type: string
          readOnly: true
        detail:
          description: >
            A human readable explanation specific to this occurence of the
            problem.

            This field may contain request/entity data to help the user
            understand

            what went wrong. Enclose variable values in square brackets. Should
            be

            provided as "Sentence case" for direct use in the UI.
          type: string
          readOnly: true
      required:
        - status
        - title
        - instance
        - detail
      title: Error
    InvalidRules:
      description: invalid parameters rules
      type: string
      enum:
        - required
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - is_fqdn
        - is_arn
        - unknown_property
        - missing_reference
        - is_label
        - matches_regex
        - invalid
        - is_supported_network_availability_zone_list
        - is_supported_network_cidr_block
        - is_supported_provider_region
      nullable: true
      readOnly: true
    InvalidParameterStandard:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        source:
          type: string
          example: body
        reason:
          type: string
          example: is a required field
          readOnly: true
      additionalProperties: false
      required:
        - field
        - reason
    InvalidParameterMinimumLength:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - min_length
            - min_digits
            - min_lowercase
            - min_uppercase
            - min_symbols
            - min_items
            - min
          nullable: false
          readOnly: true
        minimum:
          type: integer
          example: 8
        source:
          type: string
          example: body
        reason:
          type: string
          example: must have at least 8 characters
          readOnly: true
      additionalProperties: false
      required:
        - field
        - reason
        - rule
        - minimum
    InvalidParameterMaximumLength:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - max_length
            - max_items
            - max
          nullable: false
          readOnly: true
        maximum:
          type: integer
          example: 8
        source:
          type: string
          example: body
        reason:
          type: string
          example: must not have more than 8 characters
          readOnly: true
      additionalProperties: false
      required:
        - field
        - reason
        - rule
        - maximum
    InvalidParameterChoiceItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - enum
          nullable: false
          readOnly: true
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          items: {}
          minItems: 1
          nullable: false
          readOnly: true
          uniqueItems: true
        source:
          type: string
          example: body
      additionalProperties: false
      required:
        - field
        - reason
        - rule
        - choices
    InvalidParameterDependentItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - dependent_fields
          nullable: true
          readOnly: true
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          items: {}
          nullable: true
          readOnly: true
          uniqueItems: true
        source:
          type: string
          example: body
      additionalProperties: false
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameters:
      description: invalid parameters
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvalidParameterStandard'
          - $ref: '#/components/schemas/InvalidParameterMinimumLength'
          - $ref: '#/components/schemas/InvalidParameterMaximumLength'
          - $ref: '#/components/schemas/InvalidParameterChoiceItem'
          - $ref: '#/components/schemas/InvalidParameterDependentItem'
      minItems: 1
      nullable: false
      uniqueItems: true
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          required:
            - invalid_parameters
          properties:
            invalid_parameters:
              $ref: '#/components/schemas/InvalidParameters'
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 401
            title:
              example: Unauthorized
            type:
              example: https://httpstatuses.com/401
            instance:
              example: kong:trace:1234567890
            detail:
              example: Invalid credentials
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 403
            title:
              example: Forbidden
            type:
              example: https://httpstatuses.com/403
            instance:
              example: kong:trace:1234567890
            detail:
              example: Forbidden
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: https://httpstatuses.com/404
            instance:
              example: kong:trace:1234567890
            detail:
              example: Not found
    LabelsUpdate:
      description: >
        Labels store metadata of an entity that can be used for filtering an
        entity list or for searching across entity types. 


        Labels are intended to store **INTERNAL** metadata.


        Keys must be of length 1-63 characters, and cannot start with "kong",
        "konnect", "mesh", "kic", or "_".
      type: object
      example:
        env: test
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z-._]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
        nullable: true
      maxProperties: 50
      nullable: true
      writeOnly: true
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: https://httpstatuses.com/409
            instance:
              example: kong:trace:1234567890
            detail:
              example: Conflict
  requestBodies:
    CreateCatalogServiceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCatalogService'
    UpdateCatalogServiceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCatalogService'
    CreateIntegrationInstanceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateIntegrationInstance'
    UpdateIntegrationInstanceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateIntegrationInstance'
    InitializeCatalogResourceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InitializeCatalogResource'
    UpdateCatalogResourceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCatalogResource'
    CreateCatalogResourceMappingRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCatalogResourceMapping'
  responses:
    CatalogServiceResponse:
      description: A response containing a single service object.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogService'
    IntegrationInstanceResponse:
      description: A response containing a single integration instance object.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IntegrationInstance'
    CatalogResourceMappingResponse:
      description: A response containing a single catalog resource mapping.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogResourceMapping'
    CatalogResourceResponse:
      description: A response containing a single resource object.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogResource'
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    Internal:
      description: Internal
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BaseError'
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
  securitySchemes:
    konnectAccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        The Konnect access token is meant to be used by the Konnect dashboard
        and the decK CLI authenticate with.
    personalAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The personal access token is meant to be used as an alternative to
        basic-auth when accessing Konnect via APIs.

        You can generate a Personal Access Token (PAT) from the [personal access
        token page](https://cloud.konghq.com/global/account/tokens/) in the
        Konnect dashboard.

        The PAT token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header
        'Authorization: Bearer kpat_xgfT...'`
    systemAccountAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The system account access token is meant for automations and
        integrations that are not directly associated with a human identity.

        You can generate a system account Access Token by creating a system
        account and then obtaining a system account access token for that
        account.

        The access token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header
        'Authorization: Bearer spat_i2Ej...'`
tags:
  - name: Catalog Services
  - name: Integration Instances
  - name: Catalog Resources
  - name: Catalog Resource Mappings
security:
  - konnectAccessToken: []
  - personalAccessToken: []
  - systemAccountAccessToken: []

