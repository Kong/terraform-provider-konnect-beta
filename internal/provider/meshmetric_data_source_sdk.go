// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshMetricDataSourceModel) ToOperationsGetMeshMetricRequest(ctx context.Context) (*operations.GetMeshMetricRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshMetricRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshMetricDataSourceModel) RefreshFromSharedMeshMetricItem(ctx context.Context, resp *shared.MeshMetricItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.Default{}
			r.Spec.Default.Applications = []tfTypes.Applications{}
			if len(r.Spec.Default.Applications) > len(resp.Spec.Default.Applications) {
				r.Spec.Default.Applications = r.Spec.Default.Applications[:len(resp.Spec.Default.Applications)]
			}
			for applicationsCount, applicationsItem := range resp.Spec.Default.Applications {
				var applications tfTypes.Applications
				applications.Address = types.StringPointerValue(applicationsItem.Address)
				applications.Name = types.StringPointerValue(applicationsItem.Name)
				applications.Path = types.StringPointerValue(applicationsItem.Path)
				applications.Port = types.Int32Value(int32(applicationsItem.Port))
				if applicationsCount+1 > len(r.Spec.Default.Applications) {
					r.Spec.Default.Applications = append(r.Spec.Default.Applications, applications)
				} else {
					r.Spec.Default.Applications[applicationsCount].Address = applications.Address
					r.Spec.Default.Applications[applicationsCount].Name = applications.Name
					r.Spec.Default.Applications[applicationsCount].Path = applications.Path
					r.Spec.Default.Applications[applicationsCount].Port = applications.Port
				}
			}
			r.Spec.Default.Backends = []tfTypes.MeshMetricItemBackends{}
			if len(r.Spec.Default.Backends) > len(resp.Spec.Default.Backends) {
				r.Spec.Default.Backends = r.Spec.Default.Backends[:len(resp.Spec.Default.Backends)]
			}
			for backendsCount, backendsItem := range resp.Spec.Default.Backends {
				var backends tfTypes.MeshMetricItemBackends
				if backendsItem.OpenTelemetry == nil {
					backends.OpenTelemetry = nil
				} else {
					backends.OpenTelemetry = &tfTypes.OpenTelemetry{}
					backends.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
					backends.OpenTelemetry.RefreshInterval = types.StringPointerValue(backendsItem.OpenTelemetry.RefreshInterval)
				}
				if backendsItem.Prometheus == nil {
					backends.Prometheus = nil
				} else {
					backends.Prometheus = &tfTypes.Prometheus{}
					backends.Prometheus.ClientID = types.StringPointerValue(backendsItem.Prometheus.ClientID)
					backends.Prometheus.Path = types.StringPointerValue(backendsItem.Prometheus.Path)
					backends.Prometheus.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(backendsItem.Prometheus.Port))
					if backendsItem.Prometheus.TLS == nil {
						backends.Prometheus.TLS = nil
					} else {
						backends.Prometheus.TLS = &tfTypes.MeshMetricItemTLS{}
						if backendsItem.Prometheus.TLS.Mode != nil {
							backends.Prometheus.TLS.Mode = types.StringValue(string(*backendsItem.Prometheus.TLS.Mode))
						} else {
							backends.Prometheus.TLS.Mode = types.StringNull()
						}
					}
				}
				backends.Type = types.StringValue(string(backendsItem.Type))
				if backendsCount+1 > len(r.Spec.Default.Backends) {
					r.Spec.Default.Backends = append(r.Spec.Default.Backends, backends)
				} else {
					r.Spec.Default.Backends[backendsCount].OpenTelemetry = backends.OpenTelemetry
					r.Spec.Default.Backends[backendsCount].Prometheus = backends.Prometheus
					r.Spec.Default.Backends[backendsCount].Type = backends.Type
				}
			}
			if resp.Spec.Default.Sidecar == nil {
				r.Spec.Default.Sidecar = nil
			} else {
				r.Spec.Default.Sidecar = &tfTypes.Sidecar{}
				r.Spec.Default.Sidecar.IncludeUnused = types.BoolPointerValue(resp.Spec.Default.Sidecar.IncludeUnused)
				if resp.Spec.Default.Sidecar.Profiles == nil {
					r.Spec.Default.Sidecar.Profiles = nil
				} else {
					r.Spec.Default.Sidecar.Profiles = &tfTypes.Profiles{}
					r.Spec.Default.Sidecar.Profiles.AppendProfiles = []tfTypes.MeshLoadBalancingStrategyItemSpecHeader{}
					if len(r.Spec.Default.Sidecar.Profiles.AppendProfiles) > len(resp.Spec.Default.Sidecar.Profiles.AppendProfiles) {
						r.Spec.Default.Sidecar.Profiles.AppendProfiles = r.Spec.Default.Sidecar.Profiles.AppendProfiles[:len(resp.Spec.Default.Sidecar.Profiles.AppendProfiles)]
					}
					for appendProfilesCount, appendProfilesItem := range resp.Spec.Default.Sidecar.Profiles.AppendProfiles {
						var appendProfiles tfTypes.MeshLoadBalancingStrategyItemSpecHeader
						appendProfiles.Name = types.StringValue(string(appendProfilesItem.Name))
						if appendProfilesCount+1 > len(r.Spec.Default.Sidecar.Profiles.AppendProfiles) {
							r.Spec.Default.Sidecar.Profiles.AppendProfiles = append(r.Spec.Default.Sidecar.Profiles.AppendProfiles, appendProfiles)
						} else {
							r.Spec.Default.Sidecar.Profiles.AppendProfiles[appendProfilesCount].Name = appendProfiles.Name
						}
					}
					r.Spec.Default.Sidecar.Profiles.Exclude = []tfTypes.Exclude{}
					if len(r.Spec.Default.Sidecar.Profiles.Exclude) > len(resp.Spec.Default.Sidecar.Profiles.Exclude) {
						r.Spec.Default.Sidecar.Profiles.Exclude = r.Spec.Default.Sidecar.Profiles.Exclude[:len(resp.Spec.Default.Sidecar.Profiles.Exclude)]
					}
					for excludeCount, excludeItem := range resp.Spec.Default.Sidecar.Profiles.Exclude {
						var exclude tfTypes.Exclude
						exclude.Match = types.StringValue(excludeItem.Match)
						exclude.Type = types.StringValue(string(excludeItem.Type))
						if excludeCount+1 > len(r.Spec.Default.Sidecar.Profiles.Exclude) {
							r.Spec.Default.Sidecar.Profiles.Exclude = append(r.Spec.Default.Sidecar.Profiles.Exclude, exclude)
						} else {
							r.Spec.Default.Sidecar.Profiles.Exclude[excludeCount].Match = exclude.Match
							r.Spec.Default.Sidecar.Profiles.Exclude[excludeCount].Type = exclude.Type
						}
					}
					r.Spec.Default.Sidecar.Profiles.Include = []tfTypes.Exclude{}
					if len(r.Spec.Default.Sidecar.Profiles.Include) > len(resp.Spec.Default.Sidecar.Profiles.Include) {
						r.Spec.Default.Sidecar.Profiles.Include = r.Spec.Default.Sidecar.Profiles.Include[:len(resp.Spec.Default.Sidecar.Profiles.Include)]
					}
					for includeCount, includeItem := range resp.Spec.Default.Sidecar.Profiles.Include {
						var include tfTypes.Exclude
						include.Match = types.StringValue(includeItem.Match)
						include.Type = types.StringValue(string(includeItem.Type))
						if includeCount+1 > len(r.Spec.Default.Sidecar.Profiles.Include) {
							r.Spec.Default.Sidecar.Profiles.Include = append(r.Spec.Default.Sidecar.Profiles.Include, include)
						} else {
							r.Spec.Default.Sidecar.Profiles.Include[includeCount].Match = include.Match
							r.Spec.Default.Sidecar.Profiles.Include[includeCount].Type = include.Type
						}
					}
				}
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}
