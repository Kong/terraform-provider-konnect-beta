// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APISpecificationDataSourceModel) ToOperationsFetchAPISpecRequest(ctx context.Context) (*operations.FetchAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.FetchAPISpecRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APISpecificationDataSourceModel) RefreshFromSharedAPISpecResponse(ctx context.Context, resp *shared.APISpecResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		r.Type = types.StringValue(string(resp.Type))
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.ValidationMessages = []tfTypes.ValidationMessages{}
		if len(r.ValidationMessages) > len(resp.ValidationMessages) {
			r.ValidationMessages = r.ValidationMessages[:len(resp.ValidationMessages)]
		}
		for validationMessagesCount, validationMessagesItem := range resp.ValidationMessages {
			var validationMessages tfTypes.ValidationMessages
			validationMessages.Message = types.StringValue(validationMessagesItem.Message)
			if validationMessagesCount+1 > len(r.ValidationMessages) {
				r.ValidationMessages = append(r.ValidationMessages, validationMessages)
			} else {
				r.ValidationMessages[validationMessagesCount].Message = validationMessages.Message
			}
		}
	}

	return diags
}
