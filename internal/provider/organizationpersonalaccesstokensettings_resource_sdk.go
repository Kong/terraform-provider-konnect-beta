// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *OrganizationPersonalAccessTokenSettingsResourceModel) RefreshFromSharedPersonalAccessTokenSettingsResponse(ctx context.Context, resp *shared.PersonalAccessTokenSettingsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.MaxExpirationPeriodDays = types.Int64Value(resp.MaxExpirationPeriodDays)
		r.PatsEnabled = types.BoolValue(resp.PatsEnabled)
	}

	return diags
}

func (r *OrganizationPersonalAccessTokenSettingsResourceModel) ToOperationsGetOrganizationsPersonalAccessTokenSettingsRequest(ctx context.Context) (*operations.GetOrganizationsPersonalAccessTokenSettingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	out := operations.GetOrganizationsPersonalAccessTokenSettingsRequest{
		OrganizationID: organizationID,
	}

	return &out, diags
}

func (r *OrganizationPersonalAccessTokenSettingsResourceModel) ToOperationsUpdatePersonalAccessTokenSettingsRequest(ctx context.Context) (*operations.UpdatePersonalAccessTokenSettingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	personalAccessTokenSettingsUpdateRequest, personalAccessTokenSettingsUpdateRequestDiags := r.ToSharedPersonalAccessTokenSettingsUpdateRequest(ctx)
	diags.Append(personalAccessTokenSettingsUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePersonalAccessTokenSettingsRequest{
		OrganizationID:                           organizationID,
		PersonalAccessTokenSettingsUpdateRequest: personalAccessTokenSettingsUpdateRequest,
	}

	return &out, diags
}

func (r *OrganizationPersonalAccessTokenSettingsResourceModel) ToSharedPersonalAccessTokenSettingsUpdateRequest(ctx context.Context) (*shared.PersonalAccessTokenSettingsUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	patsEnabled := new(bool)
	if !r.PatsEnabled.IsUnknown() && !r.PatsEnabled.IsNull() {
		*patsEnabled = r.PatsEnabled.ValueBool()
	} else {
		patsEnabled = nil
	}
	maxExpirationPeriodDays := new(int64)
	if !r.MaxExpirationPeriodDays.IsUnknown() && !r.MaxExpirationPeriodDays.IsNull() {
		*maxExpirationPeriodDays = r.MaxExpirationPeriodDays.ValueInt64()
	} else {
		maxExpirationPeriodDays = nil
	}
	out := shared.PersonalAccessTokenSettingsUpdateRequest{
		PatsEnabled:             patsEnabled,
		MaxExpirationPeriodDays: maxExpirationPeriodDays,
	}

	return &out, diags
}
