// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MeshMultiZoneServiceListDataSource{}
var _ datasource.DataSourceWithConfigure = &MeshMultiZoneServiceListDataSource{}

func NewMeshMultiZoneServiceListDataSource() datasource.DataSource {
	return &MeshMultiZoneServiceListDataSource{}
}

// MeshMultiZoneServiceListDataSource is the data source implementation.
type MeshMultiZoneServiceListDataSource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// MeshMultiZoneServiceListDataSourceModel describes the data model.
type MeshMultiZoneServiceListDataSourceModel struct {
	CpID   types.String                                      `tfsdk:"cp_id"`
	Filter *tfTypes.GetHostnameGeneratorListQueryParamFilter `queryParam:"style=form,explode=true,name=filter" tfsdk:"filter"`
	Items  []tfTypes.MeshMultiZoneServiceItem                `tfsdk:"items"`
	Mesh   types.String                                      `tfsdk:"mesh"`
	Next   types.String                                      `tfsdk:"next"`
	Offset types.Int64                                       `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	Size   types.Int64                                       `queryParam:"style=form,explode=true,name=size" tfsdk:"size"`
	Total  types.Float64                                     `tfsdk:"total"`
}

// Metadata returns the data source type name.
func (r *MeshMultiZoneServiceListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_multi_zone_service_list"
}

// Schema defines the schema for the data source.
func (r *MeshMultiZoneServiceListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshMultiZoneServiceList DataSource",

		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"filter": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"key": schema.StringAttribute{
						Optional: true,
					},
					"value": schema.StringAttribute{
						Optional: true,
					},
				},
				Description: `filter by labels when multiple filters are present, they are ANDed`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"creation_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was created`,
						},
						"labels": schema.MapAttribute{
							CustomType:  kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}},
							Computed:    true,
							ElementType: types.StringType,
							Description: `The labels to help identity resources`,
						},
						"mesh": schema.StringAttribute{
							Computed:    true,
							Description: `Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.`,
						},
						"modification_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was updated`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name of the Kuma resource`,
						},
						"spec": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"ports": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_protocol": schema.StringAttribute{
												Computed:    true,
												Description: `Protocol identifies a protocol supported by a service.`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"port": schema.Int32Attribute{
												Computed: true,
											},
										},
									},
									Description: `Ports is a list of ports from selected MeshServices`,
								},
								"selector": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"mesh_service": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"match_labels": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `MatchLabels matches multiple MeshServices by labels`,
												},
											},
											Description: `MeshService selects MeshServices`,
										},
									},
									Description: `Selector is a way to select multiple MeshServices`,
								},
							},
							Description: `Spec is the specification of the Kuma MeshMultiZoneService resource.`,
						},
						"status": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"addresses": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"hostname": schema.StringAttribute{
												Computed: true,
											},
											"hostname_generator_ref": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"core_name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"origin": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Addresses is a list of addresses generated by HostnameGenerator`,
								},
								"hostname_generators": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"conditions": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"message": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `message is a human readable message indicating details about the transition.` + "\n" +
																`This may be an empty string.`,
														},
														"reason": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `reason contains a programmatic identifier indicating the reason for the condition's last transition.` + "\n" +
																`Producers of specific condition types may define expected values and meanings for this field,` + "\n" +
																`and whether the values are considered a guaranteed API.` + "\n" +
																`The value should be a CamelCase string.` + "\n" +
																`This field may not be empty.`,
														},
														"status": schema.StringAttribute{
															Computed:    true,
															Description: `status of the condition, one of True, False, Unknown.`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `type of condition in CamelCase or in foo.example.com/CamelCase.`,
														},
													},
												},
												Description: `Conditions is an array of hostname generator conditions.`,
											},
											"hostname_generator_ref": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"core_name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
									Description: `Status of hostnames generator applied on this resource`,
								},
								"mesh_services": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"mesh": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed:    true,
												Description: `Name is a core name of MeshService`,
											},
											"namespace": schema.StringAttribute{
												Computed: true,
											},
											"zone": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `MeshServices is a list of matched MeshServices`,
								},
								"vips": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"ip": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `VIPs is a list of assigned Kuma VIPs.`,
								},
							},
							Description: `Status is the current status of the Kuma MeshMultiZoneService resource.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `the type of the resource`,
						},
					},
				},
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `URL to the next page`,
			},
			"offset": schema.Int64Attribute{
				Optional:    true,
				Description: `offset in the list of entities`,
			},
			"size": schema.Int64Attribute{
				Optional:    true,
				Description: `the number of items per page`,
				Validators: []validator.Int64{
					int64validator.Between(1, 1000),
				},
			},
			"total": schema.Float64Attribute{
				Computed:    true,
				Description: `The total number of entities`,
			},
		},
	}
}

func (r *MeshMultiZoneServiceListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshMultiZoneServiceListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *MeshMultiZoneServiceListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetMeshMultiZoneServiceListRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MeshMultiZoneService.GetMeshMultiZoneServiceList(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshMultiZoneServiceList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshMultiZoneServiceList(ctx, res.MeshMultiZoneServiceList)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
