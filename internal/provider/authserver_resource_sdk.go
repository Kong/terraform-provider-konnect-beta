// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerResourceModel) ToSharedCreateAuthServer(ctx context.Context) (*shared.CreateAuthServer, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var audience string
	audience = r.Audience.ValueString()

	signingAlgorithm := new(shared.Algorithm)
	if !r.SigningAlgorithm.IsUnknown() && !r.SigningAlgorithm.IsNull() {
		*signingAlgorithm = shared.Algorithm(r.SigningAlgorithm.ValueString())
	} else {
		signingAlgorithm = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateAuthServer{
		Name:             name,
		Description:      description,
		Audience:         audience,
		SigningAlgorithm: signingAlgorithm,
		Labels:           labels,
	}

	return &out, diags
}

func (r *AuthServerResourceModel) ToSharedUpdateAuthServer(ctx context.Context) (*shared.UpdateAuthServer, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	audience := new(string)
	if !r.Audience.IsUnknown() && !r.Audience.IsNull() {
		*audience = r.Audience.ValueString()
	} else {
		audience = nil
	}
	signingAlgorithm := new(shared.Algorithm)
	if !r.SigningAlgorithm.IsUnknown() && !r.SigningAlgorithm.IsNull() {
		*signingAlgorithm = shared.Algorithm(r.SigningAlgorithm.ValueString())
	} else {
		signingAlgorithm = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdateAuthServer{
		Name:             name,
		Description:      description,
		Audience:         audience,
		SigningAlgorithm: signingAlgorithm,
		Labels:           labels,
	}

	return &out, diags
}

func (r *AuthServerResourceModel) ToOperationsUpdateAuthServerRequest(ctx context.Context) (*operations.UpdateAuthServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.ID.ValueString()

	updateAuthServer, updateAuthServerDiags := r.ToSharedUpdateAuthServer(ctx)
	diags.Append(updateAuthServerDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAuthServerRequest{
		AuthServerID:     authServerID,
		UpdateAuthServer: *updateAuthServer,
	}

	return &out, diags
}

func (r *AuthServerResourceModel) ToOperationsGetAuthServerRequest(ctx context.Context) (*operations.GetAuthServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.ID.ValueString()

	out := operations.GetAuthServerRequest{
		AuthServerID: authServerID,
	}

	return &out, diags
}

func (r *AuthServerResourceModel) ToOperationsDeleteAuthServerRequest(ctx context.Context) (*operations.DeleteAuthServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.ID.ValueString()

	out := operations.DeleteAuthServerRequest{
		AuthServerID: authServerID,
	}

	return &out, diags
}

func (r *AuthServerResourceModel) RefreshFromSharedAuthServer(ctx context.Context, resp *shared.AuthServer) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Audience = types.StringValue(resp.Audience)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Issuer = types.StringValue(resp.Issuer)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.MetadataURI = types.StringValue(resp.MetadataURI)
		r.Name = types.StringValue(resp.Name)
		if resp.SigningAlgorithm != nil {
			r.SigningAlgorithm = types.StringValue(string(*resp.SigningAlgorithm))
		} else {
			r.SigningAlgorithm = types.StringNull()
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
