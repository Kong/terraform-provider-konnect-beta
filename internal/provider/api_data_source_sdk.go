// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIDataSourceModel) RefreshFromSharedAPIResponseSchema(ctx context.Context, resp *shared.APIResponseSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.APISpecIds = make([]types.String, 0, len(resp.APISpecIds))
		for _, v := range resp.APISpecIds {
			r.APISpecIds = append(r.APISpecIds, types.StringValue(v))
		}
		if resp.Attributes == nil {
			r.Attributes = types.StringNull()
		} else {
			attributesResult, _ := json.Marshal(resp.Attributes)
			r.Attributes = types.StringValue(string(attributesResult))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		if resp.CurrentVersionSummary == nil {
			r.CurrentVersionSummary = nil
		} else {
			r.CurrentVersionSummary = &tfTypes.APIVersionSummary{}
			r.CurrentVersionSummary.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CurrentVersionSummary.CreatedAt))
			r.CurrentVersionSummary.ID = types.StringPointerValue(resp.CurrentVersionSummary.ID)
			if resp.CurrentVersionSummary.Spec == nil {
				r.CurrentVersionSummary.Spec = nil
			} else {
				r.CurrentVersionSummary.Spec = &tfTypes.Spec{}
				if resp.CurrentVersionSummary.Spec.Type != nil {
					r.CurrentVersionSummary.Spec.Type = types.StringValue(string(*resp.CurrentVersionSummary.Spec.Type))
				} else {
					r.CurrentVersionSummary.Spec.Type = types.StringNull()
				}
			}
			r.CurrentVersionSummary.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CurrentVersionSummary.UpdatedAt))
			r.CurrentVersionSummary.Version = types.StringPointerValue(resp.CurrentVersionSummary.Version)
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Portals = []tfTypes.Portals{}
		if len(r.Portals) > len(resp.Portals) {
			r.Portals = r.Portals[:len(resp.Portals)]
		}
		for portalsCount, portalsItem := range resp.Portals {
			var portals tfTypes.Portals
			portals.DisplayName = types.StringValue(portalsItem.DisplayName)
			portals.ID = types.StringValue(portalsItem.ID)
			portals.Name = types.StringValue(portalsItem.Name)
			if portalsCount+1 > len(r.Portals) {
				r.Portals = append(r.Portals, portals)
			} else {
				r.Portals[portalsCount].DisplayName = portals.DisplayName
				r.Portals[portalsCount].ID = portals.ID
				r.Portals[portalsCount].Name = portals.Name
			}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringPointerValue(resp.Version)
	}

	return diags
}

func (r *APIDataSourceModel) ToOperationsFetchAPIRequest(ctx context.Context) (*operations.FetchAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.ID.ValueString()

	out := operations.FetchAPIRequest{
		APIID: apiID,
	}

	return &out, diags
}
