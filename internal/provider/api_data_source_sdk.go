// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *APIDataSourceModel) RefreshFromSharedAPIResponseSchema(resp *shared.APIResponseSchema) {
	if resp != nil {
		if resp.AuthStrategySyncError == nil {
			r.AuthStrategySyncError = nil
		} else {
			r.AuthStrategySyncError = &tfTypes.AuthStrategySyncError{}
			if resp.AuthStrategySyncError.ControlPlaneError != nil {
				r.AuthStrategySyncError.ControlPlaneError = types.StringValue(string(*resp.AuthStrategySyncError.ControlPlaneError))
			} else {
				r.AuthStrategySyncError.ControlPlaneError = types.StringNull()
			}
			if resp.AuthStrategySyncError.Info == nil {
				r.AuthStrategySyncError.Info = nil
			} else {
				r.AuthStrategySyncError.Info = &tfTypes.Info{}
				if resp.AuthStrategySyncError.Info.AdditionalProperties == nil {
					r.AuthStrategySyncError.Info.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(resp.AuthStrategySyncError.Info.AdditionalProperties)
					r.AuthStrategySyncError.Info.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				r.AuthStrategySyncError.Info.Details = []tfTypes.Details{}
				if len(r.AuthStrategySyncError.Info.Details) > len(resp.AuthStrategySyncError.Info.Details) {
					r.AuthStrategySyncError.Info.Details = r.AuthStrategySyncError.Info.Details[:len(resp.AuthStrategySyncError.Info.Details)]
				}
				for detailsCount, detailsItem := range resp.AuthStrategySyncError.Info.Details {
					var details1 tfTypes.Details
					if detailsItem.AdditionalProperties == nil {
						details1.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult1, _ := json.Marshal(detailsItem.AdditionalProperties)
						details1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
					}
					details1.Message = make([]types.String, 0, len(detailsItem.Message))
					for _, v := range detailsItem.Message {
						details1.Message = append(details1.Message, types.StringValue(v))
					}
					details1.Type = types.StringPointerValue(detailsItem.Type)
					if detailsCount+1 > len(r.AuthStrategySyncError.Info.Details) {
						r.AuthStrategySyncError.Info.Details = append(r.AuthStrategySyncError.Info.Details, details1)
					} else {
						r.AuthStrategySyncError.Info.Details[detailsCount].AdditionalProperties = details1.AdditionalProperties
						r.AuthStrategySyncError.Info.Details[detailsCount].Message = details1.Message
						r.AuthStrategySyncError.Info.Details[detailsCount].Type = details1.Type
					}
				}
			}
			r.AuthStrategySyncError.Message = types.StringValue(resp.AuthStrategySyncError.Message)
		}
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Deprecated = types.BoolValue(resp.Deprecated)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Portals = []tfTypes.Portals{}
		if len(r.Portals) > len(resp.Portals) {
			r.Portals = r.Portals[:len(resp.Portals)]
		}
		for portalsCount, portalsItem := range resp.Portals {
			var portals1 tfTypes.Portals
			portals1.DisplayName = types.StringValue(portalsItem.DisplayName)
			portals1.ID = types.StringValue(portalsItem.ID)
			portals1.Name = types.StringValue(portalsItem.Name)
			if portalsCount+1 > len(r.Portals) {
				r.Portals = append(r.Portals, portals1)
			} else {
				r.Portals[portalsCount].DisplayName = portals1.DisplayName
				r.Portals[portalsCount].ID = portals1.ID
				r.Portals[portalsCount].Name = portals1.Name
			}
		}
		if len(resp.PublicLabels) > 0 {
			r.PublicLabels = make(map[string]types.String, len(resp.PublicLabels))
			for key1, value1 := range resp.PublicLabels {
				r.PublicLabels[key1] = types.StringValue(value1)
			}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		r.Version = types.StringPointerValue(resp.Version)
	}
}
