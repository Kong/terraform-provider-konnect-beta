// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ResourceMappingDataSource{}
var _ datasource.DataSourceWithConfigure = &ResourceMappingDataSource{}

func NewResourceMappingDataSource() datasource.DataSource {
	return &ResourceMappingDataSource{}
}

// ResourceMappingDataSource is the data source implementation.
type ResourceMappingDataSource struct {
	client *sdk.KonnectBeta
}

// ResourceMappingDataSourceModel describes the data model.
type ResourceMappingDataSourceModel struct {
	CreatedAt types.String                   `tfsdk:"created_at"`
	ID        types.String                   `tfsdk:"id"`
	Resource  tfTypes.CatalogResourceRef     `tfsdk:"resource"`
	Service   tfTypes.IntegrationInstanceRef `tfsdk:"service"`
}

// Metadata returns the data source type name.
func (r *ResourceMappingDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_resource_mapping"
}

// Schema defines the schema for the data source.
func (r *ResourceMappingDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ResourceMapping DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The resource mapping ID.`,
			},
			"resource": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"config": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `JSON object representing the properties used to identify the resource in the third-party system.` + "\n" +
							`The schema depends on the resource type and is dynamically registered at runtime.` + "\n" +
							`Parsed as JSON.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `The resource ID.`,
					},
					"integration": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								Computed: true,
							},
							"instance": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"display_name": schema.StringAttribute{
										Computed:    true,
										Description: `The display name of the integration instance.`,
									},
									"id": schema.StringAttribute{
										Computed:    true,
										Description: `The integration instance ID.`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The machine name of the integration instance that uniquely identifies it within the catalog.`,
									},
								},
								Description: `Short-hand descriptor of an integration instance.`,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `Short-hand descriptor of an integration installed within the catalog.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the resource.`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Description: `The resource type. Available resource types are compiled from the integrations installed within the catalog.`,
					},
				},
				Description: `Short-hand descriptor of a catalog resource.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the service.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `The service ID.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The machine name of the service that uniquely identifies it within the catalog.`,
					},
				},
				Description: `Short-hand descriptor of a catalog service.`,
			},
		},
	}
}

func (r *ResourceMappingDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ResourceMappingDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ResourceMappingDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsFetchResourceMappingRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CatalogResourceMappings.FetchResourceMapping(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CatalogResourceMapping != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedCatalogResourceMapping(ctx, res.CatalogResourceMapping)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
