// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *ZoneEgressResourceModel) RefreshFromSharedZoneEgressCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.ZoneEgressCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *ZoneEgressResourceModel) RefreshFromSharedZoneEgressItem(ctx context.Context, resp *shared.ZoneEgressItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Networking == nil {
			r.Networking = nil
		} else {
			r.Networking = &tfTypes.ZoneEgressItemNetworking{}
			r.Networking.Address = types.StringPointerValue(resp.Networking.Address)
			if resp.Networking.Admin == nil {
				r.Networking.Admin = nil
			} else {
				r.Networking.Admin = &tfTypes.Admin{}
				r.Networking.Admin.Port = types.Int64PointerValue(resp.Networking.Admin.Port)
			}
			r.Networking.Port = types.Int64PointerValue(resp.Networking.Port)
		}
		r.Type = types.StringValue(resp.Type)
		r.Zone = types.StringPointerValue(resp.Zone)
	}

	return diags
}

func (r *ZoneEgressResourceModel) ToOperationsDeleteZoneEgressRequest(ctx context.Context) (*operations.DeleteZoneEgressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteZoneEgressRequest{
		CpID: cpID,
		Name: name,
	}

	return &out, diags
}

func (r *ZoneEgressResourceModel) ToOperationsGetZoneEgressRequest(ctx context.Context) (*operations.GetZoneEgressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetZoneEgressRequest{
		CpID: cpID,
		Name: name,
	}

	return &out, diags
}

func (r *ZoneEgressResourceModel) ToOperationsPutZoneEgressRequest(ctx context.Context) (*operations.PutZoneEgressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	zoneEgressItem, zoneEgressItemDiags := r.ToSharedZoneEgressItem(ctx)
	diags.Append(zoneEgressItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutZoneEgressRequest{
		CpID:           cpID,
		Name:           name,
		ZoneEgressItem: *zoneEgressItem,
	}

	return &out, diags
}

func (r *ZoneEgressResourceModel) ToSharedZoneEgressItem(ctx context.Context) (*shared.ZoneEgressItem, diag.Diagnostics) {
	var diags diag.Diagnostics

	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var name string
	name = r.Name.ValueString()

	var networking *shared.ZoneEgressItemNetworking
	if r.Networking != nil {
		address := new(string)
		if !r.Networking.Address.IsUnknown() && !r.Networking.Address.IsNull() {
			*address = r.Networking.Address.ValueString()
		} else {
			address = nil
		}
		var admin *shared.Admin
		if r.Networking.Admin != nil {
			port := new(int64)
			if !r.Networking.Admin.Port.IsUnknown() && !r.Networking.Admin.Port.IsNull() {
				*port = r.Networking.Admin.Port.ValueInt64()
			} else {
				port = nil
			}
			admin = &shared.Admin{
				Port: port,
			}
		}
		port1 := new(int64)
		if !r.Networking.Port.IsUnknown() && !r.Networking.Port.IsNull() {
			*port1 = r.Networking.Port.ValueInt64()
		} else {
			port1 = nil
		}
		networking = &shared.ZoneEgressItemNetworking{
			Address: address,
			Admin:   admin,
			Port:    port1,
		}
	}
	var typeVar string
	typeVar = r.Type.ValueString()

	zone := new(string)
	if !r.Zone.IsUnknown() && !r.Zone.IsNull() {
		*zone = r.Zone.ValueString()
	} else {
		zone = nil
	}
	out := shared.ZoneEgressItem{
		Labels:     labels,
		Name:       name,
		Networking: networking,
		Type:       typeVar,
		Zone:       zone,
	}

	return &out, diags
}
