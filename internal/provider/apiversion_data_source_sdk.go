// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIVersionDataSourceModel) ToOperationsFetchAPIVersionRequest(ctx context.Context) (*operations.FetchAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.FetchAPIVersionRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APIVersionDataSourceModel) RefreshFromSharedAPIVersionResponse(ctx context.Context, resp *shared.APIVersionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		if resp.Spec == nil {
			r.Spec = nil
		} else {
			r.Spec = &tfTypes.CreateAPIVersionRequestSpec{}
			r.Spec.Content = types.StringPointerValue(resp.Spec.Content)
			if resp.Spec.Type != nil {
				r.Spec.Type = types.StringValue(string(*resp.Spec.Type))
			} else {
				r.Spec.Type = types.StringNull()
			}
			r.Spec.ValidationMessages = []tfTypes.ValidationMessages{}
			if len(r.Spec.ValidationMessages) > len(resp.Spec.ValidationMessages) {
				r.Spec.ValidationMessages = r.Spec.ValidationMessages[:len(resp.Spec.ValidationMessages)]
			}
			for validationMessagesCount, validationMessagesItem := range resp.Spec.ValidationMessages {
				var validationMessages tfTypes.ValidationMessages
				validationMessages.Message = types.StringValue(validationMessagesItem.Message)
				if validationMessagesCount+1 > len(r.Spec.ValidationMessages) {
					r.Spec.ValidationMessages = append(r.Spec.ValidationMessages, validationMessages)
				} else {
					r.Spec.ValidationMessages[validationMessagesCount].Message = validationMessages.Message
				}
			}
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringValue(resp.Version)
	}

	return diags
}
