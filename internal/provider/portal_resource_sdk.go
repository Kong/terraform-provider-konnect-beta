// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *PortalResourceModel) ToSharedCreatePortal() *shared.CreatePortal {
	var name string
	name = r.Name.ValueString()

	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	authenticationEnabled := new(bool)
	if !r.AuthenticationEnabled.IsUnknown() && !r.AuthenticationEnabled.IsNull() {
		*authenticationEnabled = r.AuthenticationEnabled.ValueBool()
	} else {
		authenticationEnabled = nil
	}
	rbacEnabled := new(bool)
	if !r.RbacEnabled.IsUnknown() && !r.RbacEnabled.IsNull() {
		*rbacEnabled = r.RbacEnabled.ValueBool()
	} else {
		rbacEnabled = nil
	}
	defaultAPIVisibility := new(shared.DefaultAPIVisibility)
	if !r.DefaultAPIVisibility.IsUnknown() && !r.DefaultAPIVisibility.IsNull() {
		*defaultAPIVisibility = shared.DefaultAPIVisibility(r.DefaultAPIVisibility.ValueString())
	} else {
		defaultAPIVisibility = nil
	}
	defaultPageVisibility := new(shared.DefaultPageVisibility)
	if !r.DefaultPageVisibility.IsUnknown() && !r.DefaultPageVisibility.IsNull() {
		*defaultPageVisibility = shared.DefaultPageVisibility(r.DefaultPageVisibility.ValueString())
	} else {
		defaultPageVisibility = nil
	}
	defaultApplicationAuthStrategyID := new(string)
	if !r.DefaultApplicationAuthStrategyID.IsUnknown() && !r.DefaultApplicationAuthStrategyID.IsNull() {
		*defaultApplicationAuthStrategyID = r.DefaultApplicationAuthStrategyID.ValueString()
	} else {
		defaultApplicationAuthStrategyID = nil
	}
	autoApproveDevelopers := new(bool)
	if !r.AutoApproveDevelopers.IsUnknown() && !r.AutoApproveDevelopers.IsNull() {
		*autoApproveDevelopers = r.AutoApproveDevelopers.ValueBool()
	} else {
		autoApproveDevelopers = nil
	}
	autoApproveApplications := new(bool)
	if !r.AutoApproveApplications.IsUnknown() && !r.AutoApproveApplications.IsNull() {
		*autoApproveApplications = r.AutoApproveApplications.ValueBool()
	} else {
		autoApproveApplications = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreatePortal{
		Name:                             name,
		DisplayName:                      displayName,
		Description:                      description,
		AuthenticationEnabled:            authenticationEnabled,
		RbacEnabled:                      rbacEnabled,
		DefaultAPIVisibility:             defaultAPIVisibility,
		DefaultPageVisibility:            defaultPageVisibility,
		DefaultApplicationAuthStrategyID: defaultApplicationAuthStrategyID,
		AutoApproveDevelopers:            autoApproveDevelopers,
		AutoApproveApplications:          autoApproveApplications,
		Labels:                           labels,
	}
	return &out
}

func (r *PortalResourceModel) RefreshFromSharedPortalResponse(resp *shared.PortalResponse) {
	if resp != nil {
		r.AuthenticationEnabled = types.BoolValue(resp.AuthenticationEnabled)
		r.AutoApproveApplications = types.BoolValue(resp.AutoApproveApplications)
		r.AutoApproveDevelopers = types.BoolValue(resp.AutoApproveDevelopers)
		r.CanonicalDomain = types.StringValue(resp.CanonicalDomain)
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.DefaultAPIVisibility = types.StringValue(string(resp.DefaultAPIVisibility))
		r.DefaultApplicationAuthStrategyID = types.StringPointerValue(resp.DefaultApplicationAuthStrategyID)
		r.DefaultDomain = types.StringValue(resp.DefaultDomain)
		r.DefaultPageVisibility = types.StringValue(string(resp.DefaultPageVisibility))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringValue(resp.DisplayName)
		r.ID = types.StringValue(resp.ID)
		if resp.Labels != nil {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.RbacEnabled = types.BoolValue(resp.RbacEnabled)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	}
}

func (r *PortalResourceModel) ToSharedUpdatePortal() *shared.UpdatePortal {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	authenticationEnabled := new(bool)
	if !r.AuthenticationEnabled.IsUnknown() && !r.AuthenticationEnabled.IsNull() {
		*authenticationEnabled = r.AuthenticationEnabled.ValueBool()
	} else {
		authenticationEnabled = nil
	}
	rbacEnabled := new(bool)
	if !r.RbacEnabled.IsUnknown() && !r.RbacEnabled.IsNull() {
		*rbacEnabled = r.RbacEnabled.ValueBool()
	} else {
		rbacEnabled = nil
	}
	defaultAPIVisibility := new(shared.UpdatePortalDefaultAPIVisibility)
	if !r.DefaultAPIVisibility.IsUnknown() && !r.DefaultAPIVisibility.IsNull() {
		*defaultAPIVisibility = shared.UpdatePortalDefaultAPIVisibility(r.DefaultAPIVisibility.ValueString())
	} else {
		defaultAPIVisibility = nil
	}
	defaultPageVisibility := new(shared.UpdatePortalDefaultPageVisibility)
	if !r.DefaultPageVisibility.IsUnknown() && !r.DefaultPageVisibility.IsNull() {
		*defaultPageVisibility = shared.UpdatePortalDefaultPageVisibility(r.DefaultPageVisibility.ValueString())
	} else {
		defaultPageVisibility = nil
	}
	defaultApplicationAuthStrategyID := new(string)
	if !r.DefaultApplicationAuthStrategyID.IsUnknown() && !r.DefaultApplicationAuthStrategyID.IsNull() {
		*defaultApplicationAuthStrategyID = r.DefaultApplicationAuthStrategyID.ValueString()
	} else {
		defaultApplicationAuthStrategyID = nil
	}
	autoApproveDevelopers := new(bool)
	if !r.AutoApproveDevelopers.IsUnknown() && !r.AutoApproveDevelopers.IsNull() {
		*autoApproveDevelopers = r.AutoApproveDevelopers.ValueBool()
	} else {
		autoApproveDevelopers = nil
	}
	autoApproveApplications := new(bool)
	if !r.AutoApproveApplications.IsUnknown() && !r.AutoApproveApplications.IsNull() {
		*autoApproveApplications = r.AutoApproveApplications.ValueBool()
	} else {
		autoApproveApplications = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdatePortal{
		Name:                             name,
		DisplayName:                      displayName,
		Description:                      description,
		AuthenticationEnabled:            authenticationEnabled,
		RbacEnabled:                      rbacEnabled,
		DefaultAPIVisibility:             defaultAPIVisibility,
		DefaultPageVisibility:            defaultPageVisibility,
		DefaultApplicationAuthStrategyID: defaultApplicationAuthStrategyID,
		AutoApproveDevelopers:            autoApproveDevelopers,
		AutoApproveApplications:          autoApproveApplications,
		Labels:                           labels,
	}
	return &out
}
