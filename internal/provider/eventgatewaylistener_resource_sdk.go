// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayListenerResourceModel) RefreshFromSharedEventGatewayListener(ctx context.Context, resp *shared.EventGatewayListener) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Addresses = make([]types.String, 0, len(resp.Addresses))
		for _, v := range resp.Addresses {
			r.Addresses = append(r.Addresses, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Ports = []tfTypes.EventGatewayListenerPort{}

		for _, portsItem := range resp.Ports {
			var ports tfTypes.EventGatewayListenerPort

			if portsItem.Str != nil {
				ports.Str = types.StringPointerValue(portsItem.Str)
			}
			if portsItem.Integer != nil {
				ports.Integer = types.Int64PointerValue(portsItem.Integer)
			}

			r.Ports = append(r.Ports, ports)
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayListenerResourceModel) ToOperationsCreateEventGatewayListenerRequest(ctx context.Context) (*operations.CreateEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	createEventGatewayListenerRequest, createEventGatewayListenerRequestDiags := r.ToSharedCreateEventGatewayListenerRequest(ctx)
	diags.Append(createEventGatewayListenerRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayListenerRequest{
		GatewayID:                         gatewayID,
		CreateEventGatewayListenerRequest: createEventGatewayListenerRequest,
	}

	return &out, diags
}

func (r *EventGatewayListenerResourceModel) ToOperationsDeleteEventGatewayListenerRequest(ctx context.Context) (*operations.DeleteEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.ID.ValueString()

	out := operations.DeleteEventGatewayListenerRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
	}

	return &out, diags
}

func (r *EventGatewayListenerResourceModel) ToOperationsGetEventGatewayListenerRequest(ctx context.Context) (*operations.GetEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.ID.ValueString()

	out := operations.GetEventGatewayListenerRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
	}

	return &out, diags
}

func (r *EventGatewayListenerResourceModel) ToOperationsUpdateEventGatewayListenerRequest(ctx context.Context) (*operations.UpdateEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.ID.ValueString()

	updateEventGatewayListenerRequest, updateEventGatewayListenerRequestDiags := r.ToSharedUpdateEventGatewayListenerRequest(ctx)
	diags.Append(updateEventGatewayListenerRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayListenerRequest{
		GatewayID:                         gatewayID,
		EventGatewayListenerID:            eventGatewayListenerID,
		UpdateEventGatewayListenerRequest: updateEventGatewayListenerRequest,
	}

	return &out, diags
}

func (r *EventGatewayListenerResourceModel) ToSharedCreateEventGatewayListenerRequest(ctx context.Context) (*shared.CreateEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	addresses := make([]string, 0, len(r.Addresses))
	for _, addressesItem := range r.Addresses {
		addresses = append(addresses, addressesItem.ValueString())
	}
	ports := make([]shared.EventGatewayListenerPort, 0, len(r.Ports))
	for _, portsItem := range r.Ports {
		if !portsItem.Str.IsUnknown() && !portsItem.Str.IsNull() {
			var str string
			str = portsItem.Str.ValueString()

			ports = append(ports, shared.EventGatewayListenerPort{
				Str: &str,
			})
		}
		if !portsItem.Integer.IsUnknown() && !portsItem.Integer.IsNull() {
			var integer int64
			integer = portsItem.Integer.ValueInt64()

			ports = append(ports, shared.EventGatewayListenerPort{
				Integer: &integer,
			})
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateEventGatewayListenerRequest{
		Name:        name,
		Description: description,
		Addresses:   addresses,
		Ports:       ports,
		Labels:      labels,
	}

	return &out, diags
}

func (r *EventGatewayListenerResourceModel) ToSharedUpdateEventGatewayListenerRequest(ctx context.Context) (*shared.UpdateEventGatewayListenerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	addresses := make([]string, 0, len(r.Addresses))
	for _, addressesItem := range r.Addresses {
		addresses = append(addresses, addressesItem.ValueString())
	}
	ports := make([]shared.EventGatewayListenerPort, 0, len(r.Ports))
	for _, portsItem := range r.Ports {
		if !portsItem.Str.IsUnknown() && !portsItem.Str.IsNull() {
			var str string
			str = portsItem.Str.ValueString()

			ports = append(ports, shared.EventGatewayListenerPort{
				Str: &str,
			})
		}
		if !portsItem.Integer.IsUnknown() && !portsItem.Integer.IsNull() {
			var integer int64
			integer = portsItem.Integer.ValueInt64()

			ports = append(ports, shared.EventGatewayListenerPort{
				Integer: &integer,
			})
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdateEventGatewayListenerRequest{
		Name:        name,
		Description: description,
		Addresses:   addresses,
		Ports:       ports,
		Labels:      labels,
	}

	return &out, diags
}
