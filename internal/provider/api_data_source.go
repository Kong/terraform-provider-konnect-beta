// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &APIDataSource{}
var _ datasource.DataSourceWithConfigure = &APIDataSource{}

func NewAPIDataSource() datasource.DataSource {
	return &APIDataSource{}
}

// APIDataSource is the data source implementation.
type APIDataSource struct {
	client *sdk.KonnectBeta
}

// APIDataSourceModel describes the data model.
type APIDataSourceModel struct {
	APISpecIds  []types.String          `tfsdk:"api_spec_ids"`
	CreatedAt   types.String            `tfsdk:"created_at"`
	Description types.String            `tfsdk:"description"`
	ID          types.String            `tfsdk:"id"`
	Labels      map[string]types.String `tfsdk:"labels"`
	Name        types.String            `tfsdk:"name"`
	Portals     []tfTypes.Portals       `tfsdk:"portals"`
	Slug        types.String            `tfsdk:"slug"`
	UpdatedAt   types.String            `tfsdk:"updated_at"`
	Version     types.String            `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (r *APIDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_api"
}

// Schema defines the schema for the data source.
func (r *APIDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "API DataSource",

		Attributes: map[string]schema.Attribute{
			"api_spec_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The list of API specification ids for the API.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `A description of your API. Will be visible on your live Portal.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The API identifier.`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of your API. The ` + "`" + `name + version` + "`" + ` combination must be unique for each API you publish.`,
			},
			"portals": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `The display name of the portal. This value will be the portal's ` + "`" + `name` + "`" + ` in Portal API.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The portal identifier.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the portal, used to distinguish it from other portals.`,
						},
					},
				},
				Description: `The list of portals which this API is published to.`,
			},
			"slug": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `The ` + "`" + `slug` + "`" + ` is used in generated URLs to provide human readable paths.` + "\n" +
					`` + "\n" +
					`Defaults to ` + "`" + `slugify(name + version)` + "`" + ``,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
			"version": schema.StringAttribute{
				Computed:    true,
				Description: `An optional version for your API. Leave this empty if your API is unversioned.`,
			},
		},
	}
}

func (r *APIDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *APIDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *APIDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsFetchAPIRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.API.FetchAPI(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIResponseSchema != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAPIResponseSchema(ctx, res.APIResponseSchema)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
