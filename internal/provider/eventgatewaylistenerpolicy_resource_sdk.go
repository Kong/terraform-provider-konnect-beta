// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayListenerPolicyResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayListenerPolicyResourceModel) ToOperationsCreateEventGatewayListenerPolicyRequest(ctx context.Context) (*operations.CreateEventGatewayListenerPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	eventGatewayListenerPolicyModify, eventGatewayListenerPolicyModifyDiags := r.ToSharedEventGatewayListenerPolicyModify(ctx)
	diags.Append(eventGatewayListenerPolicyModifyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayListenerPolicyRequest{
		GatewayID:                        gatewayID,
		EventGatewayListenerID:           eventGatewayListenerID,
		EventGatewayListenerPolicyModify: *eventGatewayListenerPolicyModify,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyResourceModel) ToOperationsDeleteEventGatewayListenerPolicyRequest(ctx context.Context) (*operations.DeleteEventGatewayListenerPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayListenerPolicyRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyResourceModel) ToOperationsGetEventGatewayListenerPolicyRequest(ctx context.Context) (*operations.GetEventGatewayListenerPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayListenerPolicyRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyResourceModel) ToOperationsUpdateEventGatewayListenerPolicyRequest(ctx context.Context) (*operations.UpdateEventGatewayListenerPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayListenerPolicyModify, eventGatewayListenerPolicyModifyDiags := r.ToSharedEventGatewayListenerPolicyModify(ctx)
	diags.Append(eventGatewayListenerPolicyModifyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayListenerPolicyRequest{
		GatewayID:                        gatewayID,
		EventGatewayListenerID:           eventGatewayListenerID,
		PolicyID:                         policyID,
		EventGatewayListenerPolicyModify: *eventGatewayListenerPolicyModify,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyResourceModel) ToSharedEventGatewayListenerPolicyModify(ctx context.Context) (*shared.EventGatewayListenerPolicyModify, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayListenerPolicyModify
	var eventGatewayTLSListenerPolicy *shared.EventGatewayTLSListenerPolicy
	if r.TLSServer != nil {
		typeVar := shared.EventGatewayTLSListenerPolicyType(r.TLSServer.Type.ValueString())
		name := new(string)
		if !r.TLSServer.Name.IsUnknown() && !r.TLSServer.Name.IsNull() {
			*name = r.TLSServer.Name.ValueString()
		} else {
			name = nil
		}
		description := new(string)
		if !r.TLSServer.Description.IsUnknown() && !r.TLSServer.Description.IsNull() {
			*description = r.TLSServer.Description.ValueString()
		} else {
			description = nil
		}
		enabled := new(bool)
		if !r.TLSServer.Enabled.IsUnknown() && !r.TLSServer.Enabled.IsNull() {
			*enabled = r.TLSServer.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		condition := new(string)
		if !r.TLSServer.Condition.IsUnknown() && !r.TLSServer.Condition.IsNull() {
			*condition = r.TLSServer.Condition.ValueString()
		} else {
			condition = nil
		}
		var config *shared.EventGatewayTLSListenerPolicyConfig
		if r.TLSServer.Config != nil {
			certificates := make([]shared.TLSCertificate, 0, len(r.TLSServer.Config.Certificates))
			for _, certificatesItem := range r.TLSServer.Config.Certificates {
				var certificate string
				certificate = certificatesItem.Certificate.ValueString()

				var key string
				key = certificatesItem.Key.ValueString()

				certificates = append(certificates, shared.TLSCertificate{
					Certificate: certificate,
					Key:         key,
				})
			}
			var versions *shared.TLSVersionRange
			if r.TLSServer.Config.Versions != nil {
				min := new(shared.Min)
				if !r.TLSServer.Config.Versions.Min.IsUnknown() && !r.TLSServer.Config.Versions.Min.IsNull() {
					*min = shared.Min(r.TLSServer.Config.Versions.Min.ValueString())
				} else {
					min = nil
				}
				max := new(shared.Max)
				if !r.TLSServer.Config.Versions.Max.IsUnknown() && !r.TLSServer.Config.Versions.Max.IsNull() {
					*max = shared.Max(r.TLSServer.Config.Versions.Max.ValueString())
				} else {
					max = nil
				}
				versions = &shared.TLSVersionRange{
					Min: min,
					Max: max,
				}
			}
			allowPlaintext := new(bool)
			if !r.TLSServer.Config.AllowPlaintext.IsUnknown() && !r.TLSServer.Config.AllowPlaintext.IsNull() {
				*allowPlaintext = r.TLSServer.Config.AllowPlaintext.ValueBool()
			} else {
				allowPlaintext = nil
			}
			config = &shared.EventGatewayTLSListenerPolicyConfig{
				Certificates:   certificates,
				Versions:       versions,
				AllowPlaintext: allowPlaintext,
			}
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.TLSServer.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		eventGatewayTLSListenerPolicy = &shared.EventGatewayTLSListenerPolicy{
			Type:        typeVar,
			Name:        name,
			Description: description,
			Enabled:     enabled,
			Condition:   condition,
			Config:      config,
			Labels:      labels,
		}
	}
	if eventGatewayTLSListenerPolicy != nil {
		out = shared.EventGatewayListenerPolicyModify{
			EventGatewayTLSListenerPolicy: eventGatewayTLSListenerPolicy,
		}
	}
	var forwardToVirtualClusterPolicy *shared.ForwardToVirtualClusterPolicy
	if r.ForwardToVirtualCluster != nil {
		typeVar1 := shared.ForwardToVirtualClusterPolicyType(r.ForwardToVirtualCluster.Type.ValueString())
		name1 := new(string)
		if !r.ForwardToVirtualCluster.Name.IsUnknown() && !r.ForwardToVirtualCluster.Name.IsNull() {
			*name1 = r.ForwardToVirtualCluster.Name.ValueString()
		} else {
			name1 = nil
		}
		description1 := new(string)
		if !r.ForwardToVirtualCluster.Description.IsUnknown() && !r.ForwardToVirtualCluster.Description.IsNull() {
			*description1 = r.ForwardToVirtualCluster.Description.ValueString()
		} else {
			description1 = nil
		}
		enabled1 := new(bool)
		if !r.ForwardToVirtualCluster.Enabled.IsUnknown() && !r.ForwardToVirtualCluster.Enabled.IsNull() {
			*enabled1 = r.ForwardToVirtualCluster.Enabled.ValueBool()
		} else {
			enabled1 = nil
		}
		condition1 := new(string)
		if !r.ForwardToVirtualCluster.Condition.IsUnknown() && !r.ForwardToVirtualCluster.Condition.IsNull() {
			*condition1 = r.ForwardToVirtualCluster.Condition.ValueString()
		} else {
			condition1 = nil
		}
		var config1 shared.ForwardToVirtualClusterPolicyConfig
		var forwardToClusterBySNIConfig *shared.ForwardToClusterBySNIConfig
		if r.ForwardToVirtualCluster.Config.Sni != nil {
			typeVar2 := shared.ForwardToClusterBySNIConfigType(r.ForwardToVirtualCluster.Config.Sni.Type.ValueString())
			sniSuffix := new(string)
			if !r.ForwardToVirtualCluster.Config.Sni.SniSuffix.IsUnknown() && !r.ForwardToVirtualCluster.Config.Sni.SniSuffix.IsNull() {
				*sniSuffix = r.ForwardToVirtualCluster.Config.Sni.SniSuffix.ValueString()
			} else {
				sniSuffix = nil
			}
			advertisedPort := new(int64)
			if !r.ForwardToVirtualCluster.Config.Sni.AdvertisedPort.IsUnknown() && !r.ForwardToVirtualCluster.Config.Sni.AdvertisedPort.IsNull() {
				*advertisedPort = r.ForwardToVirtualCluster.Config.Sni.AdvertisedPort.ValueInt64()
			} else {
				advertisedPort = nil
			}
			forwardToClusterBySNIConfig = &shared.ForwardToClusterBySNIConfig{
				Type:           typeVar2,
				SniSuffix:      sniSuffix,
				AdvertisedPort: advertisedPort,
			}
		}
		if forwardToClusterBySNIConfig != nil {
			config1 = shared.ForwardToVirtualClusterPolicyConfig{
				ForwardToClusterBySNIConfig: forwardToClusterBySNIConfig,
			}
		}
		var forwardToClusterByPortMappingConfig *shared.ForwardToClusterByPortMappingConfig
		if r.ForwardToVirtualCluster.Config.PortMapping != nil {
			typeVar3 := shared.ForwardToClusterByPortMappingConfigType(r.ForwardToVirtualCluster.Config.PortMapping.Type.ValueString())
			var destination shared.VirtualClusterReference
			var virtualClusterReferenceByID *shared.VirtualClusterReferenceByID
			if r.ForwardToVirtualCluster.Config.PortMapping.Destination.VirtualClusterReferenceByID != nil {
				var id string
				id = r.ForwardToVirtualCluster.Config.PortMapping.Destination.VirtualClusterReferenceByID.ID.ValueString()

				virtualClusterReferenceByID = &shared.VirtualClusterReferenceByID{
					ID: id,
				}
			}
			if virtualClusterReferenceByID != nil {
				destination = shared.VirtualClusterReference{
					VirtualClusterReferenceByID: virtualClusterReferenceByID,
				}
			}
			var virtualClusterReferenceByName *shared.VirtualClusterReferenceByName
			if r.ForwardToVirtualCluster.Config.PortMapping.Destination.VirtualClusterReferenceByName != nil {
				var name2 string
				name2 = r.ForwardToVirtualCluster.Config.PortMapping.Destination.VirtualClusterReferenceByName.Name.ValueString()

				virtualClusterReferenceByName = &shared.VirtualClusterReferenceByName{
					Name: name2,
				}
			}
			if virtualClusterReferenceByName != nil {
				destination = shared.VirtualClusterReference{
					VirtualClusterReferenceByName: virtualClusterReferenceByName,
				}
			}
			var advertisedHost string
			advertisedHost = r.ForwardToVirtualCluster.Config.PortMapping.AdvertisedHost.ValueString()

			bootstrapPort := new(shared.BootstrapPort)
			if !r.ForwardToVirtualCluster.Config.PortMapping.BootstrapPort.IsUnknown() && !r.ForwardToVirtualCluster.Config.PortMapping.BootstrapPort.IsNull() {
				*bootstrapPort = shared.BootstrapPort(r.ForwardToVirtualCluster.Config.PortMapping.BootstrapPort.ValueString())
			} else {
				bootstrapPort = nil
			}
			minBrokerID := new(int64)
			if !r.ForwardToVirtualCluster.Config.PortMapping.MinBrokerID.IsUnknown() && !r.ForwardToVirtualCluster.Config.PortMapping.MinBrokerID.IsNull() {
				*minBrokerID = r.ForwardToVirtualCluster.Config.PortMapping.MinBrokerID.ValueInt64()
			} else {
				minBrokerID = nil
			}
			forwardToClusterByPortMappingConfig = &shared.ForwardToClusterByPortMappingConfig{
				Type:           typeVar3,
				Destination:    destination,
				AdvertisedHost: advertisedHost,
				BootstrapPort:  bootstrapPort,
				MinBrokerID:    minBrokerID,
			}
		}
		if forwardToClusterByPortMappingConfig != nil {
			config1 = shared.ForwardToVirtualClusterPolicyConfig{
				ForwardToClusterByPortMappingConfig: forwardToClusterByPortMappingConfig,
			}
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.ForwardToVirtualCluster.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		forwardToVirtualClusterPolicy = &shared.ForwardToVirtualClusterPolicy{
			Type:        typeVar1,
			Name:        name1,
			Description: description1,
			Enabled:     enabled1,
			Condition:   condition1,
			Config:      config1,
			Labels:      labels1,
		}
	}
	if forwardToVirtualClusterPolicy != nil {
		out = shared.EventGatewayListenerPolicyModify{
			ForwardToVirtualClusterPolicy: forwardToVirtualClusterPolicy,
		}
	}

	return &out, diags
}
