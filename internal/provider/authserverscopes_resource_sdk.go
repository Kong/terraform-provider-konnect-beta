// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerScopesResourceModel) ToSharedCreateScope(ctx context.Context) (*shared.CreateScope, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	defaultVar := new(bool)
	if !r.Default.IsUnknown() && !r.Default.IsNull() {
		*defaultVar = r.Default.ValueBool()
	} else {
		defaultVar = nil
	}
	includeInMetadata := new(bool)
	if !r.IncludeInMetadata.IsUnknown() && !r.IncludeInMetadata.IsNull() {
		*includeInMetadata = r.IncludeInMetadata.ValueBool()
	} else {
		includeInMetadata = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	out := shared.CreateScope{
		Name:              name,
		Description:       description,
		Default:           defaultVar,
		IncludeInMetadata: includeInMetadata,
		Enabled:           enabled,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) ToOperationsCreateAuthServerScopeRequest(ctx context.Context) (*operations.CreateAuthServerScopeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	createScope, createScopeDiags := r.ToSharedCreateScope(ctx)
	diags.Append(createScopeDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAuthServerScopeRequest{
		AuthServerID: authServerID,
		CreateScope:  *createScope,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) ToSharedUpdateScope(ctx context.Context) (*shared.UpdateScope, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	defaultVar := new(bool)
	if !r.Default.IsUnknown() && !r.Default.IsNull() {
		*defaultVar = r.Default.ValueBool()
	} else {
		defaultVar = nil
	}
	includeInMetadata := new(bool)
	if !r.IncludeInMetadata.IsUnknown() && !r.IncludeInMetadata.IsNull() {
		*includeInMetadata = r.IncludeInMetadata.ValueBool()
	} else {
		includeInMetadata = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	out := shared.UpdateScope{
		Name:              name,
		Description:       description,
		Default:           defaultVar,
		IncludeInMetadata: includeInMetadata,
		Enabled:           enabled,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) ToOperationsUpdateAuthServerScopeRequest(ctx context.Context) (*operations.UpdateAuthServerScopeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var scopeID string
	scopeID = r.ID.ValueString()

	updateScope, updateScopeDiags := r.ToSharedUpdateScope(ctx)
	diags.Append(updateScopeDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAuthServerScopeRequest{
		AuthServerID: authServerID,
		ScopeID:      scopeID,
		UpdateScope:  *updateScope,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) ToOperationsGetAuthServerScopeRequest(ctx context.Context) (*operations.GetAuthServerScopeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var scopeID string
	scopeID = r.ID.ValueString()

	out := operations.GetAuthServerScopeRequest{
		AuthServerID: authServerID,
		ScopeID:      scopeID,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) ToOperationsDeleteAuthServerScopeRequest(ctx context.Context) (*operations.DeleteAuthServerScopeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var scopeID string
	scopeID = r.ID.ValueString()

	out := operations.DeleteAuthServerScopeRequest{
		AuthServerID: authServerID,
		ScopeID:      scopeID,
	}

	return &out, diags
}

func (r *AuthServerScopesResourceModel) RefreshFromSharedScope(ctx context.Context, resp *shared.Scope) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Default = types.BoolPointerValue(resp.Default)
		r.Description = types.StringValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		r.IncludeInMetadata = types.BoolPointerValue(resp.IncludeInMetadata)
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
