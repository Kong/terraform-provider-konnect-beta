// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect-beta/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
	"github.com/kong/terraform-provider-konnect-beta/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &EventGatewayVirtualClusterConsumePolicyResource{}
var _ resource.ResourceWithImportState = &EventGatewayVirtualClusterConsumePolicyResource{}

func NewEventGatewayVirtualClusterConsumePolicyResource() resource.Resource {
	return &EventGatewayVirtualClusterConsumePolicyResource{}
}

// EventGatewayVirtualClusterConsumePolicyResource defines the resource implementation.
type EventGatewayVirtualClusterConsumePolicyResource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// EventGatewayVirtualClusterConsumePolicyResourceModel describes the resource data model.
type EventGatewayVirtualClusterConsumePolicyResourceModel struct {
	Condition        types.String                                       `tfsdk:"condition"`
	Config           tfTypes.BackendClusterAuthenticationAnonymous      `tfsdk:"config"`
	CreatedAt        types.String                                       `tfsdk:"created_at"`
	Decrypt          *tfTypes.EventGatewayDecryptPolicy                 `queryParam:"inline" tfsdk:"decrypt" tfPlanOnly:"true"`
	Description      types.String                                       `tfsdk:"description"`
	Enabled          types.Bool                                         `tfsdk:"enabled"`
	GatewayID        types.String                                       `tfsdk:"gateway_id"`
	ID               types.String                                       `tfsdk:"id"`
	Labels           map[string]types.String                            `tfsdk:"labels"`
	ModifyHeaders    *tfTypes.EventGatewayModifyHeadersPolicy           `queryParam:"inline" tfsdk:"modify_headers" tfPlanOnly:"true"`
	Name             types.String                                       `tfsdk:"name"`
	ParentPolicyID   types.String                                       `queryParam:"style=form,explode=true,name=parent_policy_id" tfsdk:"parent_policy_id"`
	SchemaValidation *tfTypes.EventGatewayConsumeSchemaValidationPolicy `queryParam:"inline" tfsdk:"schema_validation" tfPlanOnly:"true"`
	SkipRecord       *tfTypes.EventGatewaySkipRecordPolicy              `queryParam:"inline" tfsdk:"skip_record" tfPlanOnly:"true"`
	Type             types.String                                       `tfsdk:"type"`
	UpdatedAt        types.String                                       `tfsdk:"updated_at"`
	VirtualClusterID types.String                                       `tfsdk:"virtual_cluster_id"`
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "konnect_event_gateway_virtual_cluster_consume_policy"
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "EventGatewayVirtualClusterConsumePolicy Resource",
		Attributes: map[string]schema.Attribute{
			"condition": schema.StringAttribute{
				Computed:    true,
				Description: `A string containing the boolean expression that determines whether the policy is applied.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 1000),
				},
			},
			"config": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `The configuration of the policy.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"decrypt": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"condition": schema.StringAttribute{
						Optional:    true,
						Description: `A string containing the boolean expression that determines whether the policy is applied.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 1000),
						},
					},
					"config": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"decrypt": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"part_of_record": schema.StringAttribute{
											Required: true,
											MarkdownDescription: `* key - decrypt the record key` + "\n" +
												`* value - decrypt the record value` + "\n" +
												`must be one of ["key", "value"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"key",
													"value",
												),
											},
										},
									},
								},
								Description: `Describes what parts of a record to decrypt.`,
								Validators: []validator.List{
									listvalidator.SizeAtLeast(1),
								},
							},
							"failure_mode": schema.StringAttribute{
								Required: true,
								MarkdownDescription: `Describes how to handle failing encryption or decryption.` + "\n" +
									`Use ` + "`" + `error` + "`" + ` if the record should be rejected if encryption or decryption fails.` + "\n" +
									`Use ` + "`" + `passthrough` + "`" + ` to ignore encryption or decryption failure and continue proxying the record.` + "\n" +
									`must be one of ["error", "passthrough"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"error",
										"passthrough",
									),
								},
							},
							"key_sources": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"aws": schema.SingleNestedAttribute{
											Optional: true,
											MarkdownDescription: `A key source that uses an AWS KMS to find a symmetric key. Load KMS credentials from the environment.` + "\n" +
												`` + "\n" +
												`See [aws docs](https://docs.aws.amazon.com/sdk-for-rust/latest/dg/credproviders.html#credproviders-default-credentials-provider-chain)` + "\n" +
												`for more information about how credential retrieval.`,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("static"),
												}...),
											},
										},
										"static": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"keys": schema.ListNestedAttribute{
													Required: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Required:    true,
																Description: `The unique identifier of the key.`,
															},
															"key": schema.StringAttribute{
																Required: true,
																MarkdownDescription: `A sensitive value containing the secret or a reference to a secret as a template string expression.` + "\n" +
																	`If the value is provided as plain text, it is encrypted at rest and omitted from API responses.` + "\n" +
																	`If provided as an expression, the expression itself is stored and returned by the API.`,
															},
														},
													},
													Description: `A list of static, user-provided keys. Each one must be 128 bits long.`,
													Validators: []validator.List{
														listvalidator.SizeAtLeast(1),
													},
												},
											},
											Description: `A key source that uses a static symmetric key. The key is provided as a base64-encoded string.`,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("aws"),
												}...),
											},
										},
									},
								},
								Description: `Describes how to find a symmetric key for decryption.`,
								Validators: []validator.List{
									listvalidator.SizeAtLeast(1),
								},
							},
						},
						Description: `The configuration of the decrypt policy.`,
					},
					"description": schema.StringAttribute{
						Optional:    true,
						Description: `A human-readable description of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(512),
						},
					},
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Whether the policy is enabled. Default: true`,
					},
					"labels": schema.MapAttribute{
						Optional:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Optional:    true,
						Description: `A unique user-defined name of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 255),
						},
					},
				},
				Description: `Decrypts portions of Kafka records using AES_128_GCM. Keys are therefore 128 bits long.`,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("schema_validation"),
						path.MatchRelative().AtParent().AtName("modify_headers"),
						path.MatchRelative().AtParent().AtName("skip_record"),
					}...),
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `A human-readable description of the policy.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(512),
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the policy is enabled. Default: true`,
			},
			"gateway_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your Gateway.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique identifier of the policy.`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"modify_headers": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"condition": schema.StringAttribute{
						Optional: true,
						MarkdownDescription: `A string containing the boolean expression that determines whether the policy is applied.` + "\n" +
							`` + "\n" +
							`When the policy is applied as a child policy of schema_validation, the expression can also reference` + "\n" +
							`` + "`" + `record.value` + "`" + ` fields.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 1000),
						},
					},
					"config": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"actions": schema.ListNestedAttribute{
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"remove": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"key": schema.StringAttribute{
													Required:    true,
													Description: `The key of the header to remove.`,
												},
											},
											Description: `An action that removes a header by key.`,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("set"),
												}...),
											},
										},
										"set": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"key": schema.StringAttribute{
													Required:    true,
													Description: `The key of the header to set.`,
												},
												"value": schema.StringAttribute{
													Required:    true,
													Description: `The value of the header to set.`,
												},
											},
											Description: `An action that sets a header key and value.`,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("remove"),
												}...),
											},
										},
									},
								},
								Description: `Actions are run in sequential order and act on individual headers.`,
								Validators: []validator.List{
									listvalidator.SizeAtLeast(1),
								},
							},
						},
						Description: `The configuration of the modify headers policy.`,
					},
					"description": schema.StringAttribute{
						Optional:    true,
						Description: `A human-readable description of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(512),
						},
					},
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Whether the policy is enabled. Default: true`,
					},
					"labels": schema.MapAttribute{
						Optional:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Optional:    true,
						Description: `A unique user-defined name of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 255),
						},
					},
				},
				Description: `A policy that modifies headers for requests.`,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("schema_validation"),
						path.MatchRelative().AtParent().AtName("decrypt"),
						path.MatchRelative().AtParent().AtName("skip_record"),
					}...),
				},
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `A unique user-defined name of the policy.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 255),
				},
			},
			"parent_policy_id": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `When specified, it sets the ID of the parent policy. Requires replacement if changed.`,
			},
			"schema_validation": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"condition": schema.StringAttribute{
						Optional:    true,
						Description: `A string containing the boolean expression that determines whether the policy is applied.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 1000),
						},
					},
					"config": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"key_validation_action": types.StringType,
							"schema_registry": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`schema_registry_reference_by_id`: types.ObjectType{
										AttrTypes: map[string]attr.Type{
											`id`: types.StringType,
										},
									},
									`schema_registry_reference_by_name`: types.ObjectType{
										AttrTypes: map[string]attr.Type{
											`name`: types.StringType,
										},
									},
								},
							},
							"type":                    types.StringType,
							"value_validation_action": types.StringType,
						})),
						Attributes: map[string]schema.Attribute{
							"key_validation_action": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Defines a behavior when record key is not valid.` + "\n" +
									`* mark - marks a record with kong/server header and client ID value` + "\n" +
									`  to help to identify the clients violating schema.` + "\n" +
									`* skip - skips delivering a record.` + "\n" +
									`must be one of ["mark", "skip"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"mark",
										"skip",
									),
								},
							},
							"schema_registry": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"schema_registry_reference_by_id": schema.SingleNestedAttribute{
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Required:    true,
												Description: `The unique identifier of the schema registry.`,
											},
										},
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("schema_registry_reference_by_name"),
											}...),
										},
									},
									"schema_registry_reference_by_name": schema.SingleNestedAttribute{
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"name": schema.StringAttribute{
												Required:    true,
												Description: `The unique name of the schema registry.`,
												Validators: []validator.String{
													stringvalidator.UTF8LengthBetween(1, 255),
												},
											},
										},
										Description: `Reference a schema registry by its unique name.`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("schema_registry_reference_by_id"),
											}...),
										},
									},
								},
								Description: `A reference to a schema Registry.`,
							},
							"type": schema.StringAttribute{
								Required: true,
								MarkdownDescription: `How to validate the schema and parse the record.` + "\n" +
									`* confluent_schema_registry - validates against confluent schema registry.` + "\n" +
									`* json - simple JSON parsing without the schema.` + "\n" +
									`must be one of ["confluent_schema_registry", "json"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"confluent_schema_registry",
										"json",
									),
								},
							},
							"value_validation_action": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Defines a behavior when record value is not valid.` + "\n" +
									`* mark - marks a record with kong/server header and client ID value` + "\n" +
									`  to help to identify the clients violating schema.` + "\n" +
									`* skip - skips delivering a record.` + "\n" +
									`must be one of ["mark", "skip"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"mark",
										"skip",
									),
								},
							},
						},
						Description: `The configuration of the schema validation policy.`,
					},
					"description": schema.StringAttribute{
						Optional:    true,
						Description: `A human-readable description of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(512),
						},
					},
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Whether the policy is enabled. Default: true`,
					},
					"labels": schema.MapAttribute{
						Optional:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Optional:    true,
						Description: `A unique user-defined name of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 255),
						},
					},
				},
				Description: `A policy that validates consume messages against a schema registry.`,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("decrypt"),
						path.MatchRelative().AtParent().AtName("modify_headers"),
						path.MatchRelative().AtParent().AtName("skip_record"),
					}...),
				},
			},
			"skip_record": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"condition": schema.StringAttribute{
						Optional: true,
						MarkdownDescription: `A string containing the boolean expression that determines whether the policy is applied.` + "\n" +
							`` + "\n" +
							`When the policy is applied as a child policy of schema_validation, the expression can also reference` + "\n" +
							`` + "`" + `record.value` + "`" + ` fields.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 1000),
						},
					},
					"description": schema.StringAttribute{
						Optional:    true,
						Description: `A human-readable description of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(512),
						},
					},
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Whether the policy is enabled. Default: true`,
					},
					"labels": schema.MapAttribute{
						Optional:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Optional:    true,
						Description: `A unique user-defined name of the policy.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 255),
						},
					},
				},
				Description: `A policy that skips processing of a record.`,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("schema_validation"),
						path.MatchRelative().AtParent().AtName("decrypt"),
						path.MatchRelative().AtParent().AtName("modify_headers"),
					}...),
				},
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `The type name of the policy.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 255),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity update date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"virtual_cluster_id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the Virtual Cluster.`,
			},
		},
	}
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *EventGatewayVirtualClusterConsumePolicyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateEventGatewayVirtualClusterConsumePolicyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusterConsumePolicies.CreateEventGatewayVirtualClusterConsumePolicy(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *EventGatewayVirtualClusterConsumePolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetEventGatewayVirtualClusterConsumePolicyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusterConsumePolicies.GetEventGatewayVirtualClusterConsumePolicy(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *EventGatewayVirtualClusterConsumePolicyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateEventGatewayVirtualClusterConsumePolicyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusterConsumePolicies.UpdateEventGatewayVirtualClusterConsumePolicy(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterConsumePolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *EventGatewayVirtualClusterConsumePolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteEventGatewayVirtualClusterConsumePolicyRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusterConsumePolicies.DeleteEventGatewayVirtualClusterConsumePolicy(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *EventGatewayVirtualClusterConsumePolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		GatewayID        string `json:"gateway_id"`
		ID               string `json:"id"`
		VirtualClusterID string `json:"virtual_cluster_id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"gateway_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "virtual_cluster_id": ""}': `+err.Error())
		return
	}

	if len(data.GatewayID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field gateway_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("gateway_id"), data.GatewayID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
	if len(data.VirtualClusterID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field virtual_cluster_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("virtual_cluster_id"), data.VirtualClusterID)...)
}
