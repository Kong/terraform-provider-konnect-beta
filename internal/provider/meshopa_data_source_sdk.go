// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshOPADataSourceModel) ToOperationsGetMeshOPARequest(ctx context.Context) (*operations.GetMeshOPARequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshOPARequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshOPADataSourceModel) RefreshFromSharedMeshOPAItem(ctx context.Context, resp *shared.MeshOPAItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.MeshOPAItemDefault{}
			if resp.Spec.Default.AgentConfig == nil {
				r.Spec.Default.AgentConfig = nil
			} else {
				r.Spec.Default.AgentConfig = &tfTypes.CaCert{}
				r.Spec.Default.AgentConfig.Inline = types.StringPointerValue(resp.Spec.Default.AgentConfig.Inline)
				r.Spec.Default.AgentConfig.InlineString = types.StringPointerValue(resp.Spec.Default.AgentConfig.InlineString)
				r.Spec.Default.AgentConfig.Secret = types.StringPointerValue(resp.Spec.Default.AgentConfig.Secret)
			}
			r.Spec.Default.AppendPolicies = []tfTypes.AppendPolicies{}
			if len(r.Spec.Default.AppendPolicies) > len(resp.Spec.Default.AppendPolicies) {
				r.Spec.Default.AppendPolicies = r.Spec.Default.AppendPolicies[:len(resp.Spec.Default.AppendPolicies)]
			}
			for appendPoliciesCount, appendPoliciesItem := range resp.Spec.Default.AppendPolicies {
				var appendPolicies tfTypes.AppendPolicies
				appendPolicies.IgnoreDecision = types.BoolPointerValue(appendPoliciesItem.IgnoreDecision)
				appendPolicies.Rego.Inline = types.StringPointerValue(appendPoliciesItem.Rego.Inline)
				appendPolicies.Rego.InlineString = types.StringPointerValue(appendPoliciesItem.Rego.InlineString)
				appendPolicies.Rego.Secret = types.StringPointerValue(appendPoliciesItem.Rego.Secret)
				if appendPoliciesCount+1 > len(r.Spec.Default.AppendPolicies) {
					r.Spec.Default.AppendPolicies = append(r.Spec.Default.AppendPolicies, appendPolicies)
				} else {
					r.Spec.Default.AppendPolicies[appendPoliciesCount].IgnoreDecision = appendPolicies.IgnoreDecision
					r.Spec.Default.AppendPolicies[appendPoliciesCount].Rego = appendPolicies.Rego
				}
			}
			if resp.Spec.Default.AuthConfig == nil {
				r.Spec.Default.AuthConfig = nil
			} else {
				r.Spec.Default.AuthConfig = &tfTypes.AuthConfig{}
				if resp.Spec.Default.AuthConfig.OnAgentFailure != nil {
					r.Spec.Default.AuthConfig.OnAgentFailure = types.StringValue(string(*resp.Spec.Default.AuthConfig.OnAgentFailure))
				} else {
					r.Spec.Default.AuthConfig.OnAgentFailure = types.StringNull()
				}
				if resp.Spec.Default.AuthConfig.RequestBody == nil {
					r.Spec.Default.AuthConfig.RequestBody = nil
				} else {
					r.Spec.Default.AuthConfig.RequestBody = &tfTypes.RequestBody{}
					r.Spec.Default.AuthConfig.RequestBody.MaxSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Spec.Default.AuthConfig.RequestBody.MaxSize))
					r.Spec.Default.AuthConfig.RequestBody.SendRawBody = types.BoolPointerValue(resp.Spec.Default.AuthConfig.RequestBody.SendRawBody)
				}
				r.Spec.Default.AuthConfig.StatusOnError = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Spec.Default.AuthConfig.StatusOnError))
				r.Spec.Default.AuthConfig.Timeout = types.StringPointerValue(resp.Spec.Default.AuthConfig.Timeout)
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key, value := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key1, value1 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}
