// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerClaimsListDataSourceModel) ToOperationsListAuthServerClaimsRequest(ctx context.Context) (*operations.ListAuthServerClaimsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	out := operations.ListAuthServerClaimsRequest{
		AuthServerID: authServerID,
	}

	return &out, diags
}

func (r *AuthServerClaimsListDataSourceModel) RefreshFromSharedClaimList(ctx context.Context, resp *shared.ClaimList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.Claim{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data tfTypes.Claim
			data.CreatedAt = types.StringValue(typeconvert.TimeToString(dataItem.CreatedAt))
			data.Enabled = types.BoolPointerValue(dataItem.Enabled)
			data.ID = types.StringValue(dataItem.ID)
			data.IncludeInAllScopes = types.BoolPointerValue(dataItem.IncludeInAllScopes)
			data.IncludeInScopes = make([]types.String, 0, len(dataItem.IncludeInScopes))
			for _, v := range dataItem.IncludeInScopes {
				data.IncludeInScopes = append(data.IncludeInScopes, types.StringValue(v))
			}
			data.IncludeInToken = types.BoolPointerValue(dataItem.IncludeInToken)
			data.Name = types.StringValue(dataItem.Name)
			data.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataItem.UpdatedAt))
			data.Value = types.StringValue(dataItem.Value)
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data)
			} else {
				r.Data[dataCount].CreatedAt = data.CreatedAt
				r.Data[dataCount].Enabled = data.Enabled
				r.Data[dataCount].ID = data.ID
				r.Data[dataCount].IncludeInAllScopes = data.IncludeInAllScopes
				r.Data[dataCount].IncludeInScopes = data.IncludeInScopes
				r.Data[dataCount].IncludeInToken = data.IncludeInToken
				r.Data[dataCount].Name = data.Name
				r.Data[dataCount].UpdatedAt = data.UpdatedAt
				r.Data[dataCount].Value = data.Value
			}
		}
		r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
		r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
		r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
	}

	return diags
}
