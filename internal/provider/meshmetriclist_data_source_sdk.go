// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshMetricListDataSourceModel) RefreshFromSharedMeshMetricList(ctx context.Context, resp *shared.MeshMetricList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshMetricItem{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.MeshMetricItem

			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.Default == nil {
				items.Spec.Default = nil
			} else {
				items.Spec.Default = &tfTypes.Default{}
				items.Spec.Default.Applications = []tfTypes.Applications{}

				for _, applicationsItem := range itemsItem.Spec.Default.Applications {
					var applications tfTypes.Applications

					applications.Address = types.StringPointerValue(applicationsItem.Address)
					applications.Name = types.StringPointerValue(applicationsItem.Name)
					applications.Path = types.StringPointerValue(applicationsItem.Path)
					applications.Port = types.Int32Value(int32(applicationsItem.Port))

					items.Spec.Default.Applications = append(items.Spec.Default.Applications, applications)
				}
				items.Spec.Default.Backends = []tfTypes.MeshMetricItemBackends{}

				for _, backendsItem := range itemsItem.Spec.Default.Backends {
					var backends tfTypes.MeshMetricItemBackends

					if backendsItem.OpenTelemetry == nil {
						backends.OpenTelemetry = nil
					} else {
						backends.OpenTelemetry = &tfTypes.OpenTelemetry{}
						backends.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
						backends.OpenTelemetry.RefreshInterval = types.StringPointerValue(backendsItem.OpenTelemetry.RefreshInterval)
					}
					if backendsItem.Prometheus == nil {
						backends.Prometheus = nil
					} else {
						backends.Prometheus = &tfTypes.Prometheus{}
						backends.Prometheus.ClientID = types.StringPointerValue(backendsItem.Prometheus.ClientID)
						backends.Prometheus.Path = types.StringPointerValue(backendsItem.Prometheus.Path)
						backends.Prometheus.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(backendsItem.Prometheus.Port))
						if backendsItem.Prometheus.TLS == nil {
							backends.Prometheus.TLS = nil
						} else {
							backends.Prometheus.TLS = &tfTypes.MeshMetricItemTLS{}
							if backendsItem.Prometheus.TLS.Mode != nil {
								backends.Prometheus.TLS.Mode = types.StringValue(string(*backendsItem.Prometheus.TLS.Mode))
							} else {
								backends.Prometheus.TLS.Mode = types.StringNull()
							}
						}
					}
					backends.Type = types.StringValue(string(backendsItem.Type))

					items.Spec.Default.Backends = append(items.Spec.Default.Backends, backends)
				}
				if itemsItem.Spec.Default.Sidecar == nil {
					items.Spec.Default.Sidecar = nil
				} else {
					items.Spec.Default.Sidecar = &tfTypes.Sidecar{}
					items.Spec.Default.Sidecar.IncludeUnused = types.BoolPointerValue(itemsItem.Spec.Default.Sidecar.IncludeUnused)
					if itemsItem.Spec.Default.Sidecar.Profiles == nil {
						items.Spec.Default.Sidecar.Profiles = nil
					} else {
						items.Spec.Default.Sidecar.Profiles = &tfTypes.Profiles{}
						items.Spec.Default.Sidecar.Profiles.AppendProfiles = []tfTypes.MeshLoadBalancingStrategyItemSpecHeader{}

						for _, appendProfilesItem := range itemsItem.Spec.Default.Sidecar.Profiles.AppendProfiles {
							var appendProfiles tfTypes.MeshLoadBalancingStrategyItemSpecHeader

							appendProfiles.Name = types.StringValue(string(appendProfilesItem.Name))

							items.Spec.Default.Sidecar.Profiles.AppendProfiles = append(items.Spec.Default.Sidecar.Profiles.AppendProfiles, appendProfiles)
						}
						items.Spec.Default.Sidecar.Profiles.Exclude = []tfTypes.Exclude{}

						for _, excludeItem := range itemsItem.Spec.Default.Sidecar.Profiles.Exclude {
							var exclude tfTypes.Exclude

							exclude.Match = types.StringValue(excludeItem.Match)
							exclude.Type = types.StringValue(string(excludeItem.Type))

							items.Spec.Default.Sidecar.Profiles.Exclude = append(items.Spec.Default.Sidecar.Profiles.Exclude, exclude)
						}
						items.Spec.Default.Sidecar.Profiles.Include = []tfTypes.Exclude{}

						for _, includeItem := range itemsItem.Spec.Default.Sidecar.Profiles.Include {
							var include tfTypes.Exclude

							include.Match = types.StringValue(includeItem.Match)
							include.Type = types.StringValue(string(includeItem.Type))

							items.Spec.Default.Sidecar.Profiles.Include = append(items.Spec.Default.Sidecar.Profiles.Include, include)
						}
					}
				}
			}
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key, value := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key] = types.StringValue(value)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key1, value1 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
					}
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))

			r.Items = append(r.Items, items)
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *MeshMetricListDataSourceModel) ToOperationsGetMeshMetricListRequest(ctx context.Context) (*operations.GetMeshMetricListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var filter *operations.GetMeshMetricListQueryParamFilter
	if r.Filter != nil {
		key := new(string)
		if !r.Filter.Key.IsUnknown() && !r.Filter.Key.IsNull() {
			*key = r.Filter.Key.ValueString()
		} else {
			key = nil
		}
		value := new(string)
		if !r.Filter.Value.IsUnknown() && !r.Filter.Value.IsNull() {
			*value = r.Filter.Value.ValueString()
		} else {
			value = nil
		}
		filter = &operations.GetMeshMetricListQueryParamFilter{
			Key:   key,
			Value: value,
		}
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshMetricListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Filter: filter,
		Mesh:   mesh,
	}

	return &out, diags
}
