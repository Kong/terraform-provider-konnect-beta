// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *ZoneIngressResourceModel) RefreshFromSharedZoneIngressCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.ZoneIngressCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *ZoneIngressResourceModel) RefreshFromSharedZoneIngressItem(ctx context.Context, resp *shared.ZoneIngressItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AvailableServices != nil {
			r.AvailableServices = []tfTypes.AvailableServices{}

			for _, availableServicesItem := range resp.AvailableServices {
				var availableServices tfTypes.AvailableServices

				availableServices.ExternalService = types.BoolPointerValue(availableServicesItem.ExternalService)
				availableServices.Instances = types.Int64PointerValue(availableServicesItem.Instances)
				availableServices.Mesh = types.StringPointerValue(availableServicesItem.Mesh)
				if len(availableServicesItem.Tags) > 0 {
					availableServices.Tags = make(map[string]types.String, len(availableServicesItem.Tags))
					for key, value := range availableServicesItem.Tags {
						availableServices.Tags[key] = types.StringValue(value)
					}
				}

				r.AvailableServices = append(r.AvailableServices, availableServices)
			}
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key1, value1 := range resp.Labels {
				r.Labels[key1] = types.StringValue(value1)
			}
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Networking == nil {
			r.Networking = nil
		} else {
			r.Networking = &tfTypes.ZoneIngressItemNetworking{}
			r.Networking.Address = types.StringPointerValue(resp.Networking.Address)
			if resp.Networking.Admin == nil {
				r.Networking.Admin = nil
			} else {
				r.Networking.Admin = &tfTypes.Admin{}
				r.Networking.Admin.Port = types.Int64PointerValue(resp.Networking.Admin.Port)
			}
			r.Networking.AdvertisedAddress = types.StringPointerValue(resp.Networking.AdvertisedAddress)
			r.Networking.AdvertisedPort = types.Int64PointerValue(resp.Networking.AdvertisedPort)
			r.Networking.Port = types.Int64PointerValue(resp.Networking.Port)
		}
		r.Type = types.StringValue(resp.Type)
		r.Zone = types.StringPointerValue(resp.Zone)
	}

	return diags
}

func (r *ZoneIngressResourceModel) ToOperationsDeleteZoneIngressRequest(ctx context.Context) (*operations.DeleteZoneIngressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteZoneIngressRequest{
		CpID: cpID,
		Name: name,
	}

	return &out, diags
}

func (r *ZoneIngressResourceModel) ToOperationsGetZoneIngressRequest(ctx context.Context) (*operations.GetZoneIngressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetZoneIngressRequest{
		CpID: cpID,
		Name: name,
	}

	return &out, diags
}

func (r *ZoneIngressResourceModel) ToOperationsPutZoneIngressRequest(ctx context.Context) (*operations.PutZoneIngressRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var name string
	name = r.Name.ValueString()

	zoneIngressItem, zoneIngressItemDiags := r.ToSharedZoneIngressItem(ctx)
	diags.Append(zoneIngressItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutZoneIngressRequest{
		CpID:            cpID,
		Name:            name,
		ZoneIngressItem: *zoneIngressItem,
	}

	return &out, diags
}

func (r *ZoneIngressResourceModel) ToSharedZoneIngressItem(ctx context.Context) (*shared.ZoneIngressItem, diag.Diagnostics) {
	var diags diag.Diagnostics

	var availableServices []shared.AvailableServices
	if r.AvailableServices != nil {
		availableServices = make([]shared.AvailableServices, 0, len(r.AvailableServices))
		for _, availableServicesItem := range r.AvailableServices {
			externalService := new(bool)
			if !availableServicesItem.ExternalService.IsUnknown() && !availableServicesItem.ExternalService.IsNull() {
				*externalService = availableServicesItem.ExternalService.ValueBool()
			} else {
				externalService = nil
			}
			instances := new(int64)
			if !availableServicesItem.Instances.IsUnknown() && !availableServicesItem.Instances.IsNull() {
				*instances = availableServicesItem.Instances.ValueInt64()
			} else {
				instances = nil
			}
			mesh := new(string)
			if !availableServicesItem.Mesh.IsUnknown() && !availableServicesItem.Mesh.IsNull() {
				*mesh = availableServicesItem.Mesh.ValueString()
			} else {
				mesh = nil
			}
			tags := make(map[string]string)
			for tagsKey, tagsValue := range availableServicesItem.Tags {
				var tagsInst string
				tagsInst = tagsValue.ValueString()

				tags[tagsKey] = tagsInst
			}
			availableServices = append(availableServices, shared.AvailableServices{
				ExternalService: externalService,
				Instances:       instances,
				Mesh:            mesh,
				Tags:            tags,
			})
		}
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var name string
	name = r.Name.ValueString()

	var networking *shared.ZoneIngressItemNetworking
	if r.Networking != nil {
		address := new(string)
		if !r.Networking.Address.IsUnknown() && !r.Networking.Address.IsNull() {
			*address = r.Networking.Address.ValueString()
		} else {
			address = nil
		}
		var admin *shared.ZoneIngressItemAdmin
		if r.Networking.Admin != nil {
			port := new(int64)
			if !r.Networking.Admin.Port.IsUnknown() && !r.Networking.Admin.Port.IsNull() {
				*port = r.Networking.Admin.Port.ValueInt64()
			} else {
				port = nil
			}
			admin = &shared.ZoneIngressItemAdmin{
				Port: port,
			}
		}
		advertisedAddress := new(string)
		if !r.Networking.AdvertisedAddress.IsUnknown() && !r.Networking.AdvertisedAddress.IsNull() {
			*advertisedAddress = r.Networking.AdvertisedAddress.ValueString()
		} else {
			advertisedAddress = nil
		}
		advertisedPort := new(int64)
		if !r.Networking.AdvertisedPort.IsUnknown() && !r.Networking.AdvertisedPort.IsNull() {
			*advertisedPort = r.Networking.AdvertisedPort.ValueInt64()
		} else {
			advertisedPort = nil
		}
		port1 := new(int64)
		if !r.Networking.Port.IsUnknown() && !r.Networking.Port.IsNull() {
			*port1 = r.Networking.Port.ValueInt64()
		} else {
			port1 = nil
		}
		networking = &shared.ZoneIngressItemNetworking{
			Address:           address,
			Admin:             admin,
			AdvertisedAddress: advertisedAddress,
			AdvertisedPort:    advertisedPort,
			Port:              port1,
		}
	}
	var typeVar string
	typeVar = r.Type.ValueString()

	zone := new(string)
	if !r.Zone.IsUnknown() && !r.Zone.IsNull() {
		*zone = r.Zone.ValueString()
	} else {
		zone = nil
	}
	out := shared.ZoneIngressItem{
		AvailableServices: availableServices,
		Labels:            labels,
		Name:              name,
		Networking:        networking,
		Type:              typeVar,
		Zone:              zone,
	}

	return &out, diags
}
