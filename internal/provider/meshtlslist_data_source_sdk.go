// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshTLSListDataSourceModel) RefreshFromSharedMeshTLSList(ctx context.Context, resp *shared.MeshTLSList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshTLSItem{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.MeshTLSItem

			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			items.Spec.From = []tfTypes.MeshTLSItemFrom{}

			for _, fromItem := range itemsItem.Spec.From {
				var from tfTypes.MeshTLSItemFrom

				if fromItem.Default == nil {
					from.Default = nil
				} else {
					from.Default = &tfTypes.MeshTLSItemDefault{}
					if fromItem.Default.Mode != nil {
						from.Default.Mode = types.StringValue(string(*fromItem.Default.Mode))
					} else {
						from.Default.Mode = types.StringNull()
					}
					from.Default.TLSCiphers = make([]types.String, 0, len(fromItem.Default.TLSCiphers))
					for _, v := range fromItem.Default.TLSCiphers {
						from.Default.TLSCiphers = append(from.Default.TLSCiphers, types.StringValue(string(v)))
					}
					if fromItem.Default.TLSVersion == nil {
						from.Default.TLSVersion = nil
					} else {
						from.Default.TLSVersion = &tfTypes.Version{}
						if fromItem.Default.TLSVersion.Max != nil {
							from.Default.TLSVersion.Max = types.StringValue(string(*fromItem.Default.TLSVersion.Max))
						} else {
							from.Default.TLSVersion.Max = types.StringNull()
						}
						if fromItem.Default.TLSVersion.Min != nil {
							from.Default.TLSVersion.Min = types.StringValue(string(*fromItem.Default.TLSVersion.Min))
						} else {
							from.Default.TLSVersion.Min = types.StringNull()
						}
					}
				}
				from.TargetRef.Kind = types.StringValue(string(fromItem.TargetRef.Kind))
				if len(fromItem.TargetRef.Labels) > 0 {
					from.TargetRef.Labels = make(map[string]types.String, len(fromItem.TargetRef.Labels))
					for key, value := range fromItem.TargetRef.Labels {
						from.TargetRef.Labels[key] = types.StringValue(value)
					}
				}
				from.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
				from.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
				from.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
				from.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
				for _, v := range fromItem.TargetRef.ProxyTypes {
					from.TargetRef.ProxyTypes = append(from.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				from.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
				if len(fromItem.TargetRef.Tags) > 0 {
					from.TargetRef.Tags = make(map[string]types.String, len(fromItem.TargetRef.Tags))
					for key1, value1 := range fromItem.TargetRef.Tags {
						from.TargetRef.Tags[key1] = types.StringValue(value1)
					}
				}

				items.Spec.From = append(items.Spec.From, from)
			}
			items.Spec.Rules = []tfTypes.MeshTLSItemRules{}

			for _, rulesItem := range itemsItem.Spec.Rules {
				var rules tfTypes.MeshTLSItemRules

				if rulesItem.Default == nil {
					rules.Default = nil
				} else {
					rules.Default = &tfTypes.MeshTLSItemDefault{}
					if rulesItem.Default.Mode != nil {
						rules.Default.Mode = types.StringValue(string(*rulesItem.Default.Mode))
					} else {
						rules.Default.Mode = types.StringNull()
					}
					rules.Default.TLSCiphers = make([]types.String, 0, len(rulesItem.Default.TLSCiphers))
					for _, v := range rulesItem.Default.TLSCiphers {
						rules.Default.TLSCiphers = append(rules.Default.TLSCiphers, types.StringValue(string(v)))
					}
					if rulesItem.Default.TLSVersion == nil {
						rules.Default.TLSVersion = nil
					} else {
						rules.Default.TLSVersion = &tfTypes.Version{}
						if rulesItem.Default.TLSVersion.Max != nil {
							rules.Default.TLSVersion.Max = types.StringValue(string(*rulesItem.Default.TLSVersion.Max))
						} else {
							rules.Default.TLSVersion.Max = types.StringNull()
						}
						if rulesItem.Default.TLSVersion.Min != nil {
							rules.Default.TLSVersion.Min = types.StringValue(string(*rulesItem.Default.TLSVersion.Min))
						} else {
							rules.Default.TLSVersion.Min = types.StringNull()
						}
					}
				}

				items.Spec.Rules = append(items.Spec.Rules, rules)
			}
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key2, value2 := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key2] = types.StringValue(value2)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key3, value3 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key3] = types.StringValue(value3)
					}
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))

			r.Items = append(r.Items, items)
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *MeshTLSListDataSourceModel) ToOperationsGetMeshTLSListRequest(ctx context.Context) (*operations.GetMeshTLSListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var filter *operations.GetMeshTLSListQueryParamFilter
	if r.Filter != nil {
		key := new(string)
		if !r.Filter.Key.IsUnknown() && !r.Filter.Key.IsNull() {
			*key = r.Filter.Key.ValueString()
		} else {
			key = nil
		}
		value := new(string)
		if !r.Filter.Value.IsUnknown() && !r.Filter.Value.IsNull() {
			*value = r.Filter.Value.ValueString()
		} else {
			value = nil
		}
		filter = &operations.GetMeshTLSListQueryParamFilter{
			Key:   key,
			Value: value,
		}
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshTLSListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Filter: filter,
		Mesh:   mesh,
	}

	return &out, diags
}
