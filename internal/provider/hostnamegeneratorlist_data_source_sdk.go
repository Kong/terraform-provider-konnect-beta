// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *HostnameGeneratorListDataSourceModel) RefreshFromSharedHostnameGeneratorList(ctx context.Context, resp *shared.HostnameGeneratorList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.HostnameGeneratorItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.HostnameGeneratorItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			if len(itemsItem.Labels) > 0 {
				items.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key, value := range itemsItem.Labels {
					items.Labels[key] = types.StringValue(value)
				}
			}
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.Extension == nil {
				items.Spec.Extension = nil
			} else {
				items.Spec.Extension = &tfTypes.MeshExternalServiceItemExtension{}
				if itemsItem.Spec.Extension.Config == nil {
					items.Spec.Extension.Config = types.StringNull()
				} else {
					configResult, _ := json.Marshal(itemsItem.Spec.Extension.Config)
					items.Spec.Extension.Config = types.StringValue(string(configResult))
				}
				items.Spec.Extension.Type = types.StringValue(itemsItem.Spec.Extension.Type)
			}
			if itemsItem.Spec.Selector == nil {
				items.Spec.Selector = nil
			} else {
				items.Spec.Selector = &tfTypes.Selector{}
				if itemsItem.Spec.Selector.MeshExternalService == nil {
					items.Spec.Selector.MeshExternalService = nil
				} else {
					items.Spec.Selector.MeshExternalService = &tfTypes.MeshExternalService{}
					if len(itemsItem.Spec.Selector.MeshExternalService.MatchLabels) > 0 {
						items.Spec.Selector.MeshExternalService.MatchLabels = make(map[string]types.String, len(itemsItem.Spec.Selector.MeshExternalService.MatchLabels))
						for key1, value1 := range itemsItem.Spec.Selector.MeshExternalService.MatchLabels {
							items.Spec.Selector.MeshExternalService.MatchLabels[key1] = types.StringValue(value1)
						}
					}
				}
				if itemsItem.Spec.Selector.MeshMultiZoneService == nil {
					items.Spec.Selector.MeshMultiZoneService = nil
				} else {
					items.Spec.Selector.MeshMultiZoneService = &tfTypes.MeshExternalService{}
					if len(itemsItem.Spec.Selector.MeshMultiZoneService.MatchLabels) > 0 {
						items.Spec.Selector.MeshMultiZoneService.MatchLabels = make(map[string]types.String, len(itemsItem.Spec.Selector.MeshMultiZoneService.MatchLabels))
						for key2, value2 := range itemsItem.Spec.Selector.MeshMultiZoneService.MatchLabels {
							items.Spec.Selector.MeshMultiZoneService.MatchLabels[key2] = types.StringValue(value2)
						}
					}
				}
				if itemsItem.Spec.Selector.MeshService == nil {
					items.Spec.Selector.MeshService = nil
				} else {
					items.Spec.Selector.MeshService = &tfTypes.MeshExternalService{}
					if len(itemsItem.Spec.Selector.MeshService.MatchLabels) > 0 {
						items.Spec.Selector.MeshService.MatchLabels = make(map[string]types.String, len(itemsItem.Spec.Selector.MeshService.MatchLabels))
						for key3, value3 := range itemsItem.Spec.Selector.MeshService.MatchLabels {
							items.Spec.Selector.MeshService.MatchLabels[key3] = types.StringValue(value3)
						}
					}
				}
			}
			items.Spec.Template = types.StringPointerValue(itemsItem.Spec.Template)
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *HostnameGeneratorListDataSourceModel) ToOperationsGetHostnameGeneratorListRequest(ctx context.Context) (*operations.GetHostnameGeneratorListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	out := operations.GetHostnameGeneratorListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
	}

	return &out, diags
}
