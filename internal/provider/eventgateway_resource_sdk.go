// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayResourceModel) RefreshFromSharedEventGatewayInfo(ctx context.Context, resp *shared.EventGatewayInfo) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.NodesTotal = types.Int64Value(resp.NodesTotal)
		r.Version = types.StringValue(resp.Version)
		r.VirtualClustersTotal = types.Int64Value(resp.VirtualClustersTotal)
	}

	return diags
}

func (r *EventGatewayResourceModel) ToOperationsDeleteEventGatewayRequest(ctx context.Context) (*operations.DeleteEventGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.ID.ValueString()

	out := operations.DeleteEventGatewayRequest{
		GatewayID: gatewayID,
	}

	return &out, diags
}

func (r *EventGatewayResourceModel) ToOperationsGetEventGatewayRequest(ctx context.Context) (*operations.GetEventGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.ID.ValueString()

	out := operations.GetEventGatewayRequest{
		GatewayID: gatewayID,
	}

	return &out, diags
}

func (r *EventGatewayResourceModel) ToOperationsUpdateHoudiniEventGatewayRequest(ctx context.Context) (*operations.UpdateHoudiniEventGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.ID.ValueString()

	updateGatewayRequest, updateGatewayRequestDiags := r.ToSharedUpdateGatewayRequest(ctx)
	diags.Append(updateGatewayRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateHoudiniEventGatewayRequest{
		GatewayID:            gatewayID,
		UpdateGatewayRequest: *updateGatewayRequest,
	}

	return &out, diags
}

func (r *EventGatewayResourceModel) ToSharedCreateGatewayRequest(ctx context.Context) (*shared.CreateGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateGatewayRequest{
		Name:   name,
		Labels: labels,
	}

	return &out, diags
}

func (r *EventGatewayResourceModel) ToSharedUpdateGatewayRequest(ctx context.Context) (*shared.UpdateGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdateGatewayRequest{
		Name:   name,
		Labels: labels,
	}

	return &out, diags
}
