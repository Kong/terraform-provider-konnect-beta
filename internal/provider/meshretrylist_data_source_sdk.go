// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshRetryListDataSourceModel) ToOperationsGetMeshRetryListRequest(ctx context.Context) (*operations.GetMeshRetryListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshRetryListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}

func (r *MeshRetryListDataSourceModel) RefreshFromSharedMeshRetryList(ctx context.Context, resp *shared.MeshRetryList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshRetryItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshRetryItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key, value := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key] = types.StringValue(value)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key1, value1 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
					}
				}
			}
			items.Spec.To = []tfTypes.MeshRetryItemTo{}
			for toCount, toItem := range itemsItem.Spec.To {
				var to tfTypes.MeshRetryItemTo
				if toItem.Default == nil {
					to.Default = nil
				} else {
					to.Default = &tfTypes.MeshRetryItemDefault{}
					if toItem.Default.Grpc == nil {
						to.Default.Grpc = nil
					} else {
						to.Default.Grpc = &tfTypes.MeshRetryItemGrpc{}
						if toItem.Default.Grpc.BackOff == nil {
							to.Default.Grpc.BackOff = nil
						} else {
							to.Default.Grpc.BackOff = &tfTypes.BackOff{}
							to.Default.Grpc.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.BaseInterval)
							to.Default.Grpc.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.MaxInterval)
						}
						to.Default.Grpc.NumRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.Grpc.NumRetries))
						to.Default.Grpc.PerTryTimeout = types.StringPointerValue(toItem.Default.Grpc.PerTryTimeout)
						if toItem.Default.Grpc.RateLimitedBackOff == nil {
							to.Default.Grpc.RateLimitedBackOff = nil
						} else {
							to.Default.Grpc.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
							to.Default.Grpc.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.RateLimitedBackOff.MaxInterval)
							to.Default.Grpc.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
							for resetHeadersCount, resetHeadersItem := range toItem.Default.Grpc.RateLimitedBackOff.ResetHeaders {
								var resetHeaders tfTypes.ResetHeaders
								resetHeaders.Format = types.StringValue(string(resetHeadersItem.Format))
								resetHeaders.Name = types.StringValue(resetHeadersItem.Name)
								if resetHeadersCount+1 > len(to.Default.Grpc.RateLimitedBackOff.ResetHeaders) {
									to.Default.Grpc.RateLimitedBackOff.ResetHeaders = append(to.Default.Grpc.RateLimitedBackOff.ResetHeaders, resetHeaders)
								} else {
									to.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Format = resetHeaders.Format
									to.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Name = resetHeaders.Name
								}
							}
						}
						to.Default.Grpc.RetryOn = make([]types.String, 0, len(toItem.Default.Grpc.RetryOn))
						for _, v := range toItem.Default.Grpc.RetryOn {
							to.Default.Grpc.RetryOn = append(to.Default.Grpc.RetryOn, types.StringValue(string(v)))
						}
					}
					if toItem.Default.HTTP == nil {
						to.Default.HTTP = nil
					} else {
						to.Default.HTTP = &tfTypes.MeshRetryItemHTTP{}
						if toItem.Default.HTTP.BackOff == nil {
							to.Default.HTTP.BackOff = nil
						} else {
							to.Default.HTTP.BackOff = &tfTypes.BackOff{}
							to.Default.HTTP.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.BaseInterval)
							to.Default.HTTP.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.MaxInterval)
						}
						to.Default.HTTP.HostSelection = []tfTypes.HostSelection{}
						for hostSelectionCount, hostSelectionItem := range toItem.Default.HTTP.HostSelection {
							var hostSelection tfTypes.HostSelection
							hostSelection.Predicate = types.StringValue(string(hostSelectionItem.Predicate))
							if len(hostSelectionItem.Tags) > 0 {
								hostSelection.Tags = make(map[string]types.String, len(hostSelectionItem.Tags))
								for key2, value2 := range hostSelectionItem.Tags {
									hostSelection.Tags[key2] = types.StringValue(value2)
								}
							}
							hostSelection.UpdateFrequency = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(hostSelectionItem.UpdateFrequency))
							if hostSelectionCount+1 > len(to.Default.HTTP.HostSelection) {
								to.Default.HTTP.HostSelection = append(to.Default.HTTP.HostSelection, hostSelection)
							} else {
								to.Default.HTTP.HostSelection[hostSelectionCount].Predicate = hostSelection.Predicate
								to.Default.HTTP.HostSelection[hostSelectionCount].Tags = hostSelection.Tags
								to.Default.HTTP.HostSelection[hostSelectionCount].UpdateFrequency = hostSelection.UpdateFrequency
							}
						}
						to.Default.HTTP.HostSelectionMaxAttempts = types.Int64PointerValue(toItem.Default.HTTP.HostSelectionMaxAttempts)
						to.Default.HTTP.NumRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.HTTP.NumRetries))
						to.Default.HTTP.PerTryTimeout = types.StringPointerValue(toItem.Default.HTTP.PerTryTimeout)
						if toItem.Default.HTTP.RateLimitedBackOff == nil {
							to.Default.HTTP.RateLimitedBackOff = nil
						} else {
							to.Default.HTTP.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
							to.Default.HTTP.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.RateLimitedBackOff.MaxInterval)
							to.Default.HTTP.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
							for resetHeadersCount1, resetHeadersItem1 := range toItem.Default.HTTP.RateLimitedBackOff.ResetHeaders {
								var resetHeaders1 tfTypes.ResetHeaders
								resetHeaders1.Format = types.StringValue(string(resetHeadersItem1.Format))
								resetHeaders1.Name = types.StringValue(resetHeadersItem1.Name)
								if resetHeadersCount1+1 > len(to.Default.HTTP.RateLimitedBackOff.ResetHeaders) {
									to.Default.HTTP.RateLimitedBackOff.ResetHeaders = append(to.Default.HTTP.RateLimitedBackOff.ResetHeaders, resetHeaders1)
								} else {
									to.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Format = resetHeaders1.Format
									to.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Name = resetHeaders1.Name
								}
							}
						}
						to.Default.HTTP.RetriableRequestHeaders = []tfTypes.Headers{}
						for retriableRequestHeadersCount, retriableRequestHeadersItem := range toItem.Default.HTTP.RetriableRequestHeaders {
							var retriableRequestHeaders tfTypes.Headers
							retriableRequestHeaders.Name = types.StringValue(retriableRequestHeadersItem.Name)
							if retriableRequestHeadersItem.Type != nil {
								retriableRequestHeaders.Type = types.StringValue(string(*retriableRequestHeadersItem.Type))
							} else {
								retriableRequestHeaders.Type = types.StringNull()
							}
							retriableRequestHeaders.Value = types.StringPointerValue(retriableRequestHeadersItem.Value)
							if retriableRequestHeadersCount+1 > len(to.Default.HTTP.RetriableRequestHeaders) {
								to.Default.HTTP.RetriableRequestHeaders = append(to.Default.HTTP.RetriableRequestHeaders, retriableRequestHeaders)
							} else {
								to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Name = retriableRequestHeaders.Name
								to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Type = retriableRequestHeaders.Type
								to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Value = retriableRequestHeaders.Value
							}
						}
						to.Default.HTTP.RetriableResponseHeaders = []tfTypes.Headers{}
						for retriableResponseHeadersCount, retriableResponseHeadersItem := range toItem.Default.HTTP.RetriableResponseHeaders {
							var retriableResponseHeaders tfTypes.Headers
							retriableResponseHeaders.Name = types.StringValue(retriableResponseHeadersItem.Name)
							if retriableResponseHeadersItem.Type != nil {
								retriableResponseHeaders.Type = types.StringValue(string(*retriableResponseHeadersItem.Type))
							} else {
								retriableResponseHeaders.Type = types.StringNull()
							}
							retriableResponseHeaders.Value = types.StringPointerValue(retriableResponseHeadersItem.Value)
							if retriableResponseHeadersCount+1 > len(to.Default.HTTP.RetriableResponseHeaders) {
								to.Default.HTTP.RetriableResponseHeaders = append(to.Default.HTTP.RetriableResponseHeaders, retriableResponseHeaders)
							} else {
								to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Name = retriableResponseHeaders.Name
								to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Type = retriableResponseHeaders.Type
								to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Value = retriableResponseHeaders.Value
							}
						}
						to.Default.HTTP.RetryOn = make([]types.String, 0, len(toItem.Default.HTTP.RetryOn))
						for _, v := range toItem.Default.HTTP.RetryOn {
							to.Default.HTTP.RetryOn = append(to.Default.HTTP.RetryOn, types.StringValue(v))
						}
					}
					if toItem.Default.TCP == nil {
						to.Default.TCP = nil
					} else {
						to.Default.TCP = &tfTypes.MeshRetryItemTCP{}
						to.Default.TCP.MaxConnectAttempt = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.TCP.MaxConnectAttempt))
					}
				}
				to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
				if len(toItem.TargetRef.Labels) > 0 {
					to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
					for key3, value3 := range toItem.TargetRef.Labels {
						to.TargetRef.Labels[key3] = types.StringValue(value3)
					}
				}
				to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
				to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
				to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
				to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
				for _, v := range toItem.TargetRef.ProxyTypes {
					to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
				if len(toItem.TargetRef.Tags) > 0 {
					to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
					for key4, value4 := range toItem.TargetRef.Tags {
						to.TargetRef.Tags[key4] = types.StringValue(value4)
					}
				}
				if toCount+1 > len(items.Spec.To) {
					items.Spec.To = append(items.Spec.To, to)
				} else {
					items.Spec.To[toCount].Default = to.Default
					items.Spec.To[toCount].TargetRef = to.TargetRef
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}
