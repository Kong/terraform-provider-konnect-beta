// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIImplementationResourceModel) ToSharedAPIImplementation(ctx context.Context) (*shared.APIImplementation, diag.Diagnostics) {
	var diags diag.Diagnostics

	var service *shared.APIImplementationServiceInput
	if r.Service != nil {
		var controlPlaneID string
		controlPlaneID = r.Service.ControlPlaneID.ValueString()

		var id string
		id = r.Service.ID.ValueString()

		service = &shared.APIImplementationServiceInput{
			ControlPlaneID: controlPlaneID,
			ID:             id,
		}
	}
	out := shared.APIImplementation{
		Service: service,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToOperationsCreateAPIImplementationRequest(ctx context.Context) (*operations.CreateAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	apiImplementation, apiImplementationDiags := r.ToSharedAPIImplementation(ctx)
	diags.Append(apiImplementationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAPIImplementationRequest{
		APIID:             apiID,
		APIImplementation: *apiImplementation,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToOperationsFetchAPIImplementationRequest(ctx context.Context) (*operations.FetchAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var implementationID string
	implementationID = r.ID.ValueString()

	out := operations.FetchAPIImplementationRequest{
		APIID:            apiID,
		ImplementationID: implementationID,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToOperationsDeleteAPIImplementationRequest(ctx context.Context) (*operations.DeleteAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var implementationID string
	implementationID = r.ID.ValueString()

	out := operations.DeleteAPIImplementationRequest{
		APIID:            apiID,
		ImplementationID: implementationID,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) RefreshFromSharedAPIImplementationResponse(ctx context.Context, resp *shared.APIImplementationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.APIImplementationService{}
			if resp.Service.AuthStrategySyncError == nil {
				r.Service.AuthStrategySyncError = nil
			} else {
				r.Service.AuthStrategySyncError = &tfTypes.AuthStrategySyncError{}
				if resp.Service.AuthStrategySyncError.ControlPlaneError != nil {
					r.Service.AuthStrategySyncError.ControlPlaneError = types.StringValue(string(*resp.Service.AuthStrategySyncError.ControlPlaneError))
				} else {
					r.Service.AuthStrategySyncError.ControlPlaneError = types.StringNull()
				}
				if resp.Service.AuthStrategySyncError.Info == nil {
					r.Service.AuthStrategySyncError.Info = nil
				} else {
					r.Service.AuthStrategySyncError.Info = &tfTypes.Info{}
					if resp.Service.AuthStrategySyncError.Info.AdditionalProperties == nil {
						r.Service.AuthStrategySyncError.Info.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult, _ := json.Marshal(resp.Service.AuthStrategySyncError.Info.AdditionalProperties)
						r.Service.AuthStrategySyncError.Info.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
					}
					r.Service.AuthStrategySyncError.Info.Details = []tfTypes.Details{}
					if len(r.Service.AuthStrategySyncError.Info.Details) > len(resp.Service.AuthStrategySyncError.Info.Details) {
						r.Service.AuthStrategySyncError.Info.Details = r.Service.AuthStrategySyncError.Info.Details[:len(resp.Service.AuthStrategySyncError.Info.Details)]
					}
					for detailsCount, detailsItem := range resp.Service.AuthStrategySyncError.Info.Details {
						var details tfTypes.Details
						if detailsItem.AdditionalProperties == nil {
							details.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult1, _ := json.Marshal(detailsItem.AdditionalProperties)
							details.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
						}
						details.Message = make([]types.String, 0, len(detailsItem.Message))
						for _, v := range detailsItem.Message {
							details.Message = append(details.Message, types.StringValue(v))
						}
						details.Type = types.StringPointerValue(detailsItem.Type)
						if detailsCount+1 > len(r.Service.AuthStrategySyncError.Info.Details) {
							r.Service.AuthStrategySyncError.Info.Details = append(r.Service.AuthStrategySyncError.Info.Details, details)
						} else {
							r.Service.AuthStrategySyncError.Info.Details[detailsCount].AdditionalProperties = details.AdditionalProperties
							r.Service.AuthStrategySyncError.Info.Details[detailsCount].Message = details.Message
							r.Service.AuthStrategySyncError.Info.Details[detailsCount].Type = details.Type
						}
					}
				}
				r.Service.AuthStrategySyncError.Message = types.StringValue(resp.Service.AuthStrategySyncError.Message)
			}
			r.Service.ControlPlaneID = types.StringValue(resp.Service.ControlPlaneID)
			r.Service.ID = types.StringValue(resp.Service.ID)
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
