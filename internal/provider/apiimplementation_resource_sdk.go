// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIImplementationResourceModel) RefreshFromSharedAPIImplementationResponse(ctx context.Context, resp *shared.APIImplementationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.APIImplementationResponseAPIImplementationControlPlaneEntity != nil {
			r.APIImplementationControlPlaneEntity = &tfTypes.APIImplementationControlPlaneEntity{}
			if resp.APIImplementationResponseAPIImplementationControlPlaneEntity.ControlPlane == nil {
				r.APIImplementationControlPlaneEntity.ControlPlane = nil
			} else {
				r.APIImplementationControlPlaneEntity.ControlPlane = &tfTypes.APIImplementationControlPlane{}
				r.APIImplementationControlPlaneEntity.ControlPlane.AccessControlEnforcementEnabled = types.BoolPointerValue(resp.APIImplementationResponseAPIImplementationControlPlaneEntity.ControlPlane.AccessControlEnforcementEnabled)
				r.APIImplementationControlPlaneEntity.ControlPlane.ControlPlaneID = types.StringValue(resp.APIImplementationResponseAPIImplementationControlPlaneEntity.ControlPlane.ControlPlaneID)
			}
			r.APIImplementationControlPlaneEntity.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.APIImplementationResponseAPIImplementationControlPlaneEntity.CreatedAt))
			r.APIImplementationControlPlaneEntity.ID = types.StringValue(resp.APIImplementationResponseAPIImplementationControlPlaneEntity.ID)
			r.ID = r.APIImplementationControlPlaneEntity.ID
			r.APIImplementationControlPlaneEntity.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.APIImplementationResponseAPIImplementationControlPlaneEntity.UpdatedAt))
		}
		if resp.APIImplementationResponseAPIImplementationGatewayServiceEntity != nil {
			r.APIImplementationGatewayServiceEntity = &tfTypes.APIImplementationGatewayServiceEntity{}
			r.APIImplementationGatewayServiceEntity.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.CreatedAt))
			r.APIImplementationGatewayServiceEntity.ID = types.StringValue(resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.ID)
			r.ID = r.APIImplementationGatewayServiceEntity.ID
			if resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.Service == nil {
				r.APIImplementationGatewayServiceEntity.Service = nil
			} else {
				r.APIImplementationGatewayServiceEntity.Service = &tfTypes.APIImplementationService{}
				r.APIImplementationGatewayServiceEntity.Service.ControlPlaneID = types.StringValue(resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.Service.ControlPlaneID)
				r.APIImplementationGatewayServiceEntity.Service.ID = types.StringValue(resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.Service.ID)
			}
			r.APIImplementationGatewayServiceEntity.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.APIImplementationResponseAPIImplementationGatewayServiceEntity.UpdatedAt))
		}
	}

	return diags
}

func (r *APIImplementationResourceModel) ToOperationsCreateAPIImplementationRequest(ctx context.Context) (*operations.CreateAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	apiImplementation, apiImplementationDiags := r.ToSharedAPIImplementation(ctx)
	diags.Append(apiImplementationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAPIImplementationRequest{
		APIID:             apiID,
		APIImplementation: *apiImplementation,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToOperationsDeleteAPIImplementationRequest(ctx context.Context) (*operations.DeleteAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var implementationID string
	implementationID = r.ID.ValueString()

	out := operations.DeleteAPIImplementationRequest{
		APIID:            apiID,
		ImplementationID: implementationID,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToOperationsFetchAPIImplementationRequest(ctx context.Context) (*operations.FetchAPIImplementationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var implementationID string
	implementationID = r.ID.ValueString()

	out := operations.FetchAPIImplementationRequest{
		APIID:            apiID,
		ImplementationID: implementationID,
	}

	return &out, diags
}

func (r *APIImplementationResourceModel) ToSharedAPIImplementation(ctx context.Context) (*shared.APIImplementation, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.APIImplementation
	var apiImplementationGatewayServiceEntity *shared.APIImplementationGatewayServiceEntity
	if r.APIImplementationGatewayServiceEntity != nil {
		var service *shared.APIImplementationService
		if r.APIImplementationGatewayServiceEntity.Service != nil {
			var controlPlaneID string
			controlPlaneID = r.APIImplementationGatewayServiceEntity.Service.ControlPlaneID.ValueString()

			var id string
			id = r.APIImplementationGatewayServiceEntity.Service.ID.ValueString()

			service = &shared.APIImplementationService{
				ControlPlaneID: controlPlaneID,
				ID:             id,
			}
		}
		apiImplementationGatewayServiceEntity = &shared.APIImplementationGatewayServiceEntity{
			Service: service,
		}
	}
	if apiImplementationGatewayServiceEntity != nil {
		out = shared.APIImplementation{
			APIImplementationGatewayServiceEntity: apiImplementationGatewayServiceEntity,
		}
	}
	var apiImplementationControlPlaneEntity *shared.APIImplementationControlPlaneEntity
	if r.APIImplementationControlPlaneEntity != nil {
		var controlPlane *shared.APIImplementationControlPlaneInput
		if r.APIImplementationControlPlaneEntity.ControlPlane != nil {
			var controlPlaneId1 string
			controlPlaneId1 = r.APIImplementationControlPlaneEntity.ControlPlane.ControlPlaneID.ValueString()

			controlPlane = &shared.APIImplementationControlPlaneInput{
				ControlPlaneID: controlPlaneId1,
			}
		}
		apiImplementationControlPlaneEntity = &shared.APIImplementationControlPlaneEntity{
			ControlPlane: controlPlane,
		}
	}
	if apiImplementationControlPlaneEntity != nil {
		out = shared.APIImplementation{
			APIImplementationControlPlaneEntity: apiImplementationControlPlaneEntity,
		}
	}

	return &out, diags
}
