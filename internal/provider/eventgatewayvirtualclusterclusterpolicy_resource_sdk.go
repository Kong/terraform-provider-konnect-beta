// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) ToOperationsCreateEventGatewayVirtualClusterClusterLevelPolicyRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterClusterLevelPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayClusterPolicyModify, eventGatewayClusterPolicyModifyDiags := r.ToSharedEventGatewayClusterPolicyModify(ctx)
	diags.Append(eventGatewayClusterPolicyModifyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterClusterLevelPolicyRequest{
		GatewayID:                       gatewayID,
		VirtualClusterID:                virtualClusterID,
		ParentPolicyID:                  parentPolicyID,
		EventGatewayClusterPolicyModify: eventGatewayClusterPolicyModify,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) ToOperationsDeleteEventGatewayVirtualClusterClusterLevelPolicyRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterClusterLevelPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterClusterLevelPolicyRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) ToOperationsGetEventGatewayVirtualClusterClusterLevelPolicyRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterClusterLevelPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterClusterLevelPolicyRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) ToOperationsUpdateEventGatewayVirtualClusterClusterLevelPolicyRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterClusterLevelPolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayClusterPolicyModify, eventGatewayClusterPolicyModifyDiags := r.ToSharedEventGatewayClusterPolicyModify(ctx)
	diags.Append(eventGatewayClusterPolicyModifyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterClusterLevelPolicyRequest{
		GatewayID:                       gatewayID,
		VirtualClusterID:                virtualClusterID,
		PolicyID:                        policyID,
		EventGatewayClusterPolicyModify: eventGatewayClusterPolicyModify,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyResourceModel) ToSharedEventGatewayClusterPolicyModify(ctx context.Context) (*shared.EventGatewayClusterPolicyModify, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayClusterPolicyModify
	var eventGatewayIDPrefixPolicy *shared.EventGatewayIDPrefixPolicy
	if r.IDPrefix != nil {
		typeVar := shared.EventGatewayIDPrefixPolicyType(r.IDPrefix.Type.ValueString())
		name := new(string)
		if !r.IDPrefix.Name.IsUnknown() && !r.IDPrefix.Name.IsNull() {
			*name = r.IDPrefix.Name.ValueString()
		} else {
			name = nil
		}
		description := new(string)
		if !r.IDPrefix.Description.IsUnknown() && !r.IDPrefix.Description.IsNull() {
			*description = r.IDPrefix.Description.ValueString()
		} else {
			description = nil
		}
		enabled := new(bool)
		if !r.IDPrefix.Enabled.IsUnknown() && !r.IDPrefix.Enabled.IsNull() {
			*enabled = r.IDPrefix.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		condition := new(string)
		if !r.IDPrefix.Condition.IsUnknown() && !r.IDPrefix.Condition.IsNull() {
			*condition = r.IDPrefix.Condition.ValueString()
		} else {
			condition = nil
		}
		var config *shared.EventGatewayIDPrefixPolicyConfig
		if r.IDPrefix.Config != nil {
			config = &shared.EventGatewayIDPrefixPolicyConfig{}
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.IDPrefix.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		eventGatewayIDPrefixPolicy = &shared.EventGatewayIDPrefixPolicy{
			Type:        typeVar,
			Name:        name,
			Description: description,
			Enabled:     enabled,
			Condition:   condition,
			Config:      config,
			Labels:      labels,
		}
	}
	if eventGatewayIDPrefixPolicy != nil {
		out = shared.EventGatewayClusterPolicyModify{
			EventGatewayIDPrefixPolicy: eventGatewayIDPrefixPolicy,
		}
	}
	var eventGatewayTopicRewritePolicy *shared.EventGatewayTopicRewritePolicy
	if r.TopicRewrite != nil {
		typeVar1 := shared.EventGatewayTopicRewritePolicyType(r.TopicRewrite.Type.ValueString())
		name1 := new(string)
		if !r.TopicRewrite.Name.IsUnknown() && !r.TopicRewrite.Name.IsNull() {
			*name1 = r.TopicRewrite.Name.ValueString()
		} else {
			name1 = nil
		}
		description1 := new(string)
		if !r.TopicRewrite.Description.IsUnknown() && !r.TopicRewrite.Description.IsNull() {
			*description1 = r.TopicRewrite.Description.ValueString()
		} else {
			description1 = nil
		}
		enabled1 := new(bool)
		if !r.TopicRewrite.Enabled.IsUnknown() && !r.TopicRewrite.Enabled.IsNull() {
			*enabled1 = r.TopicRewrite.Enabled.ValueBool()
		} else {
			enabled1 = nil
		}
		condition1 := new(string)
		if !r.TopicRewrite.Condition.IsUnknown() && !r.TopicRewrite.Condition.IsNull() {
			*condition1 = r.TopicRewrite.Condition.ValueString()
		} else {
			condition1 = nil
		}
		var config1 *shared.EventGatewayTopicRewritePolicyConfig
		if r.TopicRewrite.Config != nil {
			typeVar2 := shared.EventGatewayTopicRewritePolicyConfigType(r.TopicRewrite.Config.Type.ValueString())
			var prefix *shared.Prefix
			if r.TopicRewrite.Config.Prefix != nil {
				var value string
				value = r.TopicRewrite.Config.Prefix.Value.ValueString()

				prefix = &shared.Prefix{
					Value: value,
				}
			}
			var expression *shared.Expression
			if r.TopicRewrite.Config.Expression != nil {
				var virtualToBackend string
				virtualToBackend = r.TopicRewrite.Config.Expression.VirtualToBackend.ValueString()

				var backendToVirtual string
				backendToVirtual = r.TopicRewrite.Config.Expression.BackendToVirtual.ValueString()

				expression = &shared.Expression{
					VirtualToBackend: virtualToBackend,
					BackendToVirtual: backendToVirtual,
				}
			}
			config1 = &shared.EventGatewayTopicRewritePolicyConfig{
				Type:       typeVar2,
				Prefix:     prefix,
				Expression: expression,
			}
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.TopicRewrite.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		eventGatewayTopicRewritePolicy = &shared.EventGatewayTopicRewritePolicy{
			Type:        typeVar1,
			Name:        name1,
			Description: description1,
			Enabled:     enabled1,
			Condition:   condition1,
			Config:      config1,
			Labels:      labels1,
		}
	}
	if eventGatewayTopicRewritePolicy != nil {
		out = shared.EventGatewayClusterPolicyModify{
			EventGatewayTopicRewritePolicy: eventGatewayTopicRewritePolicy,
		}
	}

	return &out, diags
}
