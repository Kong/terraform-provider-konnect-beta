// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect-beta/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
	"github.com/kong/terraform-provider-konnect-beta/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &EventGatewayListenerPolicyForwardToVirtualClusterResource{}
var _ resource.ResourceWithImportState = &EventGatewayListenerPolicyForwardToVirtualClusterResource{}

func NewEventGatewayListenerPolicyForwardToVirtualClusterResource() resource.Resource {
	return &EventGatewayListenerPolicyForwardToVirtualClusterResource{}
}

// EventGatewayListenerPolicyForwardToVirtualClusterResource defines the resource implementation.
type EventGatewayListenerPolicyForwardToVirtualClusterResource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// EventGatewayListenerPolicyForwardToVirtualClusterResourceModel describes the resource data model.
type EventGatewayListenerPolicyForwardToVirtualClusterResourceModel struct {
	Condition              types.String                                `tfsdk:"condition"`
	Config                 tfTypes.ForwardToVirtualClusterPolicyConfig `tfsdk:"config"`
	CreatedAt              types.String                                `tfsdk:"created_at"`
	Description            types.String                                `tfsdk:"description"`
	Enabled                types.Bool                                  `tfsdk:"enabled"`
	EventGatewayListenerID types.String                                `tfsdk:"event_gateway_listener_id"`
	GatewayID              types.String                                `tfsdk:"gateway_id"`
	ID                     types.String                                `tfsdk:"id"`
	Labels                 map[string]types.String                     `tfsdk:"labels"`
	Name                   types.String                                `tfsdk:"name"`
	ParentPolicyID         types.String                                `tfsdk:"parent_policy_id"`
	UpdatedAt              types.String                                `tfsdk:"updated_at"`
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "konnect_event_gateway_listener_policy_forward_to_virtual_cluster"
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "EventGatewayListenerPolicyForwardToVirtualCluster Resource",
		Attributes: map[string]schema.Attribute{
			"condition": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string containing the boolean expression that determines whether the policy is applied.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 1000),
				},
			},
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"port_mapping": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"advertised_host": schema.StringAttribute{
								Required:    true,
								Description: `Virtual brokers are advertised to clients using this host. Any kind of host supported by kafka can be used. If not defined, it's listen_address. If listen_address is ` + "`" + `0.0.0.0` + "`" + ` it's the destination IP of the TCP connection.`,
							},
							"bootstrap_port": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Default:  stringdefault.StaticString(`at_start`),
								MarkdownDescription: `If set to ` + "`" + `at_start` + "`" + `, the first port will be used as a bootstrap port.` + "\n" +
									`It provides a stable endpoint to use as the bootstrap server for clients, regardless of broker` + "\n" +
									`IDs in the cluster.` + "\n" +
									`` + "\n" +
									`Additionally, it offsets all ports by one, so for example, if there are 3 brokers (id=1, id=2, id=3)` + "\n" +
									`then we will use 4 ports: 9092 (bootstrap), 9093 (id=1), 9094 (id=2), 9095 (id=3)` + "\n" +
									`With ` + "`" + `none` + "`" + ` we will use 3 ports: 9092 (id=1), 9093 (id=2), 9094 (id=3).` + "\n" +
									`Default: "at_start"; must be one of ["none", "at_start"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"none",
										"at_start",
									),
								},
							},
							"destination": schema.SingleNestedAttribute{
								Required: true,
								Attributes: map[string]schema.Attribute{
									"virtual_cluster_reference_by_id": schema.SingleNestedAttribute{
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Required:    true,
												Description: `The unique identifier of the virtual cluster.`,
											},
										},
										Description: `Reference a virtual cluster by its unique identifier.`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("virtual_cluster_reference_by_name"),
											}...),
										},
									},
									"virtual_cluster_reference_by_name": schema.SingleNestedAttribute{
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"name": schema.StringAttribute{
												Required:    true,
												Description: `The name of the virtual cluster.`,
												Validators: []validator.String{
													stringvalidator.UTF8LengthBetween(1, 255),
												},
											},
										},
										Description: `Reference a virtual cluster by its unique name.`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("virtual_cluster_reference_by_id"),
											}...),
										},
									},
								},
								Description: `A reference to a virtual cluster.`,
							},
							"min_broker_id": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(0),
								Description: `The lowest broker node ID in the cluster. Default: 0`,
							},
						},
						MarkdownDescription: `The configuration to forward request to ` + "`" + `destination` + "`" + ` and rewrite ports accordingly.` + "\n" +
							`All broker ids must fit in the range of ports defined in the listener, if it doesn't the metadata request will` + "\n" +
							`return an error.` + "\n" +
							`` + "\n" +
							`For example with ports: [9000, "9092-9094", "9100"] and ` + "`" + `bootstrap_port: at_start` + "`" + ` and brokers with ids` + "\n" +
							`1, 2, 3, 4 we will map: bootstrap to 9000 broker 1 to 9001, broker 2 to 9002, broker 3 to 9003, and broker 4` + "\n" +
							`to 9004 and fail the metadata request as these ports are not open.` + "\n" +
							`` + "\n" +
							`However, with the same configuration but with brokers with ids: 92,93,94,100 we will map: bootstrap to 9000,` + "\n" +
							`broker 92 to 9092, broker 93 to 9093, broker 94 to 9094, and broker 100 to 9100.` + "\n" +
							`` + "\n" +
							`In most cases users should use a single range ` + "`" + `["9090-9094"] ` + "`" + ` and ` + "`" + `bootstrap_port: at_start` + "`" + ` and connect with` + "\n" +
							`` + "`" + `<host>:9090` + "`" + ` as bootstrap server. Being able to use multiple ranges is only useful when when dealing with` + "\n" +
							`gaps in broker ids.` + "\n" +
							`` + "\n" +
							`It is strongly discouraged to use port mapping in production.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("sni"),
							}...),
						},
					},
					"sni": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"advertised_port": schema.Int64Attribute{
								Optional: true,
								MarkdownDescription: `Virtual brokers are advertised to clients with this port instead of listen_port. Useful when proxy is` + "\n" +
									`behind loadbalancer listening on different port.`,
								Validators: []validator.Int64{
									int64validator.Between(1, 65535),
								},
							},
							"sni_suffix": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Optional suffix for TLS SNI validation.` + "\n" +
									`` + "\n" +
									`This suffix is concatenated with the virtual cluster "dns.label" label to form the base name for the SNI.` + "\n" +
									`If not provided, the virtual cluster "dns.label" label alone is used as the base name for the SNI.` + "\n" +
									`For example with sni_suffix: ` + "`" + `.example.com` + "`" + ` and virtual cluster "dns.label" label: ` + "`" + `my-cluster` + "`" + `,` + "\n" +
									`the SNI suffix for it is ` + "`" + `my-cluster.example.com` + "`" + `.` + "\n" +
									`If "dns.label" label is absent on the virtual cluster, the traffic won't be routed there.` + "\n" +
									`` + "\n" +
									`The bootstrap host is ` + "`" + `bootstrap.my-cluster.example.com` + "`" + ` and then each broker is addressable at ` + "`" + `broker-0.my-cluster.example.com` + "`" + `, ` + "`" + `broker-1.my-cluster.example.com` + "`" + `, etc.` + "\n" +
									`This means that your deployment needs to have a wildcard certificate for the domain and a DNS resolver that routes ` + "`" + `*.my-cluster.example.com` + "`" + ` to the proxy.`,
							},
						},
						Description: `The configuration to forward requests to virtual clusters configured with SNI routing.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("port_mapping"),
							}...),
						},
					},
				},
				Description: `The configuration of the policy.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Optional:    true,
				Description: `A human-readable description of the policy.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(512),
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the policy is enabled. Default: true`,
			},
			"event_gateway_listener_id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the Event Gateway Listener.`,
			},
			"gateway_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your Gateway.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique identifier of the policy.`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"name": schema.StringAttribute{
				Optional:    true,
				Description: `A unique user-defined name of the policy.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 255),
				},
			},
			"parent_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique identifier of the parent policy, if any.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity update date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayListenerPolicies.CreateEventGatewayListenerPolicyForwardToVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayListenerPolicies.GetEventGatewayListenerPolicyForwardToVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayListenerPolicies.UpdateEventGatewayListenerPolicyForwardToVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EventGatewayPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEventGatewayPolicy(ctx, res.EventGatewayPolicy)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayListenerPolicies.DeleteEventGatewayListenerPolicyForwardToVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		EventGatewayListenerID string `json:"event_gateway_listener_id"`
		GatewayID              string `json:"gateway_id"`
		ID                     string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"event_gateway_listener_id": "", "gateway_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "9524ec7d-36d9-465d-a8c5-83a3c9390458"}': `+err.Error())
		return
	}

	if len(data.EventGatewayListenerID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field event_gateway_listener_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("event_gateway_listener_id"), data.EventGatewayListenerID)...)
	if len(data.GatewayID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field gateway_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("gateway_id"), data.GatewayID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
