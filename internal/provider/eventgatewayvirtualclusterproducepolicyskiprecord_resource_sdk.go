// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) ToOperationsCreateEventGatewayVirtualClusterProducePolicySkipRecordRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterProducePolicySkipRecordRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewaySkipRecordPolicy, eventGatewaySkipRecordPolicyDiags := r.ToSharedEventGatewaySkipRecordPolicy(ctx)
	diags.Append(eventGatewaySkipRecordPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterProducePolicySkipRecordRequest{
		GatewayID:                    gatewayID,
		VirtualClusterID:             virtualClusterID,
		ParentPolicyID:               parentPolicyID,
		EventGatewaySkipRecordPolicy: eventGatewaySkipRecordPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) ToOperationsDeleteEventGatewayVirtualClusterProducePolicySkipRecordRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterProducePolicySkipRecordRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterProducePolicySkipRecordRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) ToOperationsGetEventGatewayVirtualClusterProducePolicySkipRecordRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterProducePolicySkipRecordRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterProducePolicySkipRecordRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) ToOperationsUpdateEventGatewayVirtualClusterProducePolicySkipRecordRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterProducePolicySkipRecordRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewaySkipRecordPolicy, eventGatewaySkipRecordPolicyDiags := r.ToSharedEventGatewaySkipRecordPolicy(ctx)
	diags.Append(eventGatewaySkipRecordPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterProducePolicySkipRecordRequest{
		GatewayID:                    gatewayID,
		VirtualClusterID:             virtualClusterID,
		PolicyID:                     policyID,
		EventGatewaySkipRecordPolicy: eventGatewaySkipRecordPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySkipRecordResourceModel) ToSharedEventGatewaySkipRecordPolicy(ctx context.Context) (*shared.EventGatewaySkipRecordPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewaySkipRecordPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Labels:      labels,
	}

	return &out, diags
}
