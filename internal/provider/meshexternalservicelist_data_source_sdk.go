// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshExternalServiceListDataSourceModel) ToOperationsGetMeshExternalServiceListRequest(ctx context.Context) (*operations.GetMeshExternalServiceListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshExternalServiceListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}

func (r *MeshExternalServiceListDataSourceModel) RefreshFromSharedMeshExternalServiceList(ctx context.Context, resp *shared.MeshExternalServiceList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshExternalServiceItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshExternalServiceItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			items.Spec.Endpoints = []tfTypes.Endpoints{}
			for endpointsCount, endpointsItem := range itemsItem.Spec.Endpoints {
				var endpoints tfTypes.Endpoints
				endpoints.Address = types.StringValue(endpointsItem.Address)
				endpoints.Port = types.Int64Value(endpointsItem.Port)
				if endpointsCount+1 > len(items.Spec.Endpoints) {
					items.Spec.Endpoints = append(items.Spec.Endpoints, endpoints)
				} else {
					items.Spec.Endpoints[endpointsCount].Address = endpoints.Address
					items.Spec.Endpoints[endpointsCount].Port = endpoints.Port
				}
			}
			if itemsItem.Spec.Extension == nil {
				items.Spec.Extension = nil
			} else {
				items.Spec.Extension = &tfTypes.MeshExternalServiceItemExtension{}
				if itemsItem.Spec.Extension.Config == nil {
					items.Spec.Extension.Config = types.StringNull()
				} else {
					configResult, _ := json.Marshal(itemsItem.Spec.Extension.Config)
					items.Spec.Extension.Config = types.StringValue(string(configResult))
				}
				items.Spec.Extension.Type = types.StringValue(itemsItem.Spec.Extension.Type)
			}
			items.Spec.Match.Port = types.Int64Value(itemsItem.Spec.Match.Port)
			if itemsItem.Spec.Match.Protocol != nil {
				items.Spec.Match.Protocol = types.StringValue(string(*itemsItem.Spec.Match.Protocol))
			} else {
				items.Spec.Match.Protocol = types.StringNull()
			}
			if itemsItem.Spec.Match.Type != nil {
				items.Spec.Match.Type = types.StringValue(string(*itemsItem.Spec.Match.Type))
			} else {
				items.Spec.Match.Type = types.StringNull()
			}
			if itemsItem.Spec.TLS == nil {
				items.Spec.TLS = nil
			} else {
				items.Spec.TLS = &tfTypes.TLS{}
				items.Spec.TLS.AllowRenegotiation = types.BoolPointerValue(itemsItem.Spec.TLS.AllowRenegotiation)
				items.Spec.TLS.Enabled = types.BoolPointerValue(itemsItem.Spec.TLS.Enabled)
				if itemsItem.Spec.TLS.Verification == nil {
					items.Spec.TLS.Verification = nil
				} else {
					items.Spec.TLS.Verification = &tfTypes.Verification{}
					if itemsItem.Spec.TLS.Verification.CaCert == nil {
						items.Spec.TLS.Verification.CaCert = nil
					} else {
						items.Spec.TLS.Verification.CaCert = &tfTypes.CaCert{}
						items.Spec.TLS.Verification.CaCert.Inline = types.StringPointerValue(itemsItem.Spec.TLS.Verification.CaCert.Inline)
						items.Spec.TLS.Verification.CaCert.InlineString = types.StringPointerValue(itemsItem.Spec.TLS.Verification.CaCert.InlineString)
						items.Spec.TLS.Verification.CaCert.Secret = types.StringPointerValue(itemsItem.Spec.TLS.Verification.CaCert.Secret)
					}
					if itemsItem.Spec.TLS.Verification.ClientCert == nil {
						items.Spec.TLS.Verification.ClientCert = nil
					} else {
						items.Spec.TLS.Verification.ClientCert = &tfTypes.CaCert{}
						items.Spec.TLS.Verification.ClientCert.Inline = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientCert.Inline)
						items.Spec.TLS.Verification.ClientCert.InlineString = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientCert.InlineString)
						items.Spec.TLS.Verification.ClientCert.Secret = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientCert.Secret)
					}
					if itemsItem.Spec.TLS.Verification.ClientKey == nil {
						items.Spec.TLS.Verification.ClientKey = nil
					} else {
						items.Spec.TLS.Verification.ClientKey = &tfTypes.CaCert{}
						items.Spec.TLS.Verification.ClientKey.Inline = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientKey.Inline)
						items.Spec.TLS.Verification.ClientKey.InlineString = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientKey.InlineString)
						items.Spec.TLS.Verification.ClientKey.Secret = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ClientKey.Secret)
					}
					if itemsItem.Spec.TLS.Verification.Mode != nil {
						items.Spec.TLS.Verification.Mode = types.StringValue(string(*itemsItem.Spec.TLS.Verification.Mode))
					} else {
						items.Spec.TLS.Verification.Mode = types.StringNull()
					}
					items.Spec.TLS.Verification.ServerName = types.StringPointerValue(itemsItem.Spec.TLS.Verification.ServerName)
					items.Spec.TLS.Verification.SubjectAltNames = []tfTypes.SubjectAltNames{}
					for subjectAltNamesCount, subjectAltNamesItem := range itemsItem.Spec.TLS.Verification.SubjectAltNames {
						var subjectAltNames tfTypes.SubjectAltNames
						if subjectAltNamesItem.Type != nil {
							subjectAltNames.Type = types.StringValue(string(*subjectAltNamesItem.Type))
						} else {
							subjectAltNames.Type = types.StringNull()
						}
						subjectAltNames.Value = types.StringValue(subjectAltNamesItem.Value)
						if subjectAltNamesCount+1 > len(items.Spec.TLS.Verification.SubjectAltNames) {
							items.Spec.TLS.Verification.SubjectAltNames = append(items.Spec.TLS.Verification.SubjectAltNames, subjectAltNames)
						} else {
							items.Spec.TLS.Verification.SubjectAltNames[subjectAltNamesCount].Type = subjectAltNames.Type
							items.Spec.TLS.Verification.SubjectAltNames[subjectAltNamesCount].Value = subjectAltNames.Value
						}
					}
				}
				if itemsItem.Spec.TLS.Version == nil {
					items.Spec.TLS.Version = nil
				} else {
					items.Spec.TLS.Version = &tfTypes.Version{}
					if itemsItem.Spec.TLS.Version.Max != nil {
						items.Spec.TLS.Version.Max = types.StringValue(string(*itemsItem.Spec.TLS.Version.Max))
					} else {
						items.Spec.TLS.Version.Max = types.StringNull()
					}
					if itemsItem.Spec.TLS.Version.Min != nil {
						items.Spec.TLS.Version.Min = types.StringValue(string(*itemsItem.Spec.TLS.Version.Min))
					} else {
						items.Spec.TLS.Version.Min = types.StringNull()
					}
				}
			}
			if itemsItem.Status == nil {
				items.Status = nil
			} else {
				items.Status = &tfTypes.Status{}
				items.Status.Addresses = []tfTypes.Addresses{}
				for addressesCount, addressesItem := range itemsItem.Status.Addresses {
					var addresses tfTypes.Addresses
					addresses.Hostname = types.StringPointerValue(addressesItem.Hostname)
					if addressesItem.HostnameGeneratorRef == nil {
						addresses.HostnameGeneratorRef = nil
					} else {
						addresses.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
						addresses.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
					}
					addresses.Origin = types.StringPointerValue(addressesItem.Origin)
					if addressesCount+1 > len(items.Status.Addresses) {
						items.Status.Addresses = append(items.Status.Addresses, addresses)
					} else {
						items.Status.Addresses[addressesCount].Hostname = addresses.Hostname
						items.Status.Addresses[addressesCount].HostnameGeneratorRef = addresses.HostnameGeneratorRef
						items.Status.Addresses[addressesCount].Origin = addresses.Origin
					}
				}
				items.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}
				for hostnameGeneratorsCount, hostnameGeneratorsItem := range itemsItem.Status.HostnameGenerators {
					var hostnameGenerators tfTypes.HostnameGenerators
					hostnameGenerators.Conditions = []tfTypes.Conditions{}
					for conditionsCount, conditionsItem := range hostnameGeneratorsItem.Conditions {
						var conditions tfTypes.Conditions
						conditions.Message = types.StringValue(conditionsItem.Message)
						conditions.Reason = types.StringValue(conditionsItem.Reason)
						conditions.Status = types.StringValue(string(conditionsItem.Status))
						conditions.Type = types.StringValue(conditionsItem.Type)
						if conditionsCount+1 > len(hostnameGenerators.Conditions) {
							hostnameGenerators.Conditions = append(hostnameGenerators.Conditions, conditions)
						} else {
							hostnameGenerators.Conditions[conditionsCount].Message = conditions.Message
							hostnameGenerators.Conditions[conditionsCount].Reason = conditions.Reason
							hostnameGenerators.Conditions[conditionsCount].Status = conditions.Status
							hostnameGenerators.Conditions[conditionsCount].Type = conditions.Type
						}
					}
					hostnameGenerators.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)
					if hostnameGeneratorsCount+1 > len(items.Status.HostnameGenerators) {
						items.Status.HostnameGenerators = append(items.Status.HostnameGenerators, hostnameGenerators)
					} else {
						items.Status.HostnameGenerators[hostnameGeneratorsCount].Conditions = hostnameGenerators.Conditions
						items.Status.HostnameGenerators[hostnameGeneratorsCount].HostnameGeneratorRef = hostnameGenerators.HostnameGeneratorRef
					}
				}
				if itemsItem.Status.Vip == nil {
					items.Status.Vip = nil
				} else {
					items.Status.Vip = &tfTypes.Vip{}
					items.Status.Vip.IP = types.StringPointerValue(itemsItem.Status.Vip.IP)
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Status = items.Status
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}
