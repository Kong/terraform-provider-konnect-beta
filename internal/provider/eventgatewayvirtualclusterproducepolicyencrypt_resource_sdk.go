// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		if r.Config == nil {
			configPriorData := r.Config
			r.Config = &tfTypes.EventGatewayEncryptPolicyConfig{}

			if configPriorData != nil {
				r.Config.Encrypt = configPriorData.Encrypt
			}
			if configPriorData != nil {
				r.Config.FailureMode = configPriorData.FailureMode
			}
			if configPriorData != nil {
				r.Config.KeySources = configPriorData.KeySources
			}
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) ToOperationsCreateEventGatewayVirtualClusterProducePolicyEncryptRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterProducePolicyEncryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayEncryptPolicy, eventGatewayEncryptPolicyDiags := r.ToSharedEventGatewayEncryptPolicy(ctx)
	diags.Append(eventGatewayEncryptPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterProducePolicyEncryptRequest{
		GatewayID:                 gatewayID,
		VirtualClusterID:          virtualClusterID,
		ParentPolicyID:            parentPolicyID,
		EventGatewayEncryptPolicy: eventGatewayEncryptPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) ToOperationsDeleteEventGatewayVirtualClusterProducePolicyEncryptRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterProducePolicyEncryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterProducePolicyEncryptRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) ToOperationsGetEventGatewayVirtualClusterProducePolicyEncryptRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterProducePolicyEncryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterProducePolicyEncryptRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) ToOperationsUpdateEventGatewayVirtualClusterProducePolicyEncryptRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterProducePolicyEncryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayEncryptPolicy, eventGatewayEncryptPolicyDiags := r.ToSharedEventGatewayEncryptPolicy(ctx)
	diags.Append(eventGatewayEncryptPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterProducePolicyEncryptRequest{
		GatewayID:                 gatewayID,
		VirtualClusterID:          virtualClusterID,
		PolicyID:                  policyID,
		EventGatewayEncryptPolicy: eventGatewayEncryptPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicyEncryptResourceModel) ToSharedEventGatewayEncryptPolicy(ctx context.Context) (*shared.EventGatewayEncryptPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	var config *shared.EventGatewayEncryptPolicyConfig
	if r.Config != nil {
		failureMode := shared.EncryptionFailureMode(r.Config.FailureMode.ValueString())
		keySources := make([]shared.EventGatewayKeySource, 0, len(r.Config.KeySources))
		for _, keySourcesItem := range r.Config.KeySources {
			if keySourcesItem.Aws != nil {
				eventGatewayAWSKeySource := shared.EventGatewayAWSKeySource{}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayAWSKeySource: &eventGatewayAWSKeySource,
				})
			}
			if keySourcesItem.Static != nil {
				keys := make([]shared.Keys, 0, len(keySourcesItem.Static.Keys))
				for _, keysItem := range keySourcesItem.Static.Keys {
					var id string
					id = keysItem.ID.ValueString()

					var key string
					key = keysItem.Key.ValueString()

					keys = append(keys, shared.Keys{
						ID:  id,
						Key: key,
					})
				}
				eventGatewayStaticKeySource := shared.EventGatewayStaticKeySource{
					Keys: keys,
				}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayStaticKeySource: &eventGatewayStaticKeySource,
				})
			}
		}
		encrypt := make([]shared.EncryptionRecordSelector, 0, len(r.Config.Encrypt))
		for _, encryptItem := range r.Config.Encrypt {
			partOfRecord := shared.EncryptionRecordSelectorPartOfRecord(encryptItem.PartOfRecord.ValueString())
			var keyID string
			keyID = encryptItem.KeyID.ValueString()

			encrypt = append(encrypt, shared.EncryptionRecordSelector{
				PartOfRecord: partOfRecord,
				KeyID:        keyID,
			})
		}
		config = &shared.EventGatewayEncryptPolicyConfig{
			FailureMode: failureMode,
			KeySources:  keySources,
			Encrypt:     encrypt,
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewayEncryptPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
