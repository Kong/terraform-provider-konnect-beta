// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *PortalSnippetResourceModel) ToSharedCreatePortalSnippetRequest() *shared.CreatePortalSnippetRequest {
	var name string
	name = r.Name.ValueString()

	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	var content string
	content = r.Content.ValueString()

	visibility := new(string)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = r.Visibility.ValueString()
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.CreatePortalSnippetRequest{
		Name:        name,
		Title:       title,
		Content:     content,
		Visibility:  visibility,
		Status:      status,
		Description: description,
	}
	return &out
}

func (r *PortalSnippetResourceModel) RefreshFromSharedPortalSnippetResponse(resp *shared.PortalSnippetResponse) {
	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.Status = types.StringValue(string(resp.Status))
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		r.Visibility = types.StringValue(string(resp.Visibility))
	}
}

func (r *PortalSnippetResourceModel) ToSharedUpdatePortalSnippetRequest() *shared.UpdatePortalSnippetRequest {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	visibility := new(shared.VisibilityStatus)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.VisibilityStatus(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.UpdatePortalSnippetRequest{
		Name:        name,
		Title:       title,
		Content:     content,
		Visibility:  visibility,
		Status:      status,
		Description: description,
	}
	return &out
}
