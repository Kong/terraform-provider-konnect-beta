// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &APIImplementationDataSource{}
var _ datasource.DataSourceWithConfigure = &APIImplementationDataSource{}

func NewAPIImplementationDataSource() datasource.DataSource {
	return &APIImplementationDataSource{}
}

// APIImplementationDataSource is the data source implementation.
type APIImplementationDataSource struct {
	client *sdk.KonnectBeta
}

// APIImplementationDataSourceModel describes the data model.
type APIImplementationDataSourceModel struct {
	APIID     types.String                      `tfsdk:"api_id"`
	CreatedAt types.String                      `tfsdk:"created_at"`
	ID        types.String                      `tfsdk:"id"`
	Service   *tfTypes.APIImplementationService `tfsdk:"service"`
	UpdatedAt types.String                      `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *APIImplementationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_api_implementation"
}

// Schema defines the schema for the data source.
func (r *APIImplementationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "APIImplementation DataSource",

		Attributes: map[string]schema.Attribute{
			"api_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID API identifier`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Contains a unique identifier used for this resource.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auth_strategy_sync_error": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"control_plane_error": schema.StringAttribute{
								Computed: true,
							},
							"info": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"details": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"additional_properties": schema.StringAttribute{
													Computed:    true,
													Description: `Parsed as JSON.`,
												},
												"message": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"control_plane_id": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A Gateway service that implements an API`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
		},
	}
}

func (r *APIImplementationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *APIImplementationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *APIImplementationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsFetchAPIImplementationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.APIImplementation.FetchAPIImplementation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIImplementationResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAPIImplementationResponse(ctx, res.APIImplementationResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
