// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &APIPublicationDataSource{}
var _ datasource.DataSourceWithConfigure = &APIPublicationDataSource{}

func NewAPIPublicationDataSource() datasource.DataSource {
	return &APIPublicationDataSource{}
}

// APIPublicationDataSource is the data source implementation.
type APIPublicationDataSource struct {
	client *sdk.KonnectBeta
}

// APIPublicationDataSourceModel describes the data model.
type APIPublicationDataSourceModel struct {
	APIID                    types.String   `tfsdk:"api_id"`
	AuthStrategyIds          []types.String `tfsdk:"auth_strategy_ids"`
	AutoApproveRegistrations types.Bool     `tfsdk:"auto_approve_registrations"`
	CreatedAt                types.String   `tfsdk:"created_at"`
	PortalID                 types.String   `tfsdk:"portal_id"`
	UpdatedAt                types.String   `tfsdk:"updated_at"`
	Visibility               types.String   `tfsdk:"visibility"`
}

// Metadata returns the data source type name.
func (r *APIPublicationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_api_publication"
}

// Schema defines the schema for the data source.
func (r *APIPublicationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "APIPublication DataSource",

		Attributes: map[string]schema.Attribute{
			"api_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID API identifier`,
			},
			"auth_strategy_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `The auth strategy the API enforces for applications in the portal.` + "\n" +
					`Omitting this property means the portal's default application auth strategy will be used.` + "\n" +
					`Setting to null means the API will not require application authentication.` + "\n" +
					`DCR support for application registration is currently in development.`,
			},
			"auto_approve_registrations": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the application registration auto approval on this portal for the api is enabled. If set to false, fallbacks on portal's auto_approve_applications value.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"portal_id": schema.StringAttribute{
				Required:    true,
				Description: `The Portal identifier`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
			"visibility": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `The visibility of the API in the portal.` + "\n" +
					`Public API publications do not require authentication to view and retrieve information about them.` + "\n" +
					`Private API publications require authentication to retrieve information about them.`,
			},
		},
	}
}

func (r *APIPublicationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *APIPublicationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *APIPublicationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsFetchPublicationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.APIPublication.FetchPublication(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIPublicationResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAPIPublicationResponse(ctx, res.APIPublicationResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
