// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshHTTPRouteListDataSourceModel) ToOperationsGetMeshHTTPRouteListRequest(ctx context.Context) (*operations.GetMeshHTTPRouteListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshHTTPRouteListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}

func (r *MeshHTTPRouteListDataSourceModel) RefreshFromSharedMeshHTTPRouteList(ctx context.Context, resp *shared.MeshHTTPRouteList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshHTTPRouteItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshHTTPRouteItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			if len(itemsItem.Labels) > 0 {
				items.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key, value := range itemsItem.Labels {
					items.Labels[key] = types.StringValue(value)
				}
			}
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key1, value1 := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key2, value2 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
					}
				}
			}
			items.Spec.To = []tfTypes.MeshHTTPRouteItemTo{}
			for toCount, toItem := range itemsItem.Spec.To {
				var to tfTypes.MeshHTTPRouteItemTo
				to.Hostnames = make([]types.String, 0, len(toItem.Hostnames))
				for _, v := range toItem.Hostnames {
					to.Hostnames = append(to.Hostnames, types.StringValue(v))
				}
				to.Rules = []tfTypes.MeshHTTPRouteItemRules{}
				for rulesCount, rulesItem := range toItem.Rules {
					var rules tfTypes.MeshHTTPRouteItemRules
					rules.Default.BackendRefs = []tfTypes.BackendRefs{}
					for backendRefsCount, backendRefsItem := range rulesItem.Default.BackendRefs {
						var backendRefs tfTypes.BackendRefs
						backendRefs.Kind = types.StringValue(string(backendRefsItem.Kind))
						if len(backendRefsItem.Labels) > 0 {
							backendRefs.Labels = make(map[string]types.String, len(backendRefsItem.Labels))
							for key3, value3 := range backendRefsItem.Labels {
								backendRefs.Labels[key3] = types.StringValue(value3)
							}
						}
						backendRefs.Mesh = types.StringPointerValue(backendRefsItem.Mesh)
						backendRefs.Name = types.StringPointerValue(backendRefsItem.Name)
						backendRefs.Namespace = types.StringPointerValue(backendRefsItem.Namespace)
						backendRefs.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(backendRefsItem.Port))
						backendRefs.ProxyTypes = make([]types.String, 0, len(backendRefsItem.ProxyTypes))
						for _, v := range backendRefsItem.ProxyTypes {
							backendRefs.ProxyTypes = append(backendRefs.ProxyTypes, types.StringValue(string(v)))
						}
						backendRefs.SectionName = types.StringPointerValue(backendRefsItem.SectionName)
						if len(backendRefsItem.Tags) > 0 {
							backendRefs.Tags = make(map[string]types.String, len(backendRefsItem.Tags))
							for key4, value4 := range backendRefsItem.Tags {
								backendRefs.Tags[key4] = types.StringValue(value4)
							}
						}
						backendRefs.Weight = types.Int64PointerValue(backendRefsItem.Weight)
						if backendRefsCount+1 > len(rules.Default.BackendRefs) {
							rules.Default.BackendRefs = append(rules.Default.BackendRefs, backendRefs)
						} else {
							rules.Default.BackendRefs[backendRefsCount].Kind = backendRefs.Kind
							rules.Default.BackendRefs[backendRefsCount].Labels = backendRefs.Labels
							rules.Default.BackendRefs[backendRefsCount].Mesh = backendRefs.Mesh
							rules.Default.BackendRefs[backendRefsCount].Name = backendRefs.Name
							rules.Default.BackendRefs[backendRefsCount].Namespace = backendRefs.Namespace
							rules.Default.BackendRefs[backendRefsCount].Port = backendRefs.Port
							rules.Default.BackendRefs[backendRefsCount].ProxyTypes = backendRefs.ProxyTypes
							rules.Default.BackendRefs[backendRefsCount].SectionName = backendRefs.SectionName
							rules.Default.BackendRefs[backendRefsCount].Tags = backendRefs.Tags
							rules.Default.BackendRefs[backendRefsCount].Weight = backendRefs.Weight
						}
					}
					rules.Default.Filters = []tfTypes.Filters{}
					for filtersCount, filtersItem := range rulesItem.Default.Filters {
						var filters tfTypes.Filters
						if filtersItem.RequestHeaderModifier == nil {
							filters.RequestHeaderModifier = nil
						} else {
							filters.RequestHeaderModifier = &tfTypes.RequestHeaderModifier{}
							filters.RequestHeaderModifier.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
							for addCount, addItem := range filtersItem.RequestHeaderModifier.Add {
								var add tfTypes.MeshGlobalRateLimitItemAdd
								add.Name = types.StringValue(addItem.Name)
								add.Value = types.StringValue(addItem.Value)
								if addCount+1 > len(filters.RequestHeaderModifier.Add) {
									filters.RequestHeaderModifier.Add = append(filters.RequestHeaderModifier.Add, add)
								} else {
									filters.RequestHeaderModifier.Add[addCount].Name = add.Name
									filters.RequestHeaderModifier.Add[addCount].Value = add.Value
								}
							}
							filters.RequestHeaderModifier.Remove = make([]types.String, 0, len(filtersItem.RequestHeaderModifier.Remove))
							for _, v := range filtersItem.RequestHeaderModifier.Remove {
								filters.RequestHeaderModifier.Remove = append(filters.RequestHeaderModifier.Remove, types.StringValue(v))
							}
							filters.RequestHeaderModifier.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
							for setCount, setItem := range filtersItem.RequestHeaderModifier.Set {
								var set tfTypes.MeshGlobalRateLimitItemAdd
								set.Name = types.StringValue(setItem.Name)
								set.Value = types.StringValue(setItem.Value)
								if setCount+1 > len(filters.RequestHeaderModifier.Set) {
									filters.RequestHeaderModifier.Set = append(filters.RequestHeaderModifier.Set, set)
								} else {
									filters.RequestHeaderModifier.Set[setCount].Name = set.Name
									filters.RequestHeaderModifier.Set[setCount].Value = set.Value
								}
							}
						}
						if filtersItem.RequestMirror == nil {
							filters.RequestMirror = nil
						} else {
							filters.RequestMirror = &tfTypes.RequestMirror{}
							filters.RequestMirror.BackendRef.Kind = types.StringValue(string(filtersItem.RequestMirror.BackendRef.Kind))
							if len(filtersItem.RequestMirror.BackendRef.Labels) > 0 {
								filters.RequestMirror.BackendRef.Labels = make(map[string]types.String, len(filtersItem.RequestMirror.BackendRef.Labels))
								for key5, value5 := range filtersItem.RequestMirror.BackendRef.Labels {
									filters.RequestMirror.BackendRef.Labels[key5] = types.StringValue(value5)
								}
							}
							filters.RequestMirror.BackendRef.Mesh = types.StringPointerValue(filtersItem.RequestMirror.BackendRef.Mesh)
							filters.RequestMirror.BackendRef.Name = types.StringPointerValue(filtersItem.RequestMirror.BackendRef.Name)
							filters.RequestMirror.BackendRef.Namespace = types.StringPointerValue(filtersItem.RequestMirror.BackendRef.Namespace)
							filters.RequestMirror.BackendRef.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(filtersItem.RequestMirror.BackendRef.Port))
							filters.RequestMirror.BackendRef.ProxyTypes = make([]types.String, 0, len(filtersItem.RequestMirror.BackendRef.ProxyTypes))
							for _, v := range filtersItem.RequestMirror.BackendRef.ProxyTypes {
								filters.RequestMirror.BackendRef.ProxyTypes = append(filters.RequestMirror.BackendRef.ProxyTypes, types.StringValue(string(v)))
							}
							filters.RequestMirror.BackendRef.SectionName = types.StringPointerValue(filtersItem.RequestMirror.BackendRef.SectionName)
							if len(filtersItem.RequestMirror.BackendRef.Tags) > 0 {
								filters.RequestMirror.BackendRef.Tags = make(map[string]types.String, len(filtersItem.RequestMirror.BackendRef.Tags))
								for key6, value6 := range filtersItem.RequestMirror.BackendRef.Tags {
									filters.RequestMirror.BackendRef.Tags[key6] = types.StringValue(value6)
								}
							}
							filters.RequestMirror.BackendRef.Weight = types.Int64PointerValue(filtersItem.RequestMirror.BackendRef.Weight)
							if filtersItem.RequestMirror.Percentage != nil {
								filters.RequestMirror.Percentage = &tfTypes.MeshItemMode{}
								if filtersItem.RequestMirror.Percentage.Integer != nil {
									filters.RequestMirror.Percentage.Integer = types.Int64PointerValue(filtersItem.RequestMirror.Percentage.Integer)
								}
								if filtersItem.RequestMirror.Percentage.Str != nil {
									filters.RequestMirror.Percentage.Str = types.StringPointerValue(filtersItem.RequestMirror.Percentage.Str)
								}
							}
						}
						if filtersItem.RequestRedirect == nil {
							filters.RequestRedirect = nil
						} else {
							filters.RequestRedirect = &tfTypes.RequestRedirect{}
							filters.RequestRedirect.Hostname = types.StringPointerValue(filtersItem.RequestRedirect.Hostname)
							if filtersItem.RequestRedirect.Path == nil {
								filters.RequestRedirect.Path = nil
							} else {
								filters.RequestRedirect.Path = &tfTypes.MeshHTTPRouteItemSpecPath{}
								filters.RequestRedirect.Path.ReplaceFullPath = types.StringPointerValue(filtersItem.RequestRedirect.Path.ReplaceFullPath)
								filters.RequestRedirect.Path.ReplacePrefixMatch = types.StringPointerValue(filtersItem.RequestRedirect.Path.ReplacePrefixMatch)
								filters.RequestRedirect.Path.Type = types.StringValue(string(filtersItem.RequestRedirect.Path.Type))
							}
							filters.RequestRedirect.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(filtersItem.RequestRedirect.Port))
							if filtersItem.RequestRedirect.Scheme != nil {
								filters.RequestRedirect.Scheme = types.StringValue(string(*filtersItem.RequestRedirect.Scheme))
							} else {
								filters.RequestRedirect.Scheme = types.StringNull()
							}
							if filtersItem.RequestRedirect.StatusCode != nil {
								filters.RequestRedirect.StatusCode = types.Int64Value(int64(*filtersItem.RequestRedirect.StatusCode))
							} else {
								filters.RequestRedirect.StatusCode = types.Int64Null()
							}
						}
						if filtersItem.ResponseHeaderModifier == nil {
							filters.ResponseHeaderModifier = nil
						} else {
							filters.ResponseHeaderModifier = &tfTypes.RequestHeaderModifier{}
							filters.ResponseHeaderModifier.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
							for addCount1, addItem1 := range filtersItem.ResponseHeaderModifier.Add {
								var add1 tfTypes.MeshGlobalRateLimitItemAdd
								add1.Name = types.StringValue(addItem1.Name)
								add1.Value = types.StringValue(addItem1.Value)
								if addCount1+1 > len(filters.ResponseHeaderModifier.Add) {
									filters.ResponseHeaderModifier.Add = append(filters.ResponseHeaderModifier.Add, add1)
								} else {
									filters.ResponseHeaderModifier.Add[addCount1].Name = add1.Name
									filters.ResponseHeaderModifier.Add[addCount1].Value = add1.Value
								}
							}
							filters.ResponseHeaderModifier.Remove = make([]types.String, 0, len(filtersItem.ResponseHeaderModifier.Remove))
							for _, v := range filtersItem.ResponseHeaderModifier.Remove {
								filters.ResponseHeaderModifier.Remove = append(filters.ResponseHeaderModifier.Remove, types.StringValue(v))
							}
							filters.ResponseHeaderModifier.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
							for setCount1, setItem1 := range filtersItem.ResponseHeaderModifier.Set {
								var set1 tfTypes.MeshGlobalRateLimitItemAdd
								set1.Name = types.StringValue(setItem1.Name)
								set1.Value = types.StringValue(setItem1.Value)
								if setCount1+1 > len(filters.ResponseHeaderModifier.Set) {
									filters.ResponseHeaderModifier.Set = append(filters.ResponseHeaderModifier.Set, set1)
								} else {
									filters.ResponseHeaderModifier.Set[setCount1].Name = set1.Name
									filters.ResponseHeaderModifier.Set[setCount1].Value = set1.Value
								}
							}
						}
						filters.Type = types.StringValue(string(filtersItem.Type))
						if filtersItem.URLRewrite == nil {
							filters.URLRewrite = nil
						} else {
							filters.URLRewrite = &tfTypes.URLRewrite{}
							filters.URLRewrite.Hostname = types.StringPointerValue(filtersItem.URLRewrite.Hostname)
							filters.URLRewrite.HostToBackendHostname = types.BoolPointerValue(filtersItem.URLRewrite.HostToBackendHostname)
							if filtersItem.URLRewrite.Path == nil {
								filters.URLRewrite.Path = nil
							} else {
								filters.URLRewrite.Path = &tfTypes.MeshHTTPRouteItemSpecPath{}
								filters.URLRewrite.Path.ReplaceFullPath = types.StringPointerValue(filtersItem.URLRewrite.Path.ReplaceFullPath)
								filters.URLRewrite.Path.ReplacePrefixMatch = types.StringPointerValue(filtersItem.URLRewrite.Path.ReplacePrefixMatch)
								filters.URLRewrite.Path.Type = types.StringValue(string(filtersItem.URLRewrite.Path.Type))
							}
						}
						if filtersCount+1 > len(rules.Default.Filters) {
							rules.Default.Filters = append(rules.Default.Filters, filters)
						} else {
							rules.Default.Filters[filtersCount].RequestHeaderModifier = filters.RequestHeaderModifier
							rules.Default.Filters[filtersCount].RequestMirror = filters.RequestMirror
							rules.Default.Filters[filtersCount].RequestRedirect = filters.RequestRedirect
							rules.Default.Filters[filtersCount].ResponseHeaderModifier = filters.ResponseHeaderModifier
							rules.Default.Filters[filtersCount].Type = filters.Type
							rules.Default.Filters[filtersCount].URLRewrite = filters.URLRewrite
						}
					}
					rules.Matches = []tfTypes.Matches{}
					for matchesCount, matchesItem := range rulesItem.Matches {
						var matches tfTypes.Matches
						matches.Headers = []tfTypes.Headers{}
						for headersCount, headersItem := range matchesItem.Headers {
							var headers tfTypes.Headers
							headers.Name = types.StringValue(headersItem.Name)
							if headersItem.Type != nil {
								headers.Type = types.StringValue(string(*headersItem.Type))
							} else {
								headers.Type = types.StringNull()
							}
							headers.Value = types.StringPointerValue(headersItem.Value)
							if headersCount+1 > len(matches.Headers) {
								matches.Headers = append(matches.Headers, headers)
							} else {
								matches.Headers[headersCount].Name = headers.Name
								matches.Headers[headersCount].Type = headers.Type
								matches.Headers[headersCount].Value = headers.Value
							}
						}
						if matchesItem.Method != nil {
							matches.Method = types.StringValue(string(*matchesItem.Method))
						} else {
							matches.Method = types.StringNull()
						}
						if matchesItem.Path == nil {
							matches.Path = nil
						} else {
							matches.Path = &tfTypes.Path{}
							matches.Path.Type = types.StringValue(string(matchesItem.Path.Type))
							matches.Path.Value = types.StringValue(matchesItem.Path.Value)
						}
						matches.QueryParams = []tfTypes.QueryParams{}
						for queryParamsCount, queryParamsItem := range matchesItem.QueryParams {
							var queryParams tfTypes.QueryParams
							queryParams.Name = types.StringValue(queryParamsItem.Name)
							queryParams.Type = types.StringValue(string(queryParamsItem.Type))
							queryParams.Value = types.StringValue(queryParamsItem.Value)
							if queryParamsCount+1 > len(matches.QueryParams) {
								matches.QueryParams = append(matches.QueryParams, queryParams)
							} else {
								matches.QueryParams[queryParamsCount].Name = queryParams.Name
								matches.QueryParams[queryParamsCount].Type = queryParams.Type
								matches.QueryParams[queryParamsCount].Value = queryParams.Value
							}
						}
						if matchesCount+1 > len(rules.Matches) {
							rules.Matches = append(rules.Matches, matches)
						} else {
							rules.Matches[matchesCount].Headers = matches.Headers
							rules.Matches[matchesCount].Method = matches.Method
							rules.Matches[matchesCount].Path = matches.Path
							rules.Matches[matchesCount].QueryParams = matches.QueryParams
						}
					}
					if rulesCount+1 > len(to.Rules) {
						to.Rules = append(to.Rules, rules)
					} else {
						to.Rules[rulesCount].Default = rules.Default
						to.Rules[rulesCount].Matches = rules.Matches
					}
				}
				to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
				if len(toItem.TargetRef.Labels) > 0 {
					to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
					for key7, value7 := range toItem.TargetRef.Labels {
						to.TargetRef.Labels[key7] = types.StringValue(value7)
					}
				}
				to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
				to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
				to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
				to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
				for _, v := range toItem.TargetRef.ProxyTypes {
					to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
				if len(toItem.TargetRef.Tags) > 0 {
					to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
					for key8, value8 := range toItem.TargetRef.Tags {
						to.TargetRef.Tags[key8] = types.StringValue(value8)
					}
				}
				if toCount+1 > len(items.Spec.To) {
					items.Spec.To = append(items.Spec.To, to)
				} else {
					items.Spec.To[toCount].Hostnames = to.Hostnames
					items.Spec.To[toCount].Rules = to.Rules
					items.Spec.To[toCount].TargetRef = to.TargetRef
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}
