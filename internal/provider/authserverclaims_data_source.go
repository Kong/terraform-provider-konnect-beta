// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AuthServerClaimsDataSource{}
var _ datasource.DataSourceWithConfigure = &AuthServerClaimsDataSource{}

func NewAuthServerClaimsDataSource() datasource.DataSource {
	return &AuthServerClaimsDataSource{}
}

// AuthServerClaimsDataSource is the data source implementation.
type AuthServerClaimsDataSource struct {
	client *sdk.KonnectBeta
}

// AuthServerClaimsDataSourceModel describes the data model.
type AuthServerClaimsDataSourceModel struct {
	AuthServerID       types.String   `tfsdk:"auth_server_id"`
	CreatedAt          types.String   `tfsdk:"created_at"`
	Enabled            types.Bool     `tfsdk:"enabled"`
	ID                 types.String   `tfsdk:"id"`
	IncludeInAllScopes types.Bool     `tfsdk:"include_in_all_scopes"`
	IncludeInScopes    []types.String `tfsdk:"include_in_scopes"`
	IncludeInToken     types.Bool     `tfsdk:"include_in_token"`
	Name               types.String   `tfsdk:"name"`
	UpdatedAt          types.String   `tfsdk:"updated_at"`
	Value              types.String   `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *AuthServerClaimsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_auth_server_claims"
}

// Schema defines the schema for the data source.
func (r *AuthServerClaimsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AuthServerClaims DataSource",

		Attributes: map[string]schema.Attribute{
			"auth_server_id": schema.StringAttribute{
				Required:    true,
				Description: `The auth server ID`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Specifies whether the claim is enabled`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the claim`,
			},
			"include_in_all_scopes": schema.BoolAttribute{
				Computed:    true,
				Description: `Specifies whether to include the claim in all scopes. If the value is set to 'false' for a claim, the claim is only included in the scopes that explicitly list it.`,
			},
			"include_in_scopes": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Specifies the scopes IDs in which the claim is included`,
			},
			"include_in_token": schema.BoolAttribute{
				Computed:    true,
				Description: `Specifies whether to include claim in the token. If the value is set to 'false' for a claim, the client instead uses the access token to get claims from the '/userinfo' endpoint.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the claim`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
			"value": schema.StringAttribute{
				Computed:    true,
				Description: `Specifies the value of the claim. It may contain a static value or a dynamic (templated) value. Static values which are valid JSON will result in a JSON object in the token claims.`,
			},
		},
	}
}

func (r *AuthServerClaimsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AuthServerClaimsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AuthServerClaimsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAuthServerClaimRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Authserver.GetAuthServerClaim(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Claim != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedClaim(ctx, res.Claim)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
