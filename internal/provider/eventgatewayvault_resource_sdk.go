// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVaultResourceModel) RefreshFromSharedEventGatewayVault(ctx context.Context, resp *shared.EventGatewayVault) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsCreateEventGatewayVaultRequest(ctx context.Context) (*operations.CreateEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	eventGatewayModifyVault, eventGatewayModifyVaultDiags := r.ToSharedEventGatewayModifyVault(ctx)
	diags.Append(eventGatewayModifyVaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVaultRequest{
		GatewayID:               gatewayID,
		EventGatewayModifyVault: eventGatewayModifyVault,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsDeleteEventGatewayVaultRequest(ctx context.Context) (*operations.DeleteEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVaultRequest{
		GatewayID: gatewayID,
		VaultID:   vaultID,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsGetEventGatewayVaultRequest(ctx context.Context) (*operations.GetEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	out := operations.GetEventGatewayVaultRequest{
		GatewayID: gatewayID,
		VaultID:   vaultID,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsUpdateEventGatewayVaultRequest(ctx context.Context) (*operations.UpdateEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	eventGatewayModifyVault, eventGatewayModifyVaultDiags := r.ToSharedEventGatewayModifyVault(ctx)
	diags.Append(eventGatewayModifyVaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVaultRequest{
		GatewayID:               gatewayID,
		VaultID:                 vaultID,
		EventGatewayModifyVault: eventGatewayModifyVault,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToSharedEventGatewayModifyVault(ctx context.Context) (*shared.EventGatewayModifyVault, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayModifyVault
	var eventGatewayVaultEnv *shared.EventGatewayVaultEnv
	if r.Env != nil {
		var name string
		name = r.Env.Name.ValueString()

		description := new(string)
		if !r.Env.Description.IsUnknown() && !r.Env.Description.IsNull() {
			*description = r.Env.Description.ValueString()
		} else {
			description = nil
		}
		typeVar := shared.EventGatewayVaultEnvType(r.Env.Type.ValueString())
		var config *shared.Config
		if r.Env.Config != nil {
			prefix := new(string)
			if !r.Env.Config.Prefix.IsUnknown() && !r.Env.Config.Prefix.IsNull() {
				*prefix = r.Env.Config.Prefix.ValueString()
			} else {
				prefix = nil
			}
			config = &shared.Config{
				Prefix: prefix,
			}
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.Env.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		eventGatewayVaultEnv = &shared.EventGatewayVaultEnv{
			Name:        name,
			Description: description,
			Type:        typeVar,
			Config:      config,
			Labels:      labels,
		}
	}
	if eventGatewayVaultEnv != nil {
		out = shared.EventGatewayModifyVault{
			EventGatewayVaultEnv: eventGatewayVaultEnv,
		}
	}

	return &out, diags
}
