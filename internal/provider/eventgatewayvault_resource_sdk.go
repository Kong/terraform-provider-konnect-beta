// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVaultResourceModel) RefreshFromSharedEventGatewayVault(ctx context.Context, resp *shared.EventGatewayVault) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsCreateEventGatewayVaultRequest(ctx context.Context) (*operations.CreateEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	eventGatewayModifyVault, eventGatewayModifyVaultDiags := r.ToSharedEventGatewayModifyVault(ctx)
	diags.Append(eventGatewayModifyVaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVaultRequest{
		GatewayID:               gatewayID,
		EventGatewayModifyVault: eventGatewayModifyVault,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsDeleteEventGatewayVaultRequest(ctx context.Context) (*operations.DeleteEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVaultRequest{
		GatewayID: gatewayID,
		VaultID:   vaultID,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsGetEventGatewayVaultRequest(ctx context.Context) (*operations.GetEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	out := operations.GetEventGatewayVaultRequest{
		GatewayID: gatewayID,
		VaultID:   vaultID,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToOperationsUpdateEventGatewayVaultRequest(ctx context.Context) (*operations.UpdateEventGatewayVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	eventGatewayModifyVault, eventGatewayModifyVaultDiags := r.ToSharedEventGatewayModifyVault(ctx)
	diags.Append(eventGatewayModifyVaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVaultRequest{
		GatewayID:               gatewayID,
		VaultID:                 vaultID,
		EventGatewayModifyVault: eventGatewayModifyVault,
	}

	return &out, diags
}

func (r *EventGatewayVaultResourceModel) ToSharedEventGatewayModifyVault(ctx context.Context) (*shared.EventGatewayModifyVault, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayModifyVault
	var eventGatewayEnvVault *shared.EventGatewayEnvVault
	if r.Env != nil {
		var name string
		name = r.Env.Name.ValueString()

		description := new(string)
		if !r.Env.Description.IsUnknown() && !r.Env.Description.IsNull() {
			*description = r.Env.Description.ValueString()
		} else {
			description = nil
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.Env.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		var prefix string
		prefix = r.Env.Config.Prefix.ValueString()

		config := shared.Config{
			Prefix: prefix,
		}
		eventGatewayEnvVault = &shared.EventGatewayEnvVault{
			Name:        name,
			Description: description,
			Labels:      labels,
			Config:      config,
		}
	}
	if eventGatewayEnvVault != nil {
		out = shared.EventGatewayModifyVault{
			EventGatewayEnvVault: eventGatewayEnvVault,
		}
	}
	var eventGatewayKonnectVault *shared.EventGatewayKonnectVault
	if r.Konnect != nil {
		var name1 string
		name1 = r.Konnect.Name.ValueString()

		description1 := new(string)
		if !r.Konnect.Description.IsUnknown() && !r.Konnect.Description.IsNull() {
			*description1 = r.Konnect.Description.ValueString()
		} else {
			description1 = nil
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.Konnect.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		eventGatewayKonnectVault = &shared.EventGatewayKonnectVault{
			Name:        name1,
			Description: description1,
			Labels:      labels1,
		}
	}
	if eventGatewayKonnectVault != nil {
		out = shared.EventGatewayModifyVault{
			EventGatewayKonnectVault: eventGatewayKonnectVault,
		}
	}

	return &out, diags
}
