// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshMultiZoneServiceListDataSourceModel) RefreshFromSharedMeshMultiZoneServiceList(ctx context.Context, resp *shared.MeshMultiZoneServiceList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshMultiZoneServiceItem{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.MeshMultiZoneServiceItem

			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			items.Spec.Ports = []tfTypes.Ports{}

			for _, portsItem := range itemsItem.Spec.Ports {
				var ports tfTypes.Ports

				ports.AppProtocol = types.StringPointerValue(portsItem.AppProtocol)
				ports.Name = types.StringPointerValue(portsItem.Name)
				ports.Port = types.Int32Value(int32(portsItem.Port))

				items.Spec.Ports = append(items.Spec.Ports, ports)
			}
			if len(itemsItem.Spec.Selector.MeshService.MatchLabels) > 0 {
				items.Spec.Selector.MeshService.MatchLabels = make(map[string]types.String, len(itemsItem.Spec.Selector.MeshService.MatchLabels))
				for key, value := range itemsItem.Spec.Selector.MeshService.MatchLabels {
					items.Spec.Selector.MeshService.MatchLabels[key] = types.StringValue(value)
				}
			}
			if itemsItem.Status == nil {
				items.Status = nil
			} else {
				items.Status = &tfTypes.MeshMultiZoneServiceItemStatus{}
				items.Status.Addresses = []tfTypes.Addresses{}

				for _, addressesItem := range itemsItem.Status.Addresses {
					var addresses tfTypes.Addresses

					addresses.Hostname = types.StringPointerValue(addressesItem.Hostname)
					if addressesItem.HostnameGeneratorRef == nil {
						addresses.HostnameGeneratorRef = nil
					} else {
						addresses.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
						addresses.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
					}
					addresses.Origin = types.StringPointerValue(addressesItem.Origin)

					items.Status.Addresses = append(items.Status.Addresses, addresses)
				}
				items.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}

				for _, hostnameGeneratorsItem := range itemsItem.Status.HostnameGenerators {
					var hostnameGenerators tfTypes.HostnameGenerators

					hostnameGenerators.Conditions = []tfTypes.Conditions{}

					for _, conditionsItem := range hostnameGeneratorsItem.Conditions {
						var conditions tfTypes.Conditions

						conditions.Message = types.StringValue(conditionsItem.Message)
						conditions.Reason = types.StringValue(conditionsItem.Reason)
						conditions.Status = types.StringValue(string(conditionsItem.Status))
						conditions.Type = types.StringValue(conditionsItem.Type)

						hostnameGenerators.Conditions = append(hostnameGenerators.Conditions, conditions)
					}
					hostnameGenerators.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)

					items.Status.HostnameGenerators = append(items.Status.HostnameGenerators, hostnameGenerators)
				}
				items.Status.MeshServices = []tfTypes.MeshMultiZoneServiceItemMeshServices{}

				for _, meshServicesItem := range itemsItem.Status.MeshServices {
					var meshServices tfTypes.MeshMultiZoneServiceItemMeshServices

					meshServices.Mesh = types.StringValue(meshServicesItem.Mesh)
					meshServices.Name = types.StringValue(meshServicesItem.Name)
					meshServices.Namespace = types.StringValue(meshServicesItem.Namespace)
					meshServices.Zone = types.StringValue(meshServicesItem.Zone)

					items.Status.MeshServices = append(items.Status.MeshServices, meshServices)
				}
				items.Status.Vips = []tfTypes.Vip{}

				for _, vipsItem := range itemsItem.Status.Vips {
					var vips tfTypes.Vip

					vips.IP = types.StringPointerValue(vipsItem.IP)

					items.Status.Vips = append(items.Status.Vips, vips)
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))

			r.Items = append(r.Items, items)
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *MeshMultiZoneServiceListDataSourceModel) ToOperationsGetMeshMultiZoneServiceListRequest(ctx context.Context) (*operations.GetMeshMultiZoneServiceListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var filter *operations.GetMeshMultiZoneServiceListQueryParamFilter
	if r.Filter != nil {
		key := new(string)
		if !r.Filter.Key.IsUnknown() && !r.Filter.Key.IsNull() {
			*key = r.Filter.Key.ValueString()
		} else {
			key = nil
		}
		value := new(string)
		if !r.Filter.Value.IsUnknown() && !r.Filter.Value.IsNull() {
			*value = r.Filter.Value.ValueString()
		} else {
			value = nil
		}
		filter = &operations.GetMeshMultiZoneServiceListQueryParamFilter{
			Key:   key,
			Value: value,
		}
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshMultiZoneServiceListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Filter: filter,
		Mesh:   mesh,
	}

	return &out, diags
}
