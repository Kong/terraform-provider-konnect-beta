// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *PortalCustomDomainResourceModel) ToSharedCreatePortalCustomDomainRequest() *shared.CreatePortalCustomDomainRequest {
	var hostname string
	hostname = r.Hostname.ValueString()

	var enabled bool
	enabled = r.Enabled.ValueBool()

	domainVerificationMethod := shared.PortalCustomDomainVerificationMethod(r.Ssl.DomainVerificationMethod.ValueString())
	customCertificate := new(string)
	if !r.Ssl.CustomCertificate.IsUnknown() && !r.Ssl.CustomCertificate.IsNull() {
		*customCertificate = r.Ssl.CustomCertificate.ValueString()
	} else {
		customCertificate = nil
	}
	customPrivateKey := new(string)
	if !r.Ssl.CustomPrivateKey.IsUnknown() && !r.Ssl.CustomPrivateKey.IsNull() {
		*customPrivateKey = r.Ssl.CustomPrivateKey.ValueString()
	} else {
		customPrivateKey = nil
	}
	ssl := shared.CreatePortalCustomDomainSSL{
		DomainVerificationMethod: domainVerificationMethod,
		CustomCertificate:        customCertificate,
		CustomPrivateKey:         customPrivateKey,
	}
	out := shared.CreatePortalCustomDomainRequest{
		Hostname: hostname,
		Enabled:  enabled,
		Ssl:      ssl,
	}
	return &out
}

func (r *PortalCustomDomainResourceModel) RefreshFromSharedPortalCustomDomain(resp *shared.PortalCustomDomain) {
	if resp != nil {
		r.CnameStatus = types.StringValue(string(resp.CnameStatus))
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Enabled = types.BoolValue(resp.Enabled)
		r.Hostname = types.StringValue(resp.Hostname)
		r.Ssl.DomainVerificationMethod = types.StringValue(string(resp.Ssl.DomainVerificationMethod))
		if resp.Ssl.ExpiresAt != nil {
			r.Ssl.ExpiresAt = types.StringValue(resp.Ssl.ExpiresAt.Format(time.RFC3339Nano))
		} else {
			r.Ssl.ExpiresAt = types.StringNull()
		}
		if resp.Ssl.UploadedAt != nil {
			r.Ssl.UploadedAt = types.StringValue(resp.Ssl.UploadedAt.Format(time.RFC3339Nano))
		} else {
			r.Ssl.UploadedAt = types.StringNull()
		}
		r.Ssl.ValidationErrors = make([]types.String, 0, len(resp.Ssl.ValidationErrors))
		for _, v := range resp.Ssl.ValidationErrors {
			r.Ssl.ValidationErrors = append(r.Ssl.ValidationErrors, types.StringValue(v))
		}
		r.Ssl.VerificationStatus = types.StringValue(string(resp.Ssl.VerificationStatus))
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	}
}

func (r *PortalCustomDomainResourceModel) ToSharedUpdatePortalCustomDomainRequest() *shared.UpdatePortalCustomDomainRequest {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	out := shared.UpdatePortalCustomDomainRequest{
		Enabled: enabled,
	}
	return &out
}
