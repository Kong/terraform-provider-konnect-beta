// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshGatewayListDataSourceModel) RefreshFromSharedMeshGatewayList(ctx context.Context, resp *shared.MeshGatewayList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshGatewayItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshGatewayItem
			if itemsItem.Conf == nil {
				items.Conf = nil
			} else {
				items.Conf = &tfTypes.Conf{}
				items.Conf.Listeners = []tfTypes.Listeners{}
				for listenersCount, listenersItem := range itemsItem.Conf.Listeners {
					var listeners tfTypes.Listeners
					listeners.CrossMesh = types.BoolPointerValue(listenersItem.CrossMesh)
					listeners.Hostname = types.StringPointerValue(listenersItem.Hostname)
					listeners.Port = types.Int64PointerValue(listenersItem.Port)
					if listenersItem.Protocol != nil {
						listeners.Protocol = &tfTypes.MeshItemMode{}
						if listenersItem.Protocol.Str != nil {
							listeners.Protocol.Str = types.StringPointerValue(listenersItem.Protocol.Str)
						}
						if listenersItem.Protocol.Integer != nil {
							listeners.Protocol.Integer = types.Int64PointerValue(listenersItem.Protocol.Integer)
						}
					}
					if listenersItem.Resources == nil {
						listeners.Resources = nil
					} else {
						listeners.Resources = &tfTypes.Resources{}
						listeners.Resources.ConnectionLimit = types.Int64PointerValue(listenersItem.Resources.ConnectionLimit)
					}
					if len(listenersItem.Tags) > 0 {
						listeners.Tags = make(map[string]types.String, len(listenersItem.Tags))
						for key, value := range listenersItem.Tags {
							listeners.Tags[key] = types.StringValue(value)
						}
					}
					if listenersItem.TLS == nil {
						listeners.TLS = nil
					} else {
						listeners.TLS = &tfTypes.MeshGatewayItemTLS{}
						listeners.TLS.Certificates = []tfTypes.AccessKey{}
						for certificatesCount, certificatesItem := range listenersItem.TLS.Certificates {
							var certificates tfTypes.AccessKey
							typeVarResult, _ := json.Marshal(certificatesItem.Type)
							certificates.Type = types.StringValue(string(typeVarResult))
							if certificatesCount+1 > len(listeners.TLS.Certificates) {
								listeners.TLS.Certificates = append(listeners.TLS.Certificates, certificates)
							} else {
								listeners.TLS.Certificates[certificatesCount].Type = certificates.Type
							}
						}
						if listenersItem.TLS.Mode != nil {
							listeners.TLS.Mode = &tfTypes.MeshItemMode{}
							if listenersItem.TLS.Mode.Str != nil {
								listeners.TLS.Mode.Str = types.StringPointerValue(listenersItem.TLS.Mode.Str)
							}
							if listenersItem.TLS.Mode.Integer != nil {
								listeners.TLS.Mode.Integer = types.Int64PointerValue(listenersItem.TLS.Mode.Integer)
							}
						}
						if listenersItem.TLS.Options == nil {
							listeners.TLS.Options = nil
						} else {
							listeners.TLS.Options = &tfTypes.OptionsObj{}
						}
					}
					if listenersCount+1 > len(items.Conf.Listeners) {
						items.Conf.Listeners = append(items.Conf.Listeners, listeners)
					} else {
						items.Conf.Listeners[listenersCount].CrossMesh = listeners.CrossMesh
						items.Conf.Listeners[listenersCount].Hostname = listeners.Hostname
						items.Conf.Listeners[listenersCount].Port = listeners.Port
						items.Conf.Listeners[listenersCount].Protocol = listeners.Protocol
						items.Conf.Listeners[listenersCount].Resources = listeners.Resources
						items.Conf.Listeners[listenersCount].Tags = listeners.Tags
						items.Conf.Listeners[listenersCount].TLS = listeners.TLS
					}
				}
			}
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringValue(itemsItem.Mesh)
			items.Name = types.StringValue(itemsItem.Name)
			items.Selectors = []tfTypes.Selectors{}
			for selectorsCount, selectorsItem := range itemsItem.Selectors {
				var selectors tfTypes.Selectors
				if len(selectorsItem.Match) > 0 {
					selectors.Match = make(map[string]types.String, len(selectorsItem.Match))
					for key1, value1 := range selectorsItem.Match {
						selectors.Match[key1] = types.StringValue(value1)
					}
				}
				if selectorsCount+1 > len(items.Selectors) {
					items.Selectors = append(items.Selectors, selectors)
				} else {
					items.Selectors[selectorsCount].Match = selectors.Match
				}
			}
			if len(itemsItem.Tags) > 0 {
				items.Tags = make(map[string]types.String, len(itemsItem.Tags))
				for key2, value2 := range itemsItem.Tags {
					items.Tags[key2] = types.StringValue(value2)
				}
			}
			items.Type = types.StringValue(itemsItem.Type)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Conf = items.Conf
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Selectors = items.Selectors
				r.Items[itemsCount].Tags = items.Tags
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *MeshGatewayListDataSourceModel) ToOperationsGetMeshGatewayListRequest(ctx context.Context) (*operations.GetMeshGatewayListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshGatewayListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}
