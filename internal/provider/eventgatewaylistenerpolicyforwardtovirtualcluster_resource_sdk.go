// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) ToOperationsCreateEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx context.Context) (*operations.CreateEventGatewayListenerPolicyForwardToVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	forwardToVirtualClusterPolicy, forwardToVirtualClusterPolicyDiags := r.ToSharedForwardToVirtualClusterPolicy(ctx)
	diags.Append(forwardToVirtualClusterPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayListenerPolicyForwardToVirtualClusterRequest{
		GatewayID:                     gatewayID,
		EventGatewayListenerID:        eventGatewayListenerID,
		ForwardToVirtualClusterPolicy: forwardToVirtualClusterPolicy,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) ToOperationsDeleteEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx context.Context) (*operations.DeleteEventGatewayListenerPolicyForwardToVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayListenerPolicyForwardToVirtualClusterRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) ToOperationsGetEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx context.Context) (*operations.GetEventGatewayListenerPolicyForwardToVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayListenerPolicyForwardToVirtualClusterRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) ToOperationsUpdateEventGatewayListenerPolicyForwardToVirtualClusterRequest(ctx context.Context) (*operations.UpdateEventGatewayListenerPolicyForwardToVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	forwardToVirtualClusterPolicy, forwardToVirtualClusterPolicyDiags := r.ToSharedForwardToVirtualClusterPolicy(ctx)
	diags.Append(forwardToVirtualClusterPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayListenerPolicyForwardToVirtualClusterRequest{
		GatewayID:                     gatewayID,
		EventGatewayListenerID:        eventGatewayListenerID,
		PolicyID:                      policyID,
		ForwardToVirtualClusterPolicy: forwardToVirtualClusterPolicy,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyForwardToVirtualClusterResourceModel) ToSharedForwardToVirtualClusterPolicy(ctx context.Context) (*shared.ForwardToVirtualClusterPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	var config shared.ForwardToVirtualClusterPolicyConfig
	var forwardToClusterBySNIConfig *shared.ForwardToClusterBySNIConfig
	if r.Config.Sni != nil {
		sniSuffix := new(string)
		if !r.Config.Sni.SniSuffix.IsUnknown() && !r.Config.Sni.SniSuffix.IsNull() {
			*sniSuffix = r.Config.Sni.SniSuffix.ValueString()
		} else {
			sniSuffix = nil
		}
		advertisedPort := new(int64)
		if !r.Config.Sni.AdvertisedPort.IsUnknown() && !r.Config.Sni.AdvertisedPort.IsNull() {
			*advertisedPort = r.Config.Sni.AdvertisedPort.ValueInt64()
		} else {
			advertisedPort = nil
		}
		forwardToClusterBySNIConfig = &shared.ForwardToClusterBySNIConfig{
			SniSuffix:      sniSuffix,
			AdvertisedPort: advertisedPort,
		}
	}
	if forwardToClusterBySNIConfig != nil {
		config = shared.ForwardToVirtualClusterPolicyConfig{
			ForwardToClusterBySNIConfig: forwardToClusterBySNIConfig,
		}
	}
	var forwardToClusterByPortMappingConfig *shared.ForwardToClusterByPortMappingConfig
	if r.Config.PortMapping != nil {
		var destination shared.VirtualClusterReference
		var virtualClusterReferenceByID *shared.VirtualClusterReferenceByID
		if r.Config.PortMapping.Destination.VirtualClusterReferenceByID != nil {
			var id string
			id = r.Config.PortMapping.Destination.VirtualClusterReferenceByID.ID.ValueString()

			virtualClusterReferenceByID = &shared.VirtualClusterReferenceByID{
				ID: id,
			}
		}
		if virtualClusterReferenceByID != nil {
			destination = shared.VirtualClusterReference{
				VirtualClusterReferenceByID: virtualClusterReferenceByID,
			}
		}
		var virtualClusterReferenceByName *shared.VirtualClusterReferenceByName
		if r.Config.PortMapping.Destination.VirtualClusterReferenceByName != nil {
			var name1 string
			name1 = r.Config.PortMapping.Destination.VirtualClusterReferenceByName.Name.ValueString()

			virtualClusterReferenceByName = &shared.VirtualClusterReferenceByName{
				Name: name1,
			}
		}
		if virtualClusterReferenceByName != nil {
			destination = shared.VirtualClusterReference{
				VirtualClusterReferenceByName: virtualClusterReferenceByName,
			}
		}
		var advertisedHost string
		advertisedHost = r.Config.PortMapping.AdvertisedHost.ValueString()

		bootstrapPort := new(shared.BootstrapPort)
		if !r.Config.PortMapping.BootstrapPort.IsUnknown() && !r.Config.PortMapping.BootstrapPort.IsNull() {
			*bootstrapPort = shared.BootstrapPort(r.Config.PortMapping.BootstrapPort.ValueString())
		} else {
			bootstrapPort = nil
		}
		minBrokerID := new(int64)
		if !r.Config.PortMapping.MinBrokerID.IsUnknown() && !r.Config.PortMapping.MinBrokerID.IsNull() {
			*minBrokerID = r.Config.PortMapping.MinBrokerID.ValueInt64()
		} else {
			minBrokerID = nil
		}
		forwardToClusterByPortMappingConfig = &shared.ForwardToClusterByPortMappingConfig{
			Destination:    destination,
			AdvertisedHost: advertisedHost,
			BootstrapPort:  bootstrapPort,
			MinBrokerID:    minBrokerID,
		}
	}
	if forwardToClusterByPortMappingConfig != nil {
		config = shared.ForwardToVirtualClusterPolicyConfig{
			ForwardToClusterByPortMappingConfig: forwardToClusterByPortMappingConfig,
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.ForwardToVirtualClusterPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
