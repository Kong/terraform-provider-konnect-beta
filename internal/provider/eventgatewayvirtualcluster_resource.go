// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect-beta/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
	"github.com/kong/terraform-provider-konnect-beta/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect-beta/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect-beta/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &EventGatewayVirtualClusterResource{}
var _ resource.ResourceWithImportState = &EventGatewayVirtualClusterResource{}

func NewEventGatewayVirtualClusterResource() resource.Resource {
	return &EventGatewayVirtualClusterResource{}
}

// EventGatewayVirtualClusterResource defines the resource implementation.
type EventGatewayVirtualClusterResource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// EventGatewayVirtualClusterResourceModel describes the resource data model.
type EventGatewayVirtualClusterResourceModel struct {
	ACLMode        types.String                                 `tfsdk:"acl_mode"`
	Authentication []tfTypes.VirtualClusterAuthenticationScheme `tfsdk:"authentication"`
	CreatedAt      types.String                                 `tfsdk:"created_at"`
	Description    types.String                                 `tfsdk:"description"`
	Destination    tfTypes.BackendClusterReferenceModify        `tfsdk:"destination"`
	DNSLabel       types.String                                 `tfsdk:"dns_label"`
	GatewayID      types.String                                 `tfsdk:"gateway_id"`
	ID             types.String                                 `tfsdk:"id"`
	Labels         map[string]types.String                      `tfsdk:"labels"`
	Name           types.String                                 `tfsdk:"name"`
	Namespace      *tfTypes.VirtualClusterNamespace             `tfsdk:"namespace"`
	UpdatedAt      types.String                                 `tfsdk:"updated_at"`
}

func (r *EventGatewayVirtualClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "konnect_event_gateway_virtual_cluster"
}

func (r *EventGatewayVirtualClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "EventGatewayVirtualCluster Resource",
		Attributes: map[string]schema.Attribute{
			"acl_mode": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `Configures whether or not ACL policies are enforced on the gateway.` + "\n" +
					`- ` + "`" + `enforce_on_gateway` + "`" + ` means the gateway enforces its own ACL policies for this virtual cluster` + "\n" +
					`` + "\n" +
					`  and does not forward ACL-related commands to the backend cluster.` + "\n" +
					`  Note that if there are no ACL policies configured, all access is denied.` + "\n" +
					`- ` + "`" + `passthrough` + "`" + ` tells the gateway to forward all ACL-related commands.` + "\n" +
					`must be one of ["enforce_on_gateway", "passthrough"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"enforce_on_gateway",
						"passthrough",
					),
				},
			},
			"authentication": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"anonymous": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("oauth_bearer"),
									path.MatchRelative().AtParent().AtName("sasl_plain"),
									path.MatchRelative().AtParent().AtName("sasl_scram"),
								}...),
							},
						},
						"oauth_bearer": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"claims_mapping": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"scope": schema.StringAttribute{
											Optional:    true,
											Description: `Maps the scope claim.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthAtLeast(1),
											},
										},
										"sub": schema.StringAttribute{
											Optional:    true,
											Description: `Maps the subject claim.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthAtLeast(1),
											},
										},
									},
									Description: `Maps JWT claims in the case when sub and scope are presented as different claims in your JWT token.`,
								},
								"jwks": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"cache_expiration": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Default:     stringdefault.StaticString(`1h`),
											Description: `Duration after which the gateway will fetch and cache JWKS. Default: "1h"`,
										},
										"endpoint": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `URL for JWKS endpoint. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.UTF8LengthAtLeast(1),
											},
										},
										"timeout": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Default:     stringdefault.StaticString(`10s`),
											Description: `Total time from establishing connection to receive a response from JWKS endpoint. Default: "10s"`,
										},
									},
									Description: `JSON Web Key Set configuration for verifying token signatures.`,
								},
								"mediation": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `Methods to mediate authentication:` + "\n" +
										`* passthrough - pass authentication from the client through proxy to the backend cluster without any kind of` + "\n" +
										`` + "\n" +
										`  validation` + "\n" +
										`* validate_forward - pass authentication from the client through proxy to the backend cluster.` + "\n" +
										`` + "\n" +
										`  Proxy does the validation before forwarding it to the client.` + "\n" +
										`* terminate - terminate authentication at the proxy level and originate authentication to the backend cluster` + "\n" +
										`` + "\n" +
										`  using the configuration defined at BackendCluster's authentication.` + "\n" +
										`  SASL auth is not originated if authentication on the backend_cluster is not configured.` + "\n" +
										`Not Null; must be one of ["passthrough", "validate_forward", "terminate"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"passthrough",
											"validate_forward",
											"terminate",
										),
									},
								},
								"validate": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"audiences": schema.ListNestedAttribute{
											Optional: true,
											NestedObject: schema.NestedAttributeObject{
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
															stringvalidator.UTF8LengthAtLeast(1),
														},
													},
												},
											},
											Description: `List of expected audience values. One of them has to match the audience claim in the token.`,
											Validators: []validator.List{
												listvalidator.SizeAtLeast(1),
											},
										},
										"issuer": schema.StringAttribute{
											Optional:    true,
											Description: `Expected token issuer in the token.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthAtLeast(1),
											},
										},
									},
									Description: `Validation rules.`,
								},
							},
							Description: `Oauth Bearer authentication scheme for the virtual cluster.`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("anonymous"),
									path.MatchRelative().AtParent().AtName("sasl_plain"),
									path.MatchRelative().AtParent().AtName("sasl_scram"),
								}...),
							},
						},
						"sasl_plain": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"mediation": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The mediation type for SASL/PLAIN authentication. Not Null; must be one of ["passthrough", "terminate"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"passthrough",
											"terminate",
										),
									},
								},
								"principals": schema.ListNestedAttribute{
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"password": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `A template string expression containing a reference to a secret`,
											},
											"username": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `A template string expression containing a reference to a secret or a literal value`,
											},
										},
									},
									Description: `List of principals to be able to authenticate with, used with ` + "`" + `terminate` + "`" + ` mediation.`,
								},
							},
							Description: `SASL/PLAIN authentication scheme for the virtual cluster.`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("anonymous"),
									path.MatchRelative().AtParent().AtName("oauth_bearer"),
									path.MatchRelative().AtParent().AtName("sasl_scram"),
								}...),
							},
						},
						"sasl_scram": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"algorithm": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The algorithm used for SASL/SCRAM authentication. Not Null; must be one of ["sha256", "sha512"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"sha256",
											"sha512",
										),
									},
								},
							},
							Description: `SASL/SCRAM authentication scheme for the virtual cluster.`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("anonymous"),
									path.MatchRelative().AtParent().AtName("oauth_bearer"),
									path.MatchRelative().AtParent().AtName("sasl_plain"),
								}...),
							},
						},
					},
				},
				MarkdownDescription: `How to handle authentication from clients.` + "\n" +
					`` + "\n" +
					`It tries to authenticate with every rule sequentially one by one.` + "\n" +
					`It succeeds on the first match, and fails if no rule matches.`,
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Optional:    true,
				Description: `A human-readable description of the virtual cluster.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(512),
				},
			},
			"destination": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The unique identifier of the backend cluster.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The unique name of the backend cluster.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthBetween(1, 255),
						},
					},
				},
				MarkdownDescription: `The backend cluster associated with the virtual cluster.` + "\n" +
					`` + "\n" +
					`Either ` + "`" + `id` + "`" + ` or ` + "`" + `name` + "`" + ` must be provided. Following changes to the backend cluster name won't affect the` + "\n" +
					`reference, as the system will create the entities relationship by ` + "`" + `id` + "`" + `.`,
			},
			"dns_label": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `The DNS label used in the bootstrap server URL to identify the virtual cluster when using SNI routing.` + "\n" +
					`The format follows the RFC1035: 1-63 chars, lowercase alphanumeric or '-', must start with a letter and end with an alphanumeric character.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 63),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z]([-a-z0-9]*[a-z0-9])?$`), "must match pattern "+regexp.MustCompile(`^[a-z]([-a-z0-9]*[a-z0-9])?$`).String()),
				},
			},
			"gateway_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your Gateway.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The unique identifier of the virtual cluster.`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the virtual cluster.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 255),
				},
			},
			"namespace": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"additional": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"consumer_groups": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"exact_list": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"exact_list": schema.ListNestedAttribute{
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"value": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.UTF8LengthAtLeast(1),
																},
															},
														},
													},
													Validators: []validator.List{
														listvalidator.SizeAtLeast(1),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("glob"),
												}...),
											},
										},
										"glob": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"glob": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Expose any id that matches this glob pattern (e.g., ` + "`" + `my_id_*` + "`" + `). Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.UTF8LengthAtLeast(1),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("exact_list"),
												}...),
											},
										},
									},
								},
								Description: `Consumer group IDs to expose even if they don't start with the namespace prefix.`,
							},
							"topics": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"exact_list": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"conflict": schema.StringAttribute{
													Computed: true,
													Optional: true,
													Default:  stringdefault.StaticString(`warn`),
													MarkdownDescription: `How to inform the user about conflicts where multiple backend topics would map to the same virtual topic name.` + "\n" +
														`* warn - log in the Event Gateway logs. Additionally, it sets knep_namespace_topic_conflict to 1.` + "\n" +
														`* ignore - do not do anything. It does not cause knep_namespace_topic_conflict metric to be set to 1.` + "\n" +
														`Default: "warn"; must be one of ["warn", "ignore"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"warn",
															"ignore",
														),
													},
												},
												"exact_list": schema.ListNestedAttribute{
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"backend": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.UTF8LengthAtLeast(1),
																},
															},
														},
													},
													Description: `Explicit allow-list of backend topic names.`,
													Validators: []validator.List{
														listvalidator.SizeAtLeast(1),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("glob"),
												}...),
											},
										},
										"glob": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"conflict": schema.StringAttribute{
													Computed: true,
													Optional: true,
													Default:  stringdefault.StaticString(`warn`),
													MarkdownDescription: `How to inform the user about conflicts where multiple backend topics would map to the same virtual topic name.` + "\n" +
														`* warn - log in the Event Gateway logs. Additionally, it sets knep_namespace_topic_conflict to 1.` + "\n" +
														`* ignore - do not do anything. It does not cause knep_namespace_topic_conflict metric to be set to 1.` + "\n" +
														`Default: "warn"; must be one of ["warn", "ignore"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"warn",
															"ignore",
														),
													},
												},
												"glob": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Expose any backend topic that matches this glob pattern (e.g., ` + "`" + `operations_data_*` + "`" + `). Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.UTF8LengthAtLeast(1),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("exact_list"),
												}...),
											},
										},
									},
								},
								MarkdownDescription: `Additional backend topics to expose even if they don't match the namespace prefix.` + "\n" +
									`The topics are not affected by the hide/enforce prefix mode.` + "\n" +
									`If the client tries to create a topic that matches this list, the request is rejected.`,
							},
						},
					},
					"mode": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `* hide_prefix - the configured prefix is hidden from clients for topics and IDs when reading.` + "\n" +
							`` + "\n" +
							`  Created resources are written with the prefix on the backend cluster.` + "\n" +
							`* enforce_prefix - the configured prefix remains visible to clients.` + "\n" +
							`` + "\n" +
							`  Created resources must include the prefix or the request will fail.` + "\n" +
							`must be one of ["hide_prefix", "enforce_prefix"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"hide_prefix",
								"enforce_prefix",
							),
						},
					},
					"prefix": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `The namespace is differentiated by this chosen prefix.` + "\n" +
							`For example, if the prefix is set to "analytics_" the topic named "analytics_user_clicks" is available to the clients` + "\n" +
							`of the virtual cluster. Topics without the prefix will be ignored unless added via ` + "`" + `additional.topics` + "`" + `.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
				},
				MarkdownDescription: `Namespace allows to implement multitenancy using a single backend cluster.` + "\n" +
					`It allows to either hide or enforce a static prefix on resources (topics, consumer group IDs, transaction IDs).`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity update date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *EventGatewayVirtualClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EventGatewayVirtualClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *EventGatewayVirtualClusterResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateEventGatewayVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusters.CreateEventGatewayVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.VirtualCluster != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedVirtualCluster(ctx, res.VirtualCluster)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *EventGatewayVirtualClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetEventGatewayVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusters.GetEventGatewayVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.VirtualCluster != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedVirtualCluster(ctx, res.VirtualCluster)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *EventGatewayVirtualClusterResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateEventGatewayVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusters.UpdateEventGatewayVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.VirtualCluster != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedVirtualCluster(ctx, res.VirtualCluster)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EventGatewayVirtualClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *EventGatewayVirtualClusterResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteEventGatewayVirtualClusterRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.EventGatewayVirtualClusters.DeleteEventGatewayVirtualCluster(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *EventGatewayVirtualClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		GatewayID string `json:"gateway_id"`
		ID        string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"gateway_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": ""}': `+err.Error())
		return
	}

	if len(data.GatewayID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field gateway_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("gateway_id"), data.GatewayID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
