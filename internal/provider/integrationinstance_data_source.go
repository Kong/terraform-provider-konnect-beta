// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &IntegrationInstanceDataSource{}
var _ datasource.DataSourceWithConfigure = &IntegrationInstanceDataSource{}

func NewIntegrationInstanceDataSource() datasource.DataSource {
	return &IntegrationInstanceDataSource{}
}

// IntegrationInstanceDataSource is the data source implementation.
type IntegrationInstanceDataSource struct {
	client *sdk.KonnectBeta
}

// IntegrationInstanceDataSourceModel describes the data model.
type IntegrationInstanceDataSourceModel struct {
	Authorized  types.Bool                            `tfsdk:"authorized"`
	Config      map[string]types.String               `tfsdk:"config"`
	CreatedAt   types.String                          `tfsdk:"created_at"`
	Description types.String                          `tfsdk:"description"`
	DisplayName types.String                          `tfsdk:"display_name"`
	ID          types.String                          `tfsdk:"id"`
	Integration tfTypes.IntegrationRefWithoutInstance `tfsdk:"integration"`
	Name        types.String                          `tfsdk:"name"`
	UpdatedAt   types.String                          `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *IntegrationInstanceDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_integration_instance"
}

// Schema defines the schema for the data source.
func (r *IntegrationInstanceDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IntegrationInstance DataSource",

		Attributes: map[string]schema.Attribute{
			"authorized": schema.BoolAttribute{
				Computed:    true,
				Description: `Denotes whether the integration instance has been authorized within the catalog.`,
			},
			"config": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `JSON object representing configuration specific to the integration instance.` + "\n" +
					`The expected schema depends on the integration type and is dynamically registered at runtime.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description of the integration instance.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name of the integration instance.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The ` + "`" + `id` + "`" + ` of the integration instance.`,
			},
			"integration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"display_name": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `Short-hand descriptor of an integration that omits instance metadata.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The machine name of the integration instance that uniquely identifies it within the catalog.`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
		},
	}
}

func (r *IntegrationInstanceDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IntegrationInstanceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *IntegrationInstanceDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsFetchIntegrationInstanceRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.IntegrationInstances.FetchIntegrationInstance(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.IntegrationInstance != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedIntegrationInstance(ctx, res.IntegrationInstance)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
