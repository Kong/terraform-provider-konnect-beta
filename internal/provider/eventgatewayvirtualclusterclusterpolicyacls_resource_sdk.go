// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		configPriorData := r.Config
		r.Config.Rules = configPriorData.Rules
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) ToOperationsCreateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayACLsPolicy, eventGatewayACLsPolicyDiags := r.ToSharedEventGatewayACLsPolicy(ctx)
	diags.Append(eventGatewayACLsPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest{
		GatewayID:              gatewayID,
		VirtualClusterID:       virtualClusterID,
		ParentPolicyID:         parentPolicyID,
		EventGatewayACLsPolicy: eventGatewayACLsPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) ToOperationsDeleteEventGatewayVirtualClusterClusterLevelPolicyAclsRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterClusterLevelPolicyAclsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterClusterLevelPolicyAclsRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) ToOperationsGetEventGatewayVirtualClusterClusterLevelPolicyAclsRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterClusterLevelPolicyAclsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterClusterLevelPolicyAclsRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) ToOperationsUpdateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayACLsPolicy, eventGatewayACLsPolicyDiags := r.ToSharedEventGatewayACLsPolicy(ctx)
	diags.Append(eventGatewayACLsPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterClusterLevelPolicyAclsRequest{
		GatewayID:              gatewayID,
		VirtualClusterID:       virtualClusterID,
		PolicyID:               policyID,
		EventGatewayACLsPolicy: eventGatewayACLsPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterClusterPolicyAclsResourceModel) ToSharedEventGatewayACLsPolicy(ctx context.Context) (*shared.EventGatewayACLsPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	rules := make([]shared.EventGatewayACLRule, 0, len(r.Config.Rules))
	for _, rulesItem := range r.Config.Rules {
		resourceType := shared.ResourceType(rulesItem.ResourceType.ValueString())
		action := shared.Action(rulesItem.Action.ValueString())
		operationsVar := make([]shared.EventGatewayACLOperation, 0, len(rulesItem.Operations))
		for _, operationsItem := range rulesItem.Operations {
			name1 := shared.Name(operationsItem.Name.ValueString())
			operationsVar = append(operationsVar, shared.EventGatewayACLOperation{
				Name: name1,
			})
		}
		resourceNames := make([]shared.EventGatewayACLResourceName, 0, len(rulesItem.ResourceNames))
		for _, resourceNamesItem := range rulesItem.ResourceNames {
			var match string
			match = resourceNamesItem.Match.ValueString()

			resourceNames = append(resourceNames, shared.EventGatewayACLResourceName{
				Match: match,
			})
		}
		rules = append(rules, shared.EventGatewayACLRule{
			ResourceType:  resourceType,
			Action:        action,
			Operations:    operationsVar,
			ResourceNames: resourceNames,
		})
	}
	config := shared.EventGatewayACLPolicyConfig{
		Rules: rules,
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewayACLsPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
