// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *ResourceResourceModel) ToSharedInitializeCatalogResource(ctx context.Context) (*shared.InitializeCatalogResource, diag.Diagnostics) {
	var diags diag.Diagnostics

	var typeVar string
	typeVar = r.Type.ValueString()

	var data interface{}
	if !r.Data.IsUnknown() && !r.Data.IsNull() {
		_ = json.Unmarshal([]byte(r.Data.ValueString()), &data)
	}
	out := shared.InitializeCatalogResource{
		Type: typeVar,
		Data: data,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsInitializeResourceRequest(ctx context.Context) (*operations.InitializeResourceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	initializeCatalogResource, initializeCatalogResourceDiags := r.ToSharedInitializeCatalogResource(ctx)
	diags.Append(initializeCatalogResourceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.InitializeResourceRequest{
		IntegrationInstanceID:     integrationInstanceID,
		InitializeCatalogResource: *initializeCatalogResource,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToSharedUpdateCatalogResource(ctx context.Context) (*shared.UpdateCatalogResource, diag.Diagnostics) {
	var diags diag.Diagnostics

	archived := new(bool)
	if !r.Archived.IsUnknown() && !r.Archived.IsNull() {
		*archived = r.Archived.ValueBool()
	} else {
		archived = nil
	}
	out := shared.UpdateCatalogResource{
		Archived: archived,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsUpdateResourceRequest(ctx context.Context) (*operations.UpdateResourceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	updateCatalogResource, updateCatalogResourceDiags := r.ToSharedUpdateCatalogResource(ctx)
	diags.Append(updateCatalogResourceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateResourceRequest{
		IntegrationInstanceID: integrationInstanceID,
		ResourceID:            resourceID,
		UpdateCatalogResource: *updateCatalogResource,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsArchiveResourceRequestBody(ctx context.Context) (*operations.ArchiveResourceRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := operations.ArchiveResourceRequestBody{}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsArchiveResourceRequest(ctx context.Context) (*operations.ArchiveResourceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsArchiveResourceRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.ArchiveResourceRequest{
		IntegrationInstanceID: integrationInstanceID,
		ResourceID:            resourceID,
		RequestBody:           *requestBody,
	}

	return &out, diags
}

func (r *ResourceResourceModel) RefreshFromSharedCatalogResource(ctx context.Context, resp *shared.CatalogResource) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Archived = types.BoolValue(resp.Archived)
		if resp.Attributes != nil {
			r.Attributes = make(map[string]types.String, len(resp.Attributes))
			for key, value := range resp.Attributes {
				result, _ := json.Marshal(value)
				r.Attributes[key] = types.StringValue(string(result))
			}
		}
		configResult, _ := json.Marshal(resp.Config)
		r.Config = types.StringValue(string(configResult))
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		r.Integration.DisplayName = types.StringValue(resp.Integration.DisplayName)
		r.Integration.Instance.DisplayName = types.StringValue(resp.Integration.Instance.DisplayName)
		r.Integration.Instance.ID = types.StringValue(resp.Integration.Instance.ID)
		r.Integration.Instance.Name = types.StringValue(resp.Integration.Instance.Name)
		r.Integration.Name = types.StringValue(resp.Integration.Name)
		r.Name = types.StringPointerValue(resp.Name)
		r.ServiceAssociations = types.Float64Value(resp.ServiceAssociations)
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
