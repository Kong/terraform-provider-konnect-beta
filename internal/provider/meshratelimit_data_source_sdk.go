// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshRateLimitDataSourceModel) RefreshFromSharedMeshRateLimitItem(ctx context.Context, resp *shared.MeshRateLimitItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.MeshRateLimitItemFrom{}
		if len(r.Spec.From) > len(resp.Spec.From) {
			r.Spec.From = r.Spec.From[:len(resp.Spec.From)]
		}
		for fromCount, fromItem := range resp.Spec.From {
			var from tfTypes.MeshRateLimitItemFrom
			if fromItem.Default == nil {
				from.Default = nil
			} else {
				from.Default = &tfTypes.MeshRateLimitItemDefault{}
				if fromItem.Default.Local == nil {
					from.Default.Local = nil
				} else {
					from.Default.Local = &tfTypes.Local{}
					if fromItem.Default.Local.HTTP == nil {
						from.Default.Local.HTTP = nil
					} else {
						from.Default.Local.HTTP = &tfTypes.MeshRateLimitItemHTTP{}
						from.Default.Local.HTTP.Disabled = types.BoolPointerValue(fromItem.Default.Local.HTTP.Disabled)
						if fromItem.Default.Local.HTTP.OnRateLimit == nil {
							from.Default.Local.HTTP.OnRateLimit = nil
						} else {
							from.Default.Local.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
							if fromItem.Default.Local.HTTP.OnRateLimit.Headers == nil {
								from.Default.Local.HTTP.OnRateLimit.Headers = nil
							} else {
								from.Default.Local.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemHeaders{}
								from.Default.Local.HTTP.OnRateLimit.Headers.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for addCount, addItem := range fromItem.Default.Local.HTTP.OnRateLimit.Headers.Add {
									var add tfTypes.MeshGlobalRateLimitItemAdd
									add.Name = types.StringValue(addItem.Name)
									add.Value = types.StringValue(addItem.Value)
									if addCount+1 > len(from.Default.Local.HTTP.OnRateLimit.Headers.Add) {
										from.Default.Local.HTTP.OnRateLimit.Headers.Add = append(from.Default.Local.HTTP.OnRateLimit.Headers.Add, add)
									} else {
										from.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount].Name = add.Name
										from.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount].Value = add.Value
									}
								}
								from.Default.Local.HTTP.OnRateLimit.Headers.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for setCount, setItem := range fromItem.Default.Local.HTTP.OnRateLimit.Headers.Set {
									var set tfTypes.MeshGlobalRateLimitItemAdd
									set.Name = types.StringValue(setItem.Name)
									set.Value = types.StringValue(setItem.Value)
									if setCount+1 > len(from.Default.Local.HTTP.OnRateLimit.Headers.Set) {
										from.Default.Local.HTTP.OnRateLimit.Headers.Set = append(from.Default.Local.HTTP.OnRateLimit.Headers.Set, set)
									} else {
										from.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount].Name = set.Name
										from.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount].Value = set.Value
									}
								}
							}
							from.Default.Local.HTTP.OnRateLimit.Status = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(fromItem.Default.Local.HTTP.OnRateLimit.Status))
						}
						if fromItem.Default.Local.HTTP.RequestRate == nil {
							from.Default.Local.HTTP.RequestRate = nil
						} else {
							from.Default.Local.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							from.Default.Local.HTTP.RequestRate.Interval = types.StringValue(fromItem.Default.Local.HTTP.RequestRate.Interval)
							from.Default.Local.HTTP.RequestRate.Num = types.Int32Value(int32(fromItem.Default.Local.HTTP.RequestRate.Num))
						}
					}
					if fromItem.Default.Local.TCP == nil {
						from.Default.Local.TCP = nil
					} else {
						from.Default.Local.TCP = &tfTypes.MeshRateLimitItemTCP{}
						if fromItem.Default.Local.TCP.ConnectionRate == nil {
							from.Default.Local.TCP.ConnectionRate = nil
						} else {
							from.Default.Local.TCP.ConnectionRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							from.Default.Local.TCP.ConnectionRate.Interval = types.StringValue(fromItem.Default.Local.TCP.ConnectionRate.Interval)
							from.Default.Local.TCP.ConnectionRate.Num = types.Int32Value(int32(fromItem.Default.Local.TCP.ConnectionRate.Num))
						}
						from.Default.Local.TCP.Disabled = types.BoolPointerValue(fromItem.Default.Local.TCP.Disabled)
					}
				}
			}
			from.TargetRef.Kind = types.StringValue(string(fromItem.TargetRef.Kind))
			if len(fromItem.TargetRef.Labels) > 0 {
				from.TargetRef.Labels = make(map[string]types.String, len(fromItem.TargetRef.Labels))
				for key, value := range fromItem.TargetRef.Labels {
					from.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			from.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from.TargetRef.ProxyTypes = append(from.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from.TargetRef.Tags = make(map[string]types.String, len(fromItem.TargetRef.Tags))
				for key1, value1 := range fromItem.TargetRef.Tags {
					from.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}
			if fromCount+1 > len(r.Spec.From) {
				r.Spec.From = append(r.Spec.From, from)
			} else {
				r.Spec.From[fromCount].Default = from.Default
				r.Spec.From[fromCount].TargetRef = from.TargetRef
			}
		}
		r.Spec.Rules = []tfTypes.MeshRateLimitItemRules{}
		if len(r.Spec.Rules) > len(resp.Spec.Rules) {
			r.Spec.Rules = r.Spec.Rules[:len(resp.Spec.Rules)]
		}
		for rulesCount, rulesItem := range resp.Spec.Rules {
			var rules tfTypes.MeshRateLimitItemRules
			if rulesItem.Default == nil {
				rules.Default = nil
			} else {
				rules.Default = &tfTypes.MeshRateLimitItemDefault{}
				if rulesItem.Default.Local == nil {
					rules.Default.Local = nil
				} else {
					rules.Default.Local = &tfTypes.Local{}
					if rulesItem.Default.Local.HTTP == nil {
						rules.Default.Local.HTTP = nil
					} else {
						rules.Default.Local.HTTP = &tfTypes.MeshRateLimitItemHTTP{}
						rules.Default.Local.HTTP.Disabled = types.BoolPointerValue(rulesItem.Default.Local.HTTP.Disabled)
						if rulesItem.Default.Local.HTTP.OnRateLimit == nil {
							rules.Default.Local.HTTP.OnRateLimit = nil
						} else {
							rules.Default.Local.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
							if rulesItem.Default.Local.HTTP.OnRateLimit.Headers == nil {
								rules.Default.Local.HTTP.OnRateLimit.Headers = nil
							} else {
								rules.Default.Local.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemHeaders{}
								rules.Default.Local.HTTP.OnRateLimit.Headers.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for addCount1, addItem1 := range rulesItem.Default.Local.HTTP.OnRateLimit.Headers.Add {
									var add1 tfTypes.MeshGlobalRateLimitItemAdd
									add1.Name = types.StringValue(addItem1.Name)
									add1.Value = types.StringValue(addItem1.Value)
									if addCount1+1 > len(rules.Default.Local.HTTP.OnRateLimit.Headers.Add) {
										rules.Default.Local.HTTP.OnRateLimit.Headers.Add = append(rules.Default.Local.HTTP.OnRateLimit.Headers.Add, add1)
									} else {
										rules.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount1].Name = add1.Name
										rules.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount1].Value = add1.Value
									}
								}
								rules.Default.Local.HTTP.OnRateLimit.Headers.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for setCount1, setItem1 := range rulesItem.Default.Local.HTTP.OnRateLimit.Headers.Set {
									var set1 tfTypes.MeshGlobalRateLimitItemAdd
									set1.Name = types.StringValue(setItem1.Name)
									set1.Value = types.StringValue(setItem1.Value)
									if setCount1+1 > len(rules.Default.Local.HTTP.OnRateLimit.Headers.Set) {
										rules.Default.Local.HTTP.OnRateLimit.Headers.Set = append(rules.Default.Local.HTTP.OnRateLimit.Headers.Set, set1)
									} else {
										rules.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount1].Name = set1.Name
										rules.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount1].Value = set1.Value
									}
								}
							}
							rules.Default.Local.HTTP.OnRateLimit.Status = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(rulesItem.Default.Local.HTTP.OnRateLimit.Status))
						}
						if rulesItem.Default.Local.HTTP.RequestRate == nil {
							rules.Default.Local.HTTP.RequestRate = nil
						} else {
							rules.Default.Local.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							rules.Default.Local.HTTP.RequestRate.Interval = types.StringValue(rulesItem.Default.Local.HTTP.RequestRate.Interval)
							rules.Default.Local.HTTP.RequestRate.Num = types.Int32Value(int32(rulesItem.Default.Local.HTTP.RequestRate.Num))
						}
					}
					if rulesItem.Default.Local.TCP == nil {
						rules.Default.Local.TCP = nil
					} else {
						rules.Default.Local.TCP = &tfTypes.MeshRateLimitItemTCP{}
						if rulesItem.Default.Local.TCP.ConnectionRate == nil {
							rules.Default.Local.TCP.ConnectionRate = nil
						} else {
							rules.Default.Local.TCP.ConnectionRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							rules.Default.Local.TCP.ConnectionRate.Interval = types.StringValue(rulesItem.Default.Local.TCP.ConnectionRate.Interval)
							rules.Default.Local.TCP.ConnectionRate.Num = types.Int32Value(int32(rulesItem.Default.Local.TCP.ConnectionRate.Num))
						}
						rules.Default.Local.TCP.Disabled = types.BoolPointerValue(rulesItem.Default.Local.TCP.Disabled)
					}
				}
			}
			if rulesCount+1 > len(r.Spec.Rules) {
				r.Spec.Rules = append(r.Spec.Rules, rules)
			} else {
				r.Spec.Rules[rulesCount].Default = rules.Default
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key2, value2 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key2] = types.StringValue(value2)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key3, value3 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key3] = types.StringValue(value3)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshRateLimitItemFrom{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to tfTypes.MeshRateLimitItemFrom
			if toItem.Default == nil {
				to.Default = nil
			} else {
				to.Default = &tfTypes.MeshRateLimitItemDefault{}
				if toItem.Default.Local == nil {
					to.Default.Local = nil
				} else {
					to.Default.Local = &tfTypes.Local{}
					if toItem.Default.Local.HTTP == nil {
						to.Default.Local.HTTP = nil
					} else {
						to.Default.Local.HTTP = &tfTypes.MeshRateLimitItemHTTP{}
						to.Default.Local.HTTP.Disabled = types.BoolPointerValue(toItem.Default.Local.HTTP.Disabled)
						if toItem.Default.Local.HTTP.OnRateLimit == nil {
							to.Default.Local.HTTP.OnRateLimit = nil
						} else {
							to.Default.Local.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
							if toItem.Default.Local.HTTP.OnRateLimit.Headers == nil {
								to.Default.Local.HTTP.OnRateLimit.Headers = nil
							} else {
								to.Default.Local.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemHeaders{}
								to.Default.Local.HTTP.OnRateLimit.Headers.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for addCount2, addItem2 := range toItem.Default.Local.HTTP.OnRateLimit.Headers.Add {
									var add2 tfTypes.MeshGlobalRateLimitItemAdd
									add2.Name = types.StringValue(addItem2.Name)
									add2.Value = types.StringValue(addItem2.Value)
									if addCount2+1 > len(to.Default.Local.HTTP.OnRateLimit.Headers.Add) {
										to.Default.Local.HTTP.OnRateLimit.Headers.Add = append(to.Default.Local.HTTP.OnRateLimit.Headers.Add, add2)
									} else {
										to.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount2].Name = add2.Name
										to.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount2].Value = add2.Value
									}
								}
								to.Default.Local.HTTP.OnRateLimit.Headers.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
								for setCount2, setItem2 := range toItem.Default.Local.HTTP.OnRateLimit.Headers.Set {
									var set2 tfTypes.MeshGlobalRateLimitItemAdd
									set2.Name = types.StringValue(setItem2.Name)
									set2.Value = types.StringValue(setItem2.Value)
									if setCount2+1 > len(to.Default.Local.HTTP.OnRateLimit.Headers.Set) {
										to.Default.Local.HTTP.OnRateLimit.Headers.Set = append(to.Default.Local.HTTP.OnRateLimit.Headers.Set, set2)
									} else {
										to.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount2].Name = set2.Name
										to.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount2].Value = set2.Value
									}
								}
							}
							to.Default.Local.HTTP.OnRateLimit.Status = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.Local.HTTP.OnRateLimit.Status))
						}
						if toItem.Default.Local.HTTP.RequestRate == nil {
							to.Default.Local.HTTP.RequestRate = nil
						} else {
							to.Default.Local.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							to.Default.Local.HTTP.RequestRate.Interval = types.StringValue(toItem.Default.Local.HTTP.RequestRate.Interval)
							to.Default.Local.HTTP.RequestRate.Num = types.Int32Value(int32(toItem.Default.Local.HTTP.RequestRate.Num))
						}
					}
					if toItem.Default.Local.TCP == nil {
						to.Default.Local.TCP = nil
					} else {
						to.Default.Local.TCP = &tfTypes.MeshRateLimitItemTCP{}
						if toItem.Default.Local.TCP.ConnectionRate == nil {
							to.Default.Local.TCP.ConnectionRate = nil
						} else {
							to.Default.Local.TCP.ConnectionRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							to.Default.Local.TCP.ConnectionRate.Interval = types.StringValue(toItem.Default.Local.TCP.ConnectionRate.Interval)
							to.Default.Local.TCP.ConnectionRate.Num = types.Int32Value(int32(toItem.Default.Local.TCP.ConnectionRate.Num))
						}
						to.Default.Local.TCP.Disabled = types.BoolPointerValue(toItem.Default.Local.TCP.Disabled)
					}
				}
			}
			to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
				for key4, value4 := range toItem.TargetRef.Labels {
					to.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
				for key5, value5 := range toItem.TargetRef.Tags {
					to.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to)
			} else {
				r.Spec.To[toCount].Default = to.Default
				r.Spec.To[toCount].TargetRef = to.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshRateLimitDataSourceModel) ToOperationsGetMeshRateLimitRequest(ctx context.Context) (*operations.GetMeshRateLimitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshRateLimitRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}
