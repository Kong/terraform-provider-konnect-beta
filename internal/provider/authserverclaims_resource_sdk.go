// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerClaimsResourceModel) RefreshFromSharedClaim(ctx context.Context, resp *shared.Claim) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		r.IncludeInAllScopes = types.BoolPointerValue(resp.IncludeInAllScopes)
		r.IncludeInScopes = make([]types.String, 0, len(resp.IncludeInScopes))
		for _, v := range resp.IncludeInScopes {
			r.IncludeInScopes = append(r.IncludeInScopes, types.StringValue(v))
		}
		r.IncludeInToken = types.BoolPointerValue(resp.IncludeInToken)
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Value = types.StringValue(resp.Value)
	}

	return diags
}

func (r *AuthServerClaimsResourceModel) ToOperationsCreateAuthServerClaimRequest(ctx context.Context) (*operations.CreateAuthServerClaimRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	createClaim, createClaimDiags := r.ToSharedCreateClaim(ctx)
	diags.Append(createClaimDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAuthServerClaimRequest{
		AuthServerID: authServerID,
		CreateClaim:  *createClaim,
	}

	return &out, diags
}

func (r *AuthServerClaimsResourceModel) ToOperationsDeleteAuthServerClaimRequest(ctx context.Context) (*operations.DeleteAuthServerClaimRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var claimID string
	claimID = r.ID.ValueString()

	out := operations.DeleteAuthServerClaimRequest{
		AuthServerID: authServerID,
		ClaimID:      claimID,
	}

	return &out, diags
}

func (r *AuthServerClaimsResourceModel) ToOperationsGetAuthServerClaimRequest(ctx context.Context) (*operations.GetAuthServerClaimRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var claimID string
	claimID = r.ID.ValueString()

	out := operations.GetAuthServerClaimRequest{
		AuthServerID: authServerID,
		ClaimID:      claimID,
	}

	return &out, diags
}

func (r *AuthServerClaimsResourceModel) ToOperationsUpdateAuthServerClaimRequest(ctx context.Context) (*operations.UpdateAuthServerClaimRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var claimID string
	claimID = r.ID.ValueString()

	updateClaim, updateClaimDiags := r.ToSharedUpdateClaim(ctx)
	diags.Append(updateClaimDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAuthServerClaimRequest{
		AuthServerID: authServerID,
		ClaimID:      claimID,
		UpdateClaim:  *updateClaim,
	}

	return &out, diags
}

func (r *AuthServerClaimsResourceModel) ToSharedCreateClaim(ctx context.Context) (*shared.CreateClaim, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var value string
	value = r.Value.ValueString()

	includeInToken := new(bool)
	if !r.IncludeInToken.IsUnknown() && !r.IncludeInToken.IsNull() {
		*includeInToken = r.IncludeInToken.ValueBool()
	} else {
		includeInToken = nil
	}
	includeInAllScopes := new(bool)
	if !r.IncludeInAllScopes.IsUnknown() && !r.IncludeInAllScopes.IsNull() {
		*includeInAllScopes = r.IncludeInAllScopes.ValueBool()
	} else {
		includeInAllScopes = nil
	}
	includeInScopes := make([]string, 0, len(r.IncludeInScopes))
	for _, includeInScopesItem := range r.IncludeInScopes {
		includeInScopes = append(includeInScopes, includeInScopesItem.ValueString())
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	out := shared.CreateClaim{
		Name:               name,
		Value:              value,
		IncludeInToken:     includeInToken,
		IncludeInAllScopes: includeInAllScopes,
		IncludeInScopes:    includeInScopes,
		Enabled:            enabled,
	}

	return &out, diags
}

func (r *AuthServerClaimsResourceModel) ToSharedUpdateClaim(ctx context.Context) (*shared.UpdateClaim, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	includeInToken := new(bool)
	if !r.IncludeInToken.IsUnknown() && !r.IncludeInToken.IsNull() {
		*includeInToken = r.IncludeInToken.ValueBool()
	} else {
		includeInToken = nil
	}
	includeInAllScopes := new(bool)
	if !r.IncludeInAllScopes.IsUnknown() && !r.IncludeInAllScopes.IsNull() {
		*includeInAllScopes = r.IncludeInAllScopes.ValueBool()
	} else {
		includeInAllScopes = nil
	}
	includeInScopes := make([]string, 0, len(r.IncludeInScopes))
	for _, includeInScopesItem := range r.IncludeInScopes {
		includeInScopes = append(includeInScopes, includeInScopesItem.ValueString())
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	out := shared.UpdateClaim{
		Name:               name,
		Value:              value,
		IncludeInToken:     includeInToken,
		IncludeInAllScopes: includeInAllScopes,
		IncludeInScopes:    includeInScopes,
		Enabled:            enabled,
	}

	return &out, diags
}
