// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIPackageResourceModel) RefreshFromSharedAPIPackageResponseSchema(ctx context.Context, resp *shared.APIPackageResponseSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		if resp.RateLimitingConfig == nil {
			r.RateLimitingConfig = nil
		} else {
			r.RateLimitingConfig = &tfTypes.RateLimitingConfig{}
			if resp.RateLimitingConfig.Duration != nil {
				r.RateLimitingConfig.Duration = types.StringValue(string(*resp.RateLimitingConfig.Duration))
			} else {
				r.RateLimitingConfig.Duration = types.StringNull()
			}
			r.RateLimitingConfig.Limit = types.Int64PointerValue(resp.RateLimitingConfig.Limit)
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringPointerValue(resp.Version)
	}

	return diags
}

func (r *APIPackageResourceModel) ToOperationsDeleteAPIPackageRequest(ctx context.Context) (*operations.DeleteAPIPackageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var packageID string
	packageID = r.ID.ValueString()

	out := operations.DeleteAPIPackageRequest{
		PackageID: packageID,
	}

	return &out, diags
}

func (r *APIPackageResourceModel) ToOperationsGetAPIPackageRequest(ctx context.Context) (*operations.GetAPIPackageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var packageID string
	packageID = r.ID.ValueString()

	out := operations.GetAPIPackageRequest{
		PackageID: packageID,
	}

	return &out, diags
}

func (r *APIPackageResourceModel) ToOperationsPatchAPIPackageRequest(ctx context.Context) (*operations.PatchAPIPackageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var packageID string
	packageID = r.ID.ValueString()

	updateAPIPackageRequest, updateAPIPackageRequestDiags := r.ToSharedUpdateAPIPackageRequest(ctx)
	diags.Append(updateAPIPackageRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PatchAPIPackageRequest{
		PackageID:               packageID,
		UpdateAPIPackageRequest: *updateAPIPackageRequest,
	}

	return &out, diags
}

func (r *APIPackageResourceModel) ToSharedCreateAPIPackageRequest(ctx context.Context) (*shared.CreateAPIPackageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	var rateLimitingConfig *shared.RateLimitingConfig
	if r.RateLimitingConfig != nil {
		limit := new(int64)
		if !r.RateLimitingConfig.Limit.IsUnknown() && !r.RateLimitingConfig.Limit.IsNull() {
			*limit = r.RateLimitingConfig.Limit.ValueInt64()
		} else {
			limit = nil
		}
		duration := new(shared.Duration)
		if !r.RateLimitingConfig.Duration.IsUnknown() && !r.RateLimitingConfig.Duration.IsNull() {
			*duration = shared.Duration(r.RateLimitingConfig.Duration.ValueString())
		} else {
			duration = nil
		}
		rateLimitingConfig = &shared.RateLimitingConfig{
			Limit:    limit,
			Duration: duration,
		}
	}
	out := shared.CreateAPIPackageRequest{
		Name:               name,
		Description:        description,
		Slug:               slug,
		Version:            version,
		RateLimitingConfig: rateLimitingConfig,
	}

	return &out, diags
}

func (r *APIPackageResourceModel) ToSharedUpdateAPIPackageRequest(ctx context.Context) (*shared.UpdateAPIPackageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	var rateLimitingConfig *shared.RateLimitingConfig
	if r.RateLimitingConfig != nil {
		limit := new(int64)
		if !r.RateLimitingConfig.Limit.IsUnknown() && !r.RateLimitingConfig.Limit.IsNull() {
			*limit = r.RateLimitingConfig.Limit.ValueInt64()
		} else {
			limit = nil
		}
		duration := new(shared.Duration)
		if !r.RateLimitingConfig.Duration.IsUnknown() && !r.RateLimitingConfig.Duration.IsNull() {
			*duration = shared.Duration(r.RateLimitingConfig.Duration.ValueString())
		} else {
			duration = nil
		}
		rateLimitingConfig = &shared.RateLimitingConfig{
			Limit:    limit,
			Duration: duration,
		}
	}
	out := shared.UpdateAPIPackageRequest{
		Name:               name,
		Description:        description,
		Slug:               slug,
		Version:            version,
		RateLimitingConfig: rateLimitingConfig,
	}

	return &out, diags
}
