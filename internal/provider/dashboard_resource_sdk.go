// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *DashboardResourceModel) RefreshFromSharedDashboardResponse(ctx context.Context, resp *shared.DashboardResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		r.Definition.PresetFilters = nil
		for _, presetFiltersItem := range resp.Definition.PresetFilters {
			var presetFilters []tfTypes.AllFilterItems
			presetFilters = []tfTypes.AllFilterItems{}
			for presetFiltersCount, presetFiltersItem1 := range presetFiltersItem {
				var presetFilters1 tfTypes.AllFilterItems
				presetFilters1.Field = types.StringValue(string(presetFiltersItem1.Field))
				presetFilters1.Operator = types.StringValue(string(presetFiltersItem1.Operator))
				if presetFiltersItem1.Value == nil {
					presetFilters1.Value = types.StringNull()
				} else {
					valueResult, _ := json.Marshal(presetFiltersItem1.Value)
					presetFilters1.Value = types.StringValue(string(valueResult))
				}
				if presetFiltersCount+1 > len(presetFilters) {
					presetFilters = append(presetFilters, presetFilters1)
				} else {
					presetFilters[presetFiltersCount].Field = presetFilters1.Field
					presetFilters[presetFiltersCount].Operator = presetFilters1.Operator
					presetFilters[presetFiltersCount].Value = presetFilters1.Value
				}
			}
			r.Definition.PresetFilters = append(r.Definition.PresetFilters, presetFilters)
		}
		r.Definition.Tiles = []tfTypes.Tile{}
		if len(r.Definition.Tiles) > len(resp.Definition.Tiles) {
			r.Definition.Tiles = r.Definition.Tiles[:len(resp.Definition.Tiles)]
		}
		for tilesCount, tilesItem := range resp.Definition.Tiles {
			var tiles tfTypes.Tile
			if tilesItem.ChartTile != nil {
				tiles.Chart = &tfTypes.ChartTile{}
				if tilesItem.ChartTile.Definition.Chart.BarChart != nil {
					tiles.Chart.Definition.Chart.HorizontalBar = &tfTypes.BarChart{}
					tiles.Chart.Definition.Chart.HorizontalBar.ChartTitle = types.StringPointerValue(tilesItem.ChartTile.Definition.Chart.BarChart.ChartTitle)
					tiles.Chart.Definition.Chart.HorizontalBar.Stacked = types.BoolPointerValue(tilesItem.ChartTile.Definition.Chart.BarChart.Stacked)
					tiles.Chart.Definition.Chart.HorizontalBar.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Chart.BarChart.Type))
				}
				if tilesItem.ChartTile.Definition.Chart.DonutChart != nil {
					tiles.Chart.Definition.Chart.Donut = &tfTypes.DonutChart{}
					tiles.Chart.Definition.Chart.Donut.ChartTitle = types.StringPointerValue(tilesItem.ChartTile.Definition.Chart.DonutChart.ChartTitle)
					tiles.Chart.Definition.Chart.Donut.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Chart.DonutChart.Type))
				}
				if tilesItem.ChartTile.Definition.Chart.SingleValueChart != nil {
					tiles.Chart.Definition.Chart.SingleValue = &tfTypes.SingleValueChart{}
					tiles.Chart.Definition.Chart.SingleValue.ChartTitle = types.StringPointerValue(tilesItem.ChartTile.Definition.Chart.SingleValueChart.ChartTitle)
					tiles.Chart.Definition.Chart.SingleValue.DecimalPoints = types.Float64PointerValue(tilesItem.ChartTile.Definition.Chart.SingleValueChart.DecimalPoints)
					tiles.Chart.Definition.Chart.SingleValue.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Chart.SingleValueChart.Type))
				}
				if tilesItem.ChartTile.Definition.Chart.TimeseriesChart != nil {
					tiles.Chart.Definition.Chart.TimeseriesLine = &tfTypes.BarChart{}
					tiles.Chart.Definition.Chart.TimeseriesLine.ChartTitle = types.StringPointerValue(tilesItem.ChartTile.Definition.Chart.TimeseriesChart.ChartTitle)
					tiles.Chart.Definition.Chart.TimeseriesLine.Stacked = types.BoolPointerValue(tilesItem.ChartTile.Definition.Chart.TimeseriesChart.Stacked)
					tiles.Chart.Definition.Chart.TimeseriesLine.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Chart.TimeseriesChart.Type))
				}
				if tilesItem.ChartTile.Definition.Query.AdvancedQuery != nil {
					tiles.Chart.Definition.Query.APIUsage = &tfTypes.AdvancedQuery{}
					tiles.Chart.Definition.Query.APIUsage.Datasource = types.StringValue(string(tilesItem.ChartTile.Definition.Query.AdvancedQuery.Datasource))
					tiles.Chart.Definition.Query.APIUsage.Dimensions = make([]types.String, 0, len(tilesItem.ChartTile.Definition.Query.AdvancedQuery.Dimensions))
					for _, v := range tilesItem.ChartTile.Definition.Query.AdvancedQuery.Dimensions {
						tiles.Chart.Definition.Query.APIUsage.Dimensions = append(tiles.Chart.Definition.Query.APIUsage.Dimensions, types.StringValue(string(v)))
					}
					tiles.Chart.Definition.Query.APIUsage.Filters = []tfTypes.AllFilterItems{}
					for filtersCount, filtersItem := range tilesItem.ChartTile.Definition.Query.AdvancedQuery.Filters {
						var filters tfTypes.AllFilterItems
						filters.Field = types.StringValue(string(filtersItem.Field))
						filters.Operator = types.StringValue(string(filtersItem.Operator))
						if filtersItem.Value == nil {
							filters.Value = types.StringNull()
						} else {
							valueResult1, _ := json.Marshal(filtersItem.Value)
							filters.Value = types.StringValue(string(valueResult1))
						}
						if filtersCount+1 > len(tiles.Chart.Definition.Query.APIUsage.Filters) {
							tiles.Chart.Definition.Query.APIUsage.Filters = append(tiles.Chart.Definition.Query.APIUsage.Filters, filters)
						} else {
							tiles.Chart.Definition.Query.APIUsage.Filters[filtersCount].Field = filters.Field
							tiles.Chart.Definition.Query.APIUsage.Filters[filtersCount].Operator = filters.Operator
							tiles.Chart.Definition.Query.APIUsage.Filters[filtersCount].Value = filters.Value
						}
					}
					if tilesItem.ChartTile.Definition.Query.AdvancedQuery.Granularity != nil {
						tiles.Chart.Definition.Query.APIUsage.Granularity = types.StringValue(string(*tilesItem.ChartTile.Definition.Query.AdvancedQuery.Granularity))
					} else {
						tiles.Chart.Definition.Query.APIUsage.Granularity = types.StringNull()
					}
					tiles.Chart.Definition.Query.APIUsage.Metrics = make([]types.String, 0, len(tilesItem.ChartTile.Definition.Query.AdvancedQuery.Metrics))
					for _, v := range tilesItem.ChartTile.Definition.Query.AdvancedQuery.Metrics {
						tiles.Chart.Definition.Query.APIUsage.Metrics = append(tiles.Chart.Definition.Query.APIUsage.Metrics, types.StringValue(string(v)))
					}
					if tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange != nil {
						tiles.Chart.Definition.Query.APIUsage.TimeRange = &tfTypes.TimeRange{}
						if tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2 != nil {
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Absolute = &tfTypes.MetricsAbsoluteTimeRangeDtoV2{}
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Absolute.End = types.StringPointerValue(typeconvert.TimePointerToStringPointer(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.End))
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Start))
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Type))
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Tz = types.StringPointerValue(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Tz)
						}
						if tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsRelativeTimeRangeDtoV2 != nil {
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Relative = &tfTypes.MetricsRelativeTimeRangeDtoV2{}
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Relative.TimeRange = types.StringValue(string(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.TimeRange))
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Relative.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.Type))
							tiles.Chart.Definition.Query.APIUsage.TimeRange.Relative.Tz = types.StringPointerValue(tilesItem.ChartTile.Definition.Query.AdvancedQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.Tz)
						}
					}
				}
				if tilesItem.ChartTile.Definition.Query.LLMQuery != nil {
					tiles.Chart.Definition.Query.LlmUsage = &tfTypes.AdvancedQuery{}
					tiles.Chart.Definition.Query.LlmUsage.Datasource = types.StringValue(string(tilesItem.ChartTile.Definition.Query.LLMQuery.Datasource))
					tiles.Chart.Definition.Query.LlmUsage.Dimensions = make([]types.String, 0, len(tilesItem.ChartTile.Definition.Query.LLMQuery.Dimensions))
					for _, v := range tilesItem.ChartTile.Definition.Query.LLMQuery.Dimensions {
						tiles.Chart.Definition.Query.LlmUsage.Dimensions = append(tiles.Chart.Definition.Query.LlmUsage.Dimensions, types.StringValue(string(v)))
					}
					tiles.Chart.Definition.Query.LlmUsage.Filters = []tfTypes.AllFilterItems{}
					for filtersCount1, filtersItem1 := range tilesItem.ChartTile.Definition.Query.LLMQuery.Filters {
						var filters1 tfTypes.AllFilterItems
						filters1.Field = types.StringValue(string(filtersItem1.Field))
						filters1.Operator = types.StringValue(string(filtersItem1.Operator))
						if filtersItem1.Value == nil {
							filters1.Value = types.StringNull()
						} else {
							valueResult2, _ := json.Marshal(filtersItem1.Value)
							filters1.Value = types.StringValue(string(valueResult2))
						}
						if filtersCount1+1 > len(tiles.Chart.Definition.Query.LlmUsage.Filters) {
							tiles.Chart.Definition.Query.LlmUsage.Filters = append(tiles.Chart.Definition.Query.LlmUsage.Filters, filters1)
						} else {
							tiles.Chart.Definition.Query.LlmUsage.Filters[filtersCount1].Field = filters1.Field
							tiles.Chart.Definition.Query.LlmUsage.Filters[filtersCount1].Operator = filters1.Operator
							tiles.Chart.Definition.Query.LlmUsage.Filters[filtersCount1].Value = filters1.Value
						}
					}
					if tilesItem.ChartTile.Definition.Query.LLMQuery.Granularity != nil {
						tiles.Chart.Definition.Query.LlmUsage.Granularity = types.StringValue(string(*tilesItem.ChartTile.Definition.Query.LLMQuery.Granularity))
					} else {
						tiles.Chart.Definition.Query.LlmUsage.Granularity = types.StringNull()
					}
					tiles.Chart.Definition.Query.LlmUsage.Metrics = make([]types.String, 0, len(tilesItem.ChartTile.Definition.Query.LLMQuery.Metrics))
					for _, v := range tilesItem.ChartTile.Definition.Query.LLMQuery.Metrics {
						tiles.Chart.Definition.Query.LlmUsage.Metrics = append(tiles.Chart.Definition.Query.LlmUsage.Metrics, types.StringValue(string(v)))
					}
					if tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange != nil {
						tiles.Chart.Definition.Query.LlmUsage.TimeRange = &tfTypes.TimeRange{}
						if tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2 != nil {
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Absolute = &tfTypes.MetricsAbsoluteTimeRangeDtoV2{}
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.End = types.StringPointerValue(typeconvert.TimePointerToStringPointer(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.End))
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Start))
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Type))
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Tz = types.StringPointerValue(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsAbsoluteTimeRangeDtoV2.Tz)
						}
						if tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsRelativeTimeRangeDtoV2 != nil {
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Relative = &tfTypes.MetricsRelativeTimeRangeDtoV2{}
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Relative.TimeRange = types.StringValue(string(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.TimeRange))
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Type = types.StringValue(string(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.Type))
							tiles.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Tz = types.StringPointerValue(tilesItem.ChartTile.Definition.Query.LLMQuery.TimeRange.MetricsRelativeTimeRangeDtoV2.Tz)
						}
					}
				}
				tiles.Chart.Layout.Position.Col = types.Int64Value(tilesItem.ChartTile.Layout.Position.Col)
				tiles.Chart.Layout.Position.Row = types.Int64Value(tilesItem.ChartTile.Layout.Position.Row)
				tiles.Chart.Layout.Size.Cols = types.Int64Value(tilesItem.ChartTile.Layout.Size.Cols)
				tiles.Chart.Layout.Size.Rows = types.Int64Value(tilesItem.ChartTile.Layout.Size.Rows)
				tiles.Chart.Type = types.StringValue(string(tilesItem.ChartTile.Type))
			}
			if tilesCount+1 > len(r.Definition.Tiles) {
				r.Definition.Tiles = append(r.Definition.Tiles, tiles)
			} else {
				r.Definition.Tiles[tilesCount].Chart = tiles.Chart
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *DashboardResourceModel) ToOperationsDashboardsDeleteRequest(ctx context.Context) (*operations.DashboardsDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dashboardID string
	dashboardID = r.ID.ValueString()

	out := operations.DashboardsDeleteRequest{
		DashboardID: dashboardID,
	}

	return &out, diags
}

func (r *DashboardResourceModel) ToOperationsDashboardsGetRequest(ctx context.Context) (*operations.DashboardsGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dashboardID string
	dashboardID = r.ID.ValueString()

	out := operations.DashboardsGetRequest{
		DashboardID: dashboardID,
	}

	return &out, diags
}

func (r *DashboardResourceModel) ToOperationsDashboardsUpdateRequest(ctx context.Context) (*operations.DashboardsUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dashboardID string
	dashboardID = r.ID.ValueString()

	dashboardUpdateRequest, dashboardUpdateRequestDiags := r.ToSharedDashboardUpdateRequest(ctx)
	diags.Append(dashboardUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.DashboardsUpdateRequest{
		DashboardID:            dashboardID,
		DashboardUpdateRequest: *dashboardUpdateRequest,
	}

	return &out, diags
}

func (r *DashboardResourceModel) ToSharedDashboardUpdateRequest(ctx context.Context) (*shared.DashboardUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	tiles := make([]shared.Tile, 0, len(r.Definition.Tiles))
	for _, tilesItem := range r.Definition.Tiles {
		if tilesItem.Chart != nil {
			var col int64
			col = tilesItem.Chart.Layout.Position.Col.ValueInt64()

			var row int64
			row = tilesItem.Chart.Layout.Position.Row.ValueInt64()

			position := shared.Position{
				Col: col,
				Row: row,
			}
			var cols int64
			cols = tilesItem.Chart.Layout.Size.Cols.ValueInt64()

			var rows int64
			rows = tilesItem.Chart.Layout.Size.Rows.ValueInt64()

			size := shared.Size{
				Cols: cols,
				Rows: rows,
			}
			layout := shared.Layout{
				Position: position,
				Size:     size,
			}
			typeVar := shared.ChartTileType(tilesItem.Chart.Type.ValueString())
			var query shared.Query
			var advancedQuery *shared.AdvancedQuery
			if tilesItem.Chart.Definition.Query.APIUsage != nil {
				datasource := shared.Datasource(tilesItem.Chart.Definition.Query.APIUsage.Datasource.ValueString())
				metrics := make([]shared.AdvancedMetrics, 0, len(tilesItem.Chart.Definition.Query.APIUsage.Metrics))
				for _, metricsItem := range tilesItem.Chart.Definition.Query.APIUsage.Metrics {
					metrics = append(metrics, shared.AdvancedMetrics(metricsItem.ValueString()))
				}
				dimensions := make([]shared.Dimensions, 0, len(tilesItem.Chart.Definition.Query.APIUsage.Dimensions))
				for _, dimensionsItem := range tilesItem.Chart.Definition.Query.APIUsage.Dimensions {
					dimensions = append(dimensions, shared.Dimensions(dimensionsItem.ValueString()))
				}
				filters := make([]shared.AdvancedFilters, 0, len(tilesItem.Chart.Definition.Query.APIUsage.Filters))
				for _, filtersItem := range tilesItem.Chart.Definition.Query.APIUsage.Filters {
					field := shared.Field(filtersItem.Field.ValueString())
					operator := shared.Operator(filtersItem.Operator.ValueString())
					var value interface{}
					if !filtersItem.Value.IsUnknown() && !filtersItem.Value.IsNull() {
						_ = json.Unmarshal([]byte(filtersItem.Value.ValueString()), &value)
					}
					filters = append(filters, shared.AdvancedFilters{
						Field:    field,
						Operator: operator,
						Value:    value,
					})
				}
				granularity := new(shared.Granularity)
				if !tilesItem.Chart.Definition.Query.APIUsage.Granularity.IsUnknown() && !tilesItem.Chart.Definition.Query.APIUsage.Granularity.IsNull() {
					*granularity = shared.Granularity(tilesItem.Chart.Definition.Query.APIUsage.Granularity.ValueString())
				} else {
					granularity = nil
				}
				var timeRange *shared.TimeRange
				if tilesItem.Chart.Definition.Query.APIUsage.TimeRange != nil {
					var metricsRelativeTimeRangeDtoV2 *shared.MetricsRelativeTimeRangeDtoV2
					if tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative != nil {
						tz := new(string)
						if !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative.Tz.IsUnknown() && !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative.Tz.IsNull() {
							*tz = tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative.Tz.ValueString()
						} else {
							tz = nil
						}
						typeVar1 := shared.MetricsRelativeTimeRangeDtoV2Type(tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative.Type.ValueString())
						timeRange1 := shared.MetricsRelativeTimeRangeDtoV2TimeRange(tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Relative.TimeRange.ValueString())
						metricsRelativeTimeRangeDtoV2 = &shared.MetricsRelativeTimeRangeDtoV2{
							Tz:        tz,
							Type:      typeVar1,
							TimeRange: timeRange1,
						}
					}
					if metricsRelativeTimeRangeDtoV2 != nil {
						timeRange = &shared.TimeRange{
							MetricsRelativeTimeRangeDtoV2: metricsRelativeTimeRangeDtoV2,
						}
					}
					var metricsAbsoluteTimeRangeDtoV2 *shared.MetricsAbsoluteTimeRangeDtoV2
					if tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute != nil {
						tz1 := new(string)
						if !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Tz.IsUnknown() && !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Tz.IsNull() {
							*tz1 = tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Tz.ValueString()
						} else {
							tz1 = nil
						}
						typeVar2 := shared.MetricsAbsoluteTimeRangeDtoV2Type(tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Type.ValueString())
						start := new(time.Time)
						if !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Start.IsUnknown() && !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Start.IsNull() {
							*start, _ = time.Parse(time.RFC3339Nano, tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.Start.ValueString())
						} else {
							start = nil
						}
						end := new(time.Time)
						if !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.End.IsUnknown() && !tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.End.IsNull() {
							*end, _ = time.Parse(time.RFC3339Nano, tilesItem.Chart.Definition.Query.APIUsage.TimeRange.Absolute.End.ValueString())
						} else {
							end = nil
						}
						metricsAbsoluteTimeRangeDtoV2 = &shared.MetricsAbsoluteTimeRangeDtoV2{
							Tz:    tz1,
							Type:  typeVar2,
							Start: start,
							End:   end,
						}
					}
					if metricsAbsoluteTimeRangeDtoV2 != nil {
						timeRange = &shared.TimeRange{
							MetricsAbsoluteTimeRangeDtoV2: metricsAbsoluteTimeRangeDtoV2,
						}
					}
				}
				advancedQuery = &shared.AdvancedQuery{
					Datasource:  datasource,
					Metrics:     metrics,
					Dimensions:  dimensions,
					Filters:     filters,
					Granularity: granularity,
					TimeRange:   timeRange,
				}
			}
			if advancedQuery != nil {
				query = shared.Query{
					AdvancedQuery: advancedQuery,
				}
			}
			var llmQuery *shared.LLMQuery
			if tilesItem.Chart.Definition.Query.LlmUsage != nil {
				datasource1 := shared.LLMQueryDatasource(tilesItem.Chart.Definition.Query.LlmUsage.Datasource.ValueString())
				metrics1 := make([]shared.LLMMetrics, 0, len(tilesItem.Chart.Definition.Query.LlmUsage.Metrics))
				for _, metricsItem1 := range tilesItem.Chart.Definition.Query.LlmUsage.Metrics {
					metrics1 = append(metrics1, shared.LLMMetrics(metricsItem1.ValueString()))
				}
				dimensions1 := make([]shared.LLMQueryDimensions, 0, len(tilesItem.Chart.Definition.Query.LlmUsage.Dimensions))
				for _, dimensionsItem1 := range tilesItem.Chart.Definition.Query.LlmUsage.Dimensions {
					dimensions1 = append(dimensions1, shared.LLMQueryDimensions(dimensionsItem1.ValueString()))
				}
				filters1 := make([]shared.LLMFilters, 0, len(tilesItem.Chart.Definition.Query.LlmUsage.Filters))
				for _, filtersItem1 := range tilesItem.Chart.Definition.Query.LlmUsage.Filters {
					field1 := shared.LLMFiltersField(filtersItem1.Field.ValueString())
					operator1 := shared.LLMFiltersOperator(filtersItem1.Operator.ValueString())
					var value1 interface{}
					if !filtersItem1.Value.IsUnknown() && !filtersItem1.Value.IsNull() {
						_ = json.Unmarshal([]byte(filtersItem1.Value.ValueString()), &value1)
					}
					filters1 = append(filters1, shared.LLMFilters{
						Field:    field1,
						Operator: operator1,
						Value:    value1,
					})
				}
				granularity1 := new(shared.Granularity)
				if !tilesItem.Chart.Definition.Query.LlmUsage.Granularity.IsUnknown() && !tilesItem.Chart.Definition.Query.LlmUsage.Granularity.IsNull() {
					*granularity1 = shared.Granularity(tilesItem.Chart.Definition.Query.LlmUsage.Granularity.ValueString())
				} else {
					granularity1 = nil
				}
				var timeRange2 *shared.TimeRange
				if tilesItem.Chart.Definition.Query.LlmUsage.TimeRange != nil {
					var metricsRelativeTimeRangeDtoV21 *shared.MetricsRelativeTimeRangeDtoV2
					if tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative != nil {
						tz2 := new(string)
						if !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Tz.IsUnknown() && !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Tz.IsNull() {
							*tz2 = tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Tz.ValueString()
						} else {
							tz2 = nil
						}
						typeVar3 := shared.MetricsRelativeTimeRangeDtoV2Type(tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative.Type.ValueString())
						timeRange3 := shared.MetricsRelativeTimeRangeDtoV2TimeRange(tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Relative.TimeRange.ValueString())
						metricsRelativeTimeRangeDtoV21 = &shared.MetricsRelativeTimeRangeDtoV2{
							Tz:        tz2,
							Type:      typeVar3,
							TimeRange: timeRange3,
						}
					}
					if metricsRelativeTimeRangeDtoV21 != nil {
						timeRange2 = &shared.TimeRange{
							MetricsRelativeTimeRangeDtoV2: metricsRelativeTimeRangeDtoV21,
						}
					}
					var metricsAbsoluteTimeRangeDtoV21 *shared.MetricsAbsoluteTimeRangeDtoV2
					if tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute != nil {
						tz3 := new(string)
						if !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Tz.IsUnknown() && !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Tz.IsNull() {
							*tz3 = tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Tz.ValueString()
						} else {
							tz3 = nil
						}
						typeVar4 := shared.MetricsAbsoluteTimeRangeDtoV2Type(tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Type.ValueString())
						start1 := new(time.Time)
						if !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Start.IsUnknown() && !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Start.IsNull() {
							*start1, _ = time.Parse(time.RFC3339Nano, tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.Start.ValueString())
						} else {
							start1 = nil
						}
						end1 := new(time.Time)
						if !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.End.IsUnknown() && !tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.End.IsNull() {
							*end1, _ = time.Parse(time.RFC3339Nano, tilesItem.Chart.Definition.Query.LlmUsage.TimeRange.Absolute.End.ValueString())
						} else {
							end1 = nil
						}
						metricsAbsoluteTimeRangeDtoV21 = &shared.MetricsAbsoluteTimeRangeDtoV2{
							Tz:    tz3,
							Type:  typeVar4,
							Start: start1,
							End:   end1,
						}
					}
					if metricsAbsoluteTimeRangeDtoV21 != nil {
						timeRange2 = &shared.TimeRange{
							MetricsAbsoluteTimeRangeDtoV2: metricsAbsoluteTimeRangeDtoV21,
						}
					}
				}
				llmQuery = &shared.LLMQuery{
					Datasource:  datasource1,
					Metrics:     metrics1,
					Dimensions:  dimensions1,
					Filters:     filters1,
					Granularity: granularity1,
					TimeRange:   timeRange2,
				}
			}
			if llmQuery != nil {
				query = shared.Query{
					LLMQuery: llmQuery,
				}
			}
			var chart shared.Chart
			var donutChart *shared.DonutChart
			if tilesItem.Chart.Definition.Chart.Donut != nil {
				chartTitle := new(string)
				if !tilesItem.Chart.Definition.Chart.Donut.ChartTitle.IsUnknown() && !tilesItem.Chart.Definition.Chart.Donut.ChartTitle.IsNull() {
					*chartTitle = tilesItem.Chart.Definition.Chart.Donut.ChartTitle.ValueString()
				} else {
					chartTitle = nil
				}
				typeVar5 := shared.DonutChartType(tilesItem.Chart.Definition.Chart.Donut.Type.ValueString())
				donutChart = &shared.DonutChart{
					ChartTitle: chartTitle,
					Type:       typeVar5,
				}
			}
			if donutChart != nil {
				chart = shared.Chart{
					DonutChart: donutChart,
				}
			}
			var timeseriesChart *shared.TimeseriesChart
			if tilesItem.Chart.Definition.Chart.TimeseriesLine != nil {
				chartTitle1 := new(string)
				if !tilesItem.Chart.Definition.Chart.TimeseriesLine.ChartTitle.IsUnknown() && !tilesItem.Chart.Definition.Chart.TimeseriesLine.ChartTitle.IsNull() {
					*chartTitle1 = tilesItem.Chart.Definition.Chart.TimeseriesLine.ChartTitle.ValueString()
				} else {
					chartTitle1 = nil
				}
				typeVar6 := shared.TimeseriesChartType(tilesItem.Chart.Definition.Chart.TimeseriesLine.Type.ValueString())
				stacked := new(bool)
				if !tilesItem.Chart.Definition.Chart.TimeseriesLine.Stacked.IsUnknown() && !tilesItem.Chart.Definition.Chart.TimeseriesLine.Stacked.IsNull() {
					*stacked = tilesItem.Chart.Definition.Chart.TimeseriesLine.Stacked.ValueBool()
				} else {
					stacked = nil
				}
				timeseriesChart = &shared.TimeseriesChart{
					ChartTitle: chartTitle1,
					Type:       typeVar6,
					Stacked:    stacked,
				}
			}
			if timeseriesChart != nil {
				chart = shared.Chart{
					TimeseriesChart: timeseriesChart,
				}
			}
			var barChart *shared.BarChart
			if tilesItem.Chart.Definition.Chart.HorizontalBar != nil {
				chartTitle2 := new(string)
				if !tilesItem.Chart.Definition.Chart.HorizontalBar.ChartTitle.IsUnknown() && !tilesItem.Chart.Definition.Chart.HorizontalBar.ChartTitle.IsNull() {
					*chartTitle2 = tilesItem.Chart.Definition.Chart.HorizontalBar.ChartTitle.ValueString()
				} else {
					chartTitle2 = nil
				}
				typeVar7 := shared.BarChartType(tilesItem.Chart.Definition.Chart.HorizontalBar.Type.ValueString())
				stacked1 := new(bool)
				if !tilesItem.Chart.Definition.Chart.HorizontalBar.Stacked.IsUnknown() && !tilesItem.Chart.Definition.Chart.HorizontalBar.Stacked.IsNull() {
					*stacked1 = tilesItem.Chart.Definition.Chart.HorizontalBar.Stacked.ValueBool()
				} else {
					stacked1 = nil
				}
				barChart = &shared.BarChart{
					ChartTitle: chartTitle2,
					Type:       typeVar7,
					Stacked:    stacked1,
				}
			}
			if barChart != nil {
				chart = shared.Chart{
					BarChart: barChart,
				}
			}
			var singleValueChart *shared.SingleValueChart
			if tilesItem.Chart.Definition.Chart.SingleValue != nil {
				chartTitle3 := new(string)
				if !tilesItem.Chart.Definition.Chart.SingleValue.ChartTitle.IsUnknown() && !tilesItem.Chart.Definition.Chart.SingleValue.ChartTitle.IsNull() {
					*chartTitle3 = tilesItem.Chart.Definition.Chart.SingleValue.ChartTitle.ValueString()
				} else {
					chartTitle3 = nil
				}
				typeVar8 := shared.SingleValueChartType(tilesItem.Chart.Definition.Chart.SingleValue.Type.ValueString())
				decimalPoints := new(float64)
				if !tilesItem.Chart.Definition.Chart.SingleValue.DecimalPoints.IsUnknown() && !tilesItem.Chart.Definition.Chart.SingleValue.DecimalPoints.IsNull() {
					*decimalPoints = tilesItem.Chart.Definition.Chart.SingleValue.DecimalPoints.ValueFloat64()
				} else {
					decimalPoints = nil
				}
				singleValueChart = &shared.SingleValueChart{
					ChartTitle:    chartTitle3,
					Type:          typeVar8,
					DecimalPoints: decimalPoints,
				}
			}
			if singleValueChart != nil {
				chart = shared.Chart{
					SingleValueChart: singleValueChart,
				}
			}
			definition1 := shared.Definition{
				Query: query,
				Chart: chart,
			}
			chartTile := shared.ChartTile{
				Layout:     layout,
				Type:       typeVar,
				Definition: definition1,
			}
			tiles = append(tiles, shared.Tile{
				ChartTile: &chartTile,
			})
		}
	}
	presetFilters := make([][]shared.AllFilterItems, 0, len(r.Definition.PresetFilters))
	for _, presetFiltersItem := range r.Definition.PresetFilters {
		presetFiltersTmp := make([]shared.AllFilterItems, 0, len(presetFiltersItem))
		for _, item := range presetFiltersItem {
			field2 := shared.AllFilterItemsField(item.Field.ValueString())
			operator2 := shared.AllFilterItemsOperator(item.Operator.ValueString())
			var value2 interface{}
			if !item.Value.IsUnknown() && !item.Value.IsNull() {
				_ = json.Unmarshal([]byte(item.Value.ValueString()), &value2)
			}
			presetFiltersTmp = append(presetFiltersTmp, shared.AllFilterItems{
				Field:    field2,
				Operator: operator2,
				Value:    value2,
			})
		}
		presetFilters = append(presetFilters, presetFiltersTmp)
	}
	definition := shared.Dashboard{
		Tiles:         tiles,
		PresetFilters: presetFilters,
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.DashboardUpdateRequest{
		Name:       name,
		Definition: definition,
		Labels:     labels,
	}

	return &out, diags
}
