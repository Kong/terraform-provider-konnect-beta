// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) ToOperationsCreateEventGatewayVirtualClusterProducePolicySchemaValidationRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterProducePolicySchemaValidationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayProduceSchemaValidationPolicy, eventGatewayProduceSchemaValidationPolicyDiags := r.ToSharedEventGatewayProduceSchemaValidationPolicy(ctx)
	diags.Append(eventGatewayProduceSchemaValidationPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterProducePolicySchemaValidationRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		ParentPolicyID:   parentPolicyID,
		EventGatewayProduceSchemaValidationPolicy: eventGatewayProduceSchemaValidationPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) ToOperationsDeleteEventGatewayVirtualClusterProducePolicySchemaValidationRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterProducePolicySchemaValidationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterProducePolicySchemaValidationRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) ToOperationsGetEventGatewayVirtualClusterProducePolicySchemaValidationRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterProducePolicySchemaValidationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterProducePolicySchemaValidationRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) ToOperationsUpdateEventGatewayVirtualClusterProducePolicySchemaValidationRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterProducePolicySchemaValidationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayProduceSchemaValidationPolicy, eventGatewayProduceSchemaValidationPolicyDiags := r.ToSharedEventGatewayProduceSchemaValidationPolicy(ctx)
	diags.Append(eventGatewayProduceSchemaValidationPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterProducePolicySchemaValidationRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
		EventGatewayProduceSchemaValidationPolicy: eventGatewayProduceSchemaValidationPolicy,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterProducePolicySchemaValidationResourceModel) ToSharedEventGatewayProduceSchemaValidationPolicy(ctx context.Context) (*shared.EventGatewayProduceSchemaValidationPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	var config shared.EventGatewayProduceSchemaValidationPolicyConfig
	var eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig *shared.EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig
	if r.Config.ConfluentSchemaRegistry != nil {
		var schemaRegistry *shared.SchemaRegistryReference
		if r.Config.ConfluentSchemaRegistry.SchemaRegistry != nil {
			var schemaRegistryReferenceByID *shared.SchemaRegistryReferenceByID
			if r.Config.ConfluentSchemaRegistry.SchemaRegistry.SchemaRegistryReferenceByID != nil {
				var id string
				id = r.Config.ConfluentSchemaRegistry.SchemaRegistry.SchemaRegistryReferenceByID.ID.ValueString()

				schemaRegistryReferenceByID = &shared.SchemaRegistryReferenceByID{
					ID: id,
				}
			}
			if schemaRegistryReferenceByID != nil {
				schemaRegistry = &shared.SchemaRegistryReference{
					SchemaRegistryReferenceByID: schemaRegistryReferenceByID,
				}
			}
			var schemaRegistryReferenceByName *shared.SchemaRegistryReferenceByName
			if r.Config.ConfluentSchemaRegistry.SchemaRegistry.SchemaRegistryReferenceByName != nil {
				var name1 string
				name1 = r.Config.ConfluentSchemaRegistry.SchemaRegistry.SchemaRegistryReferenceByName.Name.ValueString()

				schemaRegistryReferenceByName = &shared.SchemaRegistryReferenceByName{
					Name: name1,
				}
			}
			if schemaRegistryReferenceByName != nil {
				schemaRegistry = &shared.SchemaRegistryReference{
					SchemaRegistryReferenceByName: schemaRegistryReferenceByName,
				}
			}
		}
		keyValidationAction := shared.ProduceKeyValidationAction(r.Config.ConfluentSchemaRegistry.KeyValidationAction.ValueString())
		valueValidationAction := shared.ProduceValueValidationAction(r.Config.ConfluentSchemaRegistry.ValueValidationAction.ValueString())
		eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig = &shared.EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig{
			SchemaRegistry:        schemaRegistry,
			KeyValidationAction:   keyValidationAction,
			ValueValidationAction: valueValidationAction,
		}
	}
	if eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig != nil {
		config = shared.EventGatewayProduceSchemaValidationPolicyConfig{
			EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig: eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig,
		}
	}
	var eventGatewayProduceSchemaValidationPolicyJSONConfig *shared.EventGatewayProduceSchemaValidationPolicyJSONConfig
	if r.Config.JSON != nil {
		var schemaRegistry1 *shared.SchemaRegistryReference
		if r.Config.JSON.SchemaRegistry != nil {
			var schemaRegistryReferenceById1 *shared.SchemaRegistryReferenceByID
			if r.Config.JSON.SchemaRegistry.SchemaRegistryReferenceByID != nil {
				var id1 string
				id1 = r.Config.JSON.SchemaRegistry.SchemaRegistryReferenceByID.ID.ValueString()

				schemaRegistryReferenceById1 = &shared.SchemaRegistryReferenceByID{
					ID: id1,
				}
			}
			if schemaRegistryReferenceById1 != nil {
				schemaRegistry1 = &shared.SchemaRegistryReference{
					SchemaRegistryReferenceByID: schemaRegistryReferenceById1,
				}
			}
			var schemaRegistryReferenceByName1 *shared.SchemaRegistryReferenceByName
			if r.Config.JSON.SchemaRegistry.SchemaRegistryReferenceByName != nil {
				var name2 string
				name2 = r.Config.JSON.SchemaRegistry.SchemaRegistryReferenceByName.Name.ValueString()

				schemaRegistryReferenceByName1 = &shared.SchemaRegistryReferenceByName{
					Name: name2,
				}
			}
			if schemaRegistryReferenceByName1 != nil {
				schemaRegistry1 = &shared.SchemaRegistryReference{
					SchemaRegistryReferenceByName: schemaRegistryReferenceByName1,
				}
			}
		}
		keyValidationAction1 := shared.ProduceKeyValidationAction(r.Config.JSON.KeyValidationAction.ValueString())
		valueValidationAction1 := shared.ProduceValueValidationAction(r.Config.JSON.ValueValidationAction.ValueString())
		eventGatewayProduceSchemaValidationPolicyJSONConfig = &shared.EventGatewayProduceSchemaValidationPolicyJSONConfig{
			SchemaRegistry:        schemaRegistry1,
			KeyValidationAction:   keyValidationAction1,
			ValueValidationAction: valueValidationAction1,
		}
	}
	if eventGatewayProduceSchemaValidationPolicyJSONConfig != nil {
		config = shared.EventGatewayProduceSchemaValidationPolicyConfig{
			EventGatewayProduceSchemaValidationPolicyJSONConfig: eventGatewayProduceSchemaValidationPolicyJSONConfig,
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewayProduceSchemaValidationPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
