// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PortalCustomizationDataSource{}
var _ datasource.DataSourceWithConfigure = &PortalCustomizationDataSource{}

func NewPortalCustomizationDataSource() datasource.DataSource {
	return &PortalCustomizationDataSource{}
}

// PortalCustomizationDataSource is the data source implementation.
type PortalCustomizationDataSource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// PortalCustomizationDataSourceModel describes the data model.
type PortalCustomizationDataSourceModel struct {
	CSS          types.String          `tfsdk:"css"`
	Js           *tfTypes.Js           `tfsdk:"js"`
	Layout       types.String          `tfsdk:"layout"`
	Menu         *tfTypes.Menu         `tfsdk:"menu"`
	PortalID     types.String          `tfsdk:"portal_id"`
	Robots       types.String          `tfsdk:"robots"`
	SpecRenderer *tfTypes.SpecRenderer `tfsdk:"spec_renderer"`
	Theme        *tfTypes.Theme        `tfsdk:"theme"`
}

// Metadata returns the data source type name.
func (r *PortalCustomizationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_customization"
}

// Schema defines the schema for the data source.
func (r *PortalCustomizationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalCustomization DataSource",

		Attributes: map[string]schema.Attribute{
			"css": schema.StringAttribute{
				Computed: true,
			},
			"js": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"custom": schema.StringAttribute{
						Computed: true,
					},
					"scripts": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"layout": schema.StringAttribute{
				Computed: true,
			},
			"menu": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"footer_bottom": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"external": schema.BoolAttribute{
									Computed:    true,
									Description: `When clicked, open the link in a new window`,
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Description: `The absolute path of a page in a portal with a leading slash.`,
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Description: `The link display text`,
								},
								"visibility": schema.StringAttribute{
									Computed:    true,
									Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users.`,
								},
							},
						},
					},
					"footer_sections": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"items": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"external": schema.BoolAttribute{
												Computed:    true,
												Description: `When clicked, open the link in a new window`,
											},
											"path": schema.StringAttribute{
												Computed:    true,
												Description: `The absolute path of a page in a portal with a leading slash.`,
											},
											"title": schema.StringAttribute{
												Computed:    true,
												Description: `The link display text`,
											},
											"visibility": schema.StringAttribute{
												Computed:    true,
												Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users.`,
											},
										},
									},
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Description: `The footer menu section title`,
								},
							},
						},
					},
					"main": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"external": schema.BoolAttribute{
									Computed:    true,
									Description: `When clicked, open the link in a new window`,
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Description: `The absolute path of a page in a portal with a leading slash.`,
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Description: `The link display text`,
								},
								"visibility": schema.StringAttribute{
									Computed:    true,
									Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users.`,
								},
							},
						},
					},
				},
			},
			"portal_id": schema.StringAttribute{
				Required:    true,
				Description: `The Portal identifier`,
			},
			"robots": schema.StringAttribute{
				Computed: true,
			},
			"spec_renderer": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"infinite_scroll": schema.BoolAttribute{
						Computed: true,
					},
					"show_schemas": schema.BoolAttribute{
						Computed: true,
					},
					"try_it_insomnia": schema.BoolAttribute{
						Computed: true,
					},
					"try_it_ui": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
			"theme": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"colors": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"primary": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"mode": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *PortalCustomizationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalCustomizationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PortalCustomizationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPortalCustomizationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.PortalCustomization.GetPortalCustomization(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalCustomization != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalCustomization(ctx, res.PortalCustomization)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
