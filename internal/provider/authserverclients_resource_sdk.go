// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerClientsResourceModel) ToSharedCreateClient(ctx context.Context) (*shared.CreateClient, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	grantTypes := make([]shared.GrantType, 0, len(r.GrantTypes))
	for _, grantTypesItem := range r.GrantTypes {
		grantTypes = append(grantTypes, shared.GrantType(grantTypesItem.ValueString()))
	}
	responseTypes := make([]shared.ResponseType, 0, len(r.ResponseTypes))
	for _, responseTypesItem := range r.ResponseTypes {
		responseTypes = append(responseTypes, shared.ResponseType(responseTypesItem.ValueString()))
	}
	redirectUris := make([]string, 0, len(r.RedirectUris))
	for _, redirectUrisItem := range r.RedirectUris {
		redirectUris = append(redirectUris, redirectUrisItem.ValueString())
	}
	loginURI := new(string)
	if !r.LoginURI.IsUnknown() && !r.LoginURI.IsNull() {
		*loginURI = r.LoginURI.ValueString()
	} else {
		loginURI = nil
	}
	accessTokenDuration := new(int64)
	if !r.AccessTokenDuration.IsUnknown() && !r.AccessTokenDuration.IsNull() {
		*accessTokenDuration = r.AccessTokenDuration.ValueInt64()
	} else {
		accessTokenDuration = nil
	}
	idTokenDuration := new(int64)
	if !r.IDTokenDuration.IsUnknown() && !r.IDTokenDuration.IsNull() {
		*idTokenDuration = r.IDTokenDuration.ValueInt64()
	} else {
		idTokenDuration = nil
	}
	allowAllScopes := new(bool)
	if !r.AllowAllScopes.IsUnknown() && !r.AllowAllScopes.IsNull() {
		*allowAllScopes = r.AllowAllScopes.ValueBool()
	} else {
		allowAllScopes = nil
	}
	allowScopes := make([]string, 0, len(r.AllowScopes))
	for _, allowScopesItem := range r.AllowScopes {
		allowScopes = append(allowScopes, allowScopesItem.ValueString())
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateClient{
		Name:                name,
		GrantTypes:          grantTypes,
		ResponseTypes:       responseTypes,
		RedirectUris:        redirectUris,
		LoginURI:            loginURI,
		AccessTokenDuration: accessTokenDuration,
		IDTokenDuration:     idTokenDuration,
		AllowAllScopes:      allowAllScopes,
		AllowScopes:         allowScopes,
		Labels:              labels,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) ToOperationsCreateAuthServerClientRequest(ctx context.Context) (*operations.CreateAuthServerClientRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	createClient, createClientDiags := r.ToSharedCreateClient(ctx)
	diags.Append(createClientDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAuthServerClientRequest{
		AuthServerID: authServerID,
		CreateClient: *createClient,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) ToSharedReplaceClient(ctx context.Context) (*shared.ReplaceClient, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var clientSecret string
	clientSecret = r.ClientSecret.ValueString()

	grantTypes := make([]shared.GrantType, 0, len(r.GrantTypes))
	for _, grantTypesItem := range r.GrantTypes {
		grantTypes = append(grantTypes, shared.GrantType(grantTypesItem.ValueString()))
	}
	responseTypes := make([]shared.ResponseType, 0, len(r.ResponseTypes))
	for _, responseTypesItem := range r.ResponseTypes {
		responseTypes = append(responseTypes, shared.ResponseType(responseTypesItem.ValueString()))
	}
	redirectUris := make([]string, 0, len(r.RedirectUris))
	for _, redirectUrisItem := range r.RedirectUris {
		redirectUris = append(redirectUris, redirectUrisItem.ValueString())
	}
	loginURI := new(string)
	if !r.LoginURI.IsUnknown() && !r.LoginURI.IsNull() {
		*loginURI = r.LoginURI.ValueString()
	} else {
		loginURI = nil
	}
	accessTokenDuration := new(int64)
	if !r.AccessTokenDuration.IsUnknown() && !r.AccessTokenDuration.IsNull() {
		*accessTokenDuration = r.AccessTokenDuration.ValueInt64()
	} else {
		accessTokenDuration = nil
	}
	idTokenDuration := new(int64)
	if !r.IDTokenDuration.IsUnknown() && !r.IDTokenDuration.IsNull() {
		*idTokenDuration = r.IDTokenDuration.ValueInt64()
	} else {
		idTokenDuration = nil
	}
	allowAllScopes := new(bool)
	if !r.AllowAllScopes.IsUnknown() && !r.AllowAllScopes.IsNull() {
		*allowAllScopes = r.AllowAllScopes.ValueBool()
	} else {
		allowAllScopes = nil
	}
	allowScopes := make([]string, 0, len(r.AllowScopes))
	for _, allowScopesItem := range r.AllowScopes {
		allowScopes = append(allowScopes, allowScopesItem.ValueString())
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.ReplaceClient{
		Name:                name,
		ClientSecret:        clientSecret,
		GrantTypes:          grantTypes,
		ResponseTypes:       responseTypes,
		RedirectUris:        redirectUris,
		LoginURI:            loginURI,
		AccessTokenDuration: accessTokenDuration,
		IDTokenDuration:     idTokenDuration,
		AllowAllScopes:      allowAllScopes,
		AllowScopes:         allowScopes,
		Labels:              labels,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) ToOperationsReplaceAuthServerClientRequest(ctx context.Context) (*operations.ReplaceAuthServerClientRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var clientID string
	clientID = r.ID.ValueString()

	replaceClient, replaceClientDiags := r.ToSharedReplaceClient(ctx)
	diags.Append(replaceClientDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.ReplaceAuthServerClientRequest{
		AuthServerID:  authServerID,
		ClientID:      clientID,
		ReplaceClient: *replaceClient,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) ToOperationsGetAuthServerClientRequest(ctx context.Context) (*operations.GetAuthServerClientRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var clientID string
	clientID = r.ID.ValueString()

	out := operations.GetAuthServerClientRequest{
		AuthServerID: authServerID,
		ClientID:     clientID,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) ToOperationsDeleteAuthServerClientRequest(ctx context.Context) (*operations.DeleteAuthServerClientRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var clientID string
	clientID = r.ID.ValueString()

	out := operations.DeleteAuthServerClientRequest{
		AuthServerID: authServerID,
		ClientID:     clientID,
	}

	return &out, diags
}

func (r *AuthServerClientsResourceModel) RefreshFromSharedCreatedClient(ctx context.Context, resp *shared.CreatedClient) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessTokenDuration = types.Int64PointerValue(resp.AccessTokenDuration)
		r.AllowAllScopes = types.BoolPointerValue(resp.AllowAllScopes)
		r.AllowScopes = make([]types.String, 0, len(resp.AllowScopes))
		for _, v := range resp.AllowScopes {
			r.AllowScopes = append(r.AllowScopes, types.StringValue(v))
		}
		r.ClientSecret = types.StringValue(resp.ClientSecret)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.GrantTypes = make([]types.String, 0, len(resp.GrantTypes))
		for _, v := range resp.GrantTypes {
			r.GrantTypes = append(r.GrantTypes, types.StringValue(string(v)))
		}
		r.ID = types.StringValue(resp.ID)
		r.IDTokenDuration = types.Int64PointerValue(resp.IDTokenDuration)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.LoginURI = types.StringPointerValue(resp.LoginURI)
		r.Name = types.StringValue(resp.Name)
		r.RedirectUris = make([]types.String, 0, len(resp.RedirectUris))
		for _, v := range resp.RedirectUris {
			r.RedirectUris = append(r.RedirectUris, types.StringValue(v))
		}
		r.ResponseTypes = make([]types.String, 0, len(resp.ResponseTypes))
		for _, v := range resp.ResponseTypes {
			r.ResponseTypes = append(r.ResponseTypes, types.StringValue(string(v)))
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *AuthServerClientsResourceModel) RefreshFromSharedClient(ctx context.Context, resp *shared.Client) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessTokenDuration = types.Int64PointerValue(resp.AccessTokenDuration)
		r.AllowAllScopes = types.BoolPointerValue(resp.AllowAllScopes)
		r.AllowScopes = make([]types.String, 0, len(resp.AllowScopes))
		for _, v := range resp.AllowScopes {
			r.AllowScopes = append(r.AllowScopes, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.GrantTypes = make([]types.String, 0, len(resp.GrantTypes))
		for _, v := range resp.GrantTypes {
			r.GrantTypes = append(r.GrantTypes, types.StringValue(string(v)))
		}
		r.ID = types.StringValue(resp.ID)
		r.IDTokenDuration = types.Int64PointerValue(resp.IDTokenDuration)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.LoginURI = types.StringPointerValue(resp.LoginURI)
		r.Name = types.StringValue(resp.Name)
		r.RedirectUris = make([]types.String, 0, len(resp.RedirectUris))
		for _, v := range resp.RedirectUris {
			r.RedirectUris = append(r.RedirectUris, types.StringValue(v))
		}
		r.ResponseTypes = make([]types.String, 0, len(resp.ResponseTypes))
		for _, v := range resp.ResponseTypes {
			r.ResponseTypes = append(r.ResponseTypes, types.StringValue(string(v)))
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
