// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerClientsListDataSourceModel) ToOperationsListAuthServerClientsRequest(ctx context.Context) (*operations.ListAuthServerClientsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	pageNumber := new(int64)
	if !r.PageNumber.IsUnknown() && !r.PageNumber.IsNull() {
		*pageNumber = r.PageNumber.ValueInt64()
	} else {
		pageNumber = nil
	}
	out := operations.ListAuthServerClientsRequest{
		AuthServerID: authServerID,
		PageSize:     pageSize,
		PageNumber:   pageNumber,
	}

	return &out, diags
}

func (r *AuthServerClientsListDataSourceModel) RefreshFromSharedClientList(ctx context.Context, resp *shared.ClientList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.Client{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data tfTypes.Client
			data.AccessTokenDuration = types.Int64PointerValue(dataItem.AccessTokenDuration)
			data.AllowAllScopes = types.BoolPointerValue(dataItem.AllowAllScopes)
			data.AllowScopes = make([]types.String, 0, len(dataItem.AllowScopes))
			for _, v := range dataItem.AllowScopes {
				data.AllowScopes = append(data.AllowScopes, types.StringValue(v))
			}
			data.CreatedAt = types.StringValue(typeconvert.TimeToString(dataItem.CreatedAt))
			data.GrantTypes = make([]types.String, 0, len(dataItem.GrantTypes))
			for _, v := range dataItem.GrantTypes {
				data.GrantTypes = append(data.GrantTypes, types.StringValue(string(v)))
			}
			data.ID = types.StringValue(dataItem.ID)
			data.IDTokenDuration = types.Int64PointerValue(dataItem.IDTokenDuration)
			if len(dataItem.Labels) > 0 {
				data.Labels = make(map[string]types.String, len(dataItem.Labels))
				for key, value := range dataItem.Labels {
					data.Labels[key] = types.StringPointerValue(value)
				}
			}
			data.LoginURI = types.StringPointerValue(dataItem.LoginURI)
			data.Name = types.StringValue(dataItem.Name)
			data.RedirectUris = make([]types.String, 0, len(dataItem.RedirectUris))
			for _, v := range dataItem.RedirectUris {
				data.RedirectUris = append(data.RedirectUris, types.StringValue(v))
			}
			data.ResponseTypes = make([]types.String, 0, len(dataItem.ResponseTypes))
			for _, v := range dataItem.ResponseTypes {
				data.ResponseTypes = append(data.ResponseTypes, types.StringValue(string(v)))
			}
			data.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataItem.UpdatedAt))
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data)
			} else {
				r.Data[dataCount].AccessTokenDuration = data.AccessTokenDuration
				r.Data[dataCount].AllowAllScopes = data.AllowAllScopes
				r.Data[dataCount].AllowScopes = data.AllowScopes
				r.Data[dataCount].CreatedAt = data.CreatedAt
				r.Data[dataCount].GrantTypes = data.GrantTypes
				r.Data[dataCount].ID = data.ID
				r.Data[dataCount].IDTokenDuration = data.IDTokenDuration
				r.Data[dataCount].Labels = data.Labels
				r.Data[dataCount].LoginURI = data.LoginURI
				r.Data[dataCount].Name = data.Name
				r.Data[dataCount].RedirectUris = data.RedirectUris
				r.Data[dataCount].ResponseTypes = data.ResponseTypes
				r.Data[dataCount].UpdatedAt = data.UpdatedAt
			}
		}
		r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
		r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
		r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
	}

	return diags
}
