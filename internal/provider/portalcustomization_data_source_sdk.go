// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *PortalCustomizationDataSourceModel) RefreshFromSharedPortalCustomization(resp *shared.PortalCustomization) {
	if resp != nil {
		r.CSS = types.StringPointerValue(resp.CSS)
		if resp.Js == nil {
			r.Js = nil
		} else {
			r.Js = &tfTypes.Js{}
			r.Js.Custom = types.StringPointerValue(resp.Js.Custom)
			r.Js.Scripts = make([]types.String, 0, len(resp.Js.Scripts))
			for _, v := range resp.Js.Scripts {
				r.Js.Scripts = append(r.Js.Scripts, types.StringValue(v))
			}
		}
		r.Layout = types.StringPointerValue(resp.Layout)
		if resp.Menu == nil {
			r.Menu = nil
		} else {
			r.Menu = &tfTypes.Menu{}
			r.Menu.FooterBottom = []tfTypes.PortalMenuItem{}
			if len(r.Menu.FooterBottom) > len(resp.Menu.FooterBottom) {
				r.Menu.FooterBottom = r.Menu.FooterBottom[:len(resp.Menu.FooterBottom)]
			}
			for footerBottomCount, footerBottomItem := range resp.Menu.FooterBottom {
				var footerBottom1 tfTypes.PortalMenuItem
				footerBottom1.External = types.BoolValue(footerBottomItem.External)
				footerBottom1.Path = types.StringValue(footerBottomItem.Path)
				footerBottom1.Title = types.StringValue(footerBottomItem.Title)
				footerBottom1.Visibility = types.StringValue(string(footerBottomItem.Visibility))
				if footerBottomCount+1 > len(r.Menu.FooterBottom) {
					r.Menu.FooterBottom = append(r.Menu.FooterBottom, footerBottom1)
				} else {
					r.Menu.FooterBottom[footerBottomCount].External = footerBottom1.External
					r.Menu.FooterBottom[footerBottomCount].Path = footerBottom1.Path
					r.Menu.FooterBottom[footerBottomCount].Title = footerBottom1.Title
					r.Menu.FooterBottom[footerBottomCount].Visibility = footerBottom1.Visibility
				}
			}
			r.Menu.FooterSections = []tfTypes.PortalFooterMenuSection{}
			if len(r.Menu.FooterSections) > len(resp.Menu.FooterSections) {
				r.Menu.FooterSections = r.Menu.FooterSections[:len(resp.Menu.FooterSections)]
			}
			for footerSectionsCount, footerSectionsItem := range resp.Menu.FooterSections {
				var footerSections1 tfTypes.PortalFooterMenuSection
				footerSections1.Items = []tfTypes.PortalMenuItem{}
				for itemsCount, itemsItem := range footerSectionsItem.Items {
					var items1 tfTypes.PortalMenuItem
					items1.External = types.BoolValue(itemsItem.External)
					items1.Path = types.StringValue(itemsItem.Path)
					items1.Title = types.StringValue(itemsItem.Title)
					items1.Visibility = types.StringValue(string(itemsItem.Visibility))
					if itemsCount+1 > len(footerSections1.Items) {
						footerSections1.Items = append(footerSections1.Items, items1)
					} else {
						footerSections1.Items[itemsCount].External = items1.External
						footerSections1.Items[itemsCount].Path = items1.Path
						footerSections1.Items[itemsCount].Title = items1.Title
						footerSections1.Items[itemsCount].Visibility = items1.Visibility
					}
				}
				footerSections1.Title = types.StringValue(footerSectionsItem.Title)
				if footerSectionsCount+1 > len(r.Menu.FooterSections) {
					r.Menu.FooterSections = append(r.Menu.FooterSections, footerSections1)
				} else {
					r.Menu.FooterSections[footerSectionsCount].Items = footerSections1.Items
					r.Menu.FooterSections[footerSectionsCount].Title = footerSections1.Title
				}
			}
			r.Menu.Main = []tfTypes.PortalMenuItem{}
			if len(r.Menu.Main) > len(resp.Menu.Main) {
				r.Menu.Main = r.Menu.Main[:len(resp.Menu.Main)]
			}
			for mainCount, mainItem := range resp.Menu.Main {
				var main1 tfTypes.PortalMenuItem
				main1.External = types.BoolValue(mainItem.External)
				main1.Path = types.StringValue(mainItem.Path)
				main1.Title = types.StringValue(mainItem.Title)
				main1.Visibility = types.StringValue(string(mainItem.Visibility))
				if mainCount+1 > len(r.Menu.Main) {
					r.Menu.Main = append(r.Menu.Main, main1)
				} else {
					r.Menu.Main[mainCount].External = main1.External
					r.Menu.Main[mainCount].Path = main1.Path
					r.Menu.Main[mainCount].Title = main1.Title
					r.Menu.Main[mainCount].Visibility = main1.Visibility
				}
			}
		}
		r.Robots = types.StringPointerValue(resp.Robots)
		if resp.SpecRenderer == nil {
			r.SpecRenderer = nil
		} else {
			r.SpecRenderer = &tfTypes.SpecRenderer{}
			r.SpecRenderer.InfiniteScroll = types.BoolPointerValue(resp.SpecRenderer.InfiniteScroll)
			r.SpecRenderer.ShowSchemas = types.BoolPointerValue(resp.SpecRenderer.ShowSchemas)
			r.SpecRenderer.TryItInsomnia = types.BoolPointerValue(resp.SpecRenderer.TryItInsomnia)
			r.SpecRenderer.TryItUI = types.BoolPointerValue(resp.SpecRenderer.TryItUI)
		}
		if resp.Theme == nil {
			r.Theme = nil
		} else {
			r.Theme = &tfTypes.Theme{}
			if resp.Theme.Colors == nil {
				r.Theme.Colors = nil
			} else {
				r.Theme.Colors = &tfTypes.Colors{}
				r.Theme.Colors.Primary = types.StringPointerValue(resp.Theme.Colors.Primary)
			}
			if resp.Theme.Mode != nil {
				r.Theme.Mode = types.StringValue(string(*resp.Theme.Mode))
			} else {
				r.Theme.Mode = types.StringNull()
			}
			r.Theme.Name = types.StringPointerValue(resp.Theme.Name)
		}
	}
}
