// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayListenerPolicyTLSServerResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		if r.Config == nil {
			configPriorData := r.Config
			r.Config = &tfTypes.EventGatewayTLSListenerPolicyConfig{}

			if configPriorData != nil {
				r.Config.AllowPlaintext = configPriorData.AllowPlaintext
				r.Config.Certificates = configPriorData.Certificates
				r.Config.Versions = configPriorData.Versions
			}
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayListenerPolicyTLSServerResourceModel) ToOperationsCreateEventGatewayListenerPolicyTLSServerRequest(ctx context.Context) (*operations.CreateEventGatewayListenerPolicyTLSServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	eventGatewayTLSListenerPolicy, eventGatewayTLSListenerPolicyDiags := r.ToSharedEventGatewayTLSListenerPolicy(ctx)
	diags.Append(eventGatewayTLSListenerPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayListenerPolicyTLSServerRequest{
		GatewayID:                     gatewayID,
		EventGatewayListenerID:        eventGatewayListenerID,
		EventGatewayTLSListenerPolicy: eventGatewayTLSListenerPolicy,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyTLSServerResourceModel) ToOperationsDeleteEventGatewayListenerPolicyTLSServerRequest(ctx context.Context) (*operations.DeleteEventGatewayListenerPolicyTLSServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayListenerPolicyTLSServerRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyTLSServerResourceModel) ToOperationsGetEventGatewayListenerPolicyTLSServerRequest(ctx context.Context) (*operations.GetEventGatewayListenerPolicyTLSServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayListenerPolicyTLSServerRequest{
		GatewayID:              gatewayID,
		EventGatewayListenerID: eventGatewayListenerID,
		PolicyID:               policyID,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyTLSServerResourceModel) ToOperationsUpdateEventGatewayListenerPolicyTLSServerRequest(ctx context.Context) (*operations.UpdateEventGatewayListenerPolicyTLSServerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var eventGatewayListenerID string
	eventGatewayListenerID = r.EventGatewayListenerID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayTLSListenerPolicy, eventGatewayTLSListenerPolicyDiags := r.ToSharedEventGatewayTLSListenerPolicy(ctx)
	diags.Append(eventGatewayTLSListenerPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayListenerPolicyTLSServerRequest{
		GatewayID:                     gatewayID,
		EventGatewayListenerID:        eventGatewayListenerID,
		PolicyID:                      policyID,
		EventGatewayTLSListenerPolicy: eventGatewayTLSListenerPolicy,
	}

	return &out, diags
}

func (r *EventGatewayListenerPolicyTLSServerResourceModel) ToSharedEventGatewayTLSListenerPolicy(ctx context.Context) (*shared.EventGatewayTLSListenerPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	var config *shared.EventGatewayTLSListenerPolicyConfig
	if r.Config != nil {
		certificates := make([]shared.TLSCertificate, 0, len(r.Config.Certificates))
		for _, certificatesItem := range r.Config.Certificates {
			var certificate string
			certificate = certificatesItem.Certificate.ValueString()

			var key string
			key = certificatesItem.Key.ValueString()

			certificates = append(certificates, shared.TLSCertificate{
				Certificate: certificate,
				Key:         key,
			})
		}
		var versions *shared.TLSVersionRange
		if r.Config.Versions != nil {
			min := new(shared.Min)
			if !r.Config.Versions.Min.IsUnknown() && !r.Config.Versions.Min.IsNull() {
				*min = shared.Min(r.Config.Versions.Min.ValueString())
			} else {
				min = nil
			}
			max := new(shared.Max)
			if !r.Config.Versions.Max.IsUnknown() && !r.Config.Versions.Max.IsNull() {
				*max = shared.Max(r.Config.Versions.Max.ValueString())
			} else {
				max = nil
			}
			versions = &shared.TLSVersionRange{
				Min: min,
				Max: max,
			}
		}
		allowPlaintext := new(bool)
		if !r.Config.AllowPlaintext.IsUnknown() && !r.Config.AllowPlaintext.IsNull() {
			*allowPlaintext = r.Config.AllowPlaintext.ValueBool()
		} else {
			allowPlaintext = nil
		}
		config = &shared.EventGatewayTLSListenerPolicyConfig{
			Certificates:   certificates,
			Versions:       versions,
			AllowPlaintext: allowPlaintext,
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewayTLSListenerPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
