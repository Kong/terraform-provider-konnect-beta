// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *APIVersionResourceModel) ToSharedCreateAPIVersionRequest(ctx context.Context) (*shared.CreateAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	specContent := new(string)
	if !r.SpecContent.IsUnknown() && !r.SpecContent.IsNull() {
		*specContent = r.SpecContent.ValueString()
	} else {
		specContent = nil
	}
	specType := new(shared.CreateAPIVersionRequestAPISpecType)
	if !r.SpecType.IsUnknown() && !r.SpecType.IsNull() {
		*specType = shared.CreateAPIVersionRequestAPISpecType(r.SpecType.ValueString())
	} else {
		specType = nil
	}
	out := shared.CreateAPIVersionRequest{
		Version:     version,
		SpecContent: specContent,
		SpecType:    specType,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) ToOperationsCreateAPIVersionRequest(ctx context.Context) (*operations.CreateAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	createAPIVersionRequest, createAPIVersionRequestDiags := r.ToSharedCreateAPIVersionRequest(ctx)
	diags.Append(createAPIVersionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAPIVersionRequest{
		APIID:                   apiID,
		CreateAPIVersionRequest: *createAPIVersionRequest,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) ToSharedAPIVersion(ctx context.Context) (*shared.APIVersion, diag.Diagnostics) {
	var diags diag.Diagnostics

	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	specContent := new(string)
	if !r.SpecContent.IsUnknown() && !r.SpecContent.IsNull() {
		*specContent = r.SpecContent.ValueString()
	} else {
		specContent = nil
	}
	out := shared.APIVersion{
		Version:     version,
		SpecContent: specContent,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) ToOperationsUpdateAPIVersionRequest(ctx context.Context) (*operations.UpdateAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	apiVersion, apiVersionDiags := r.ToSharedAPIVersion(ctx)
	diags.Append(apiVersionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAPIVersionRequest{
		APIID:      apiID,
		SpecID:     specID,
		APIVersion: *apiVersion,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) ToOperationsFetchAPIVersionRequest(ctx context.Context) (*operations.FetchAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.FetchAPIVersionRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) ToOperationsDeleteAPIVersionRequest(ctx context.Context) (*operations.DeleteAPIVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.DeleteAPIVersionRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APIVersionResourceModel) RefreshFromSharedAPIVersionResponse(ctx context.Context, resp *shared.APIVersionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		r.SpecContent = types.StringPointerValue(resp.SpecContent)
		if resp.SpecType != nil {
			r.SpecType = types.StringValue(string(*resp.SpecType))
		} else {
			r.SpecType = types.StringNull()
		}
		r.SpecValidationMessages = []tfTypes.ValidationMessages{}
		if len(r.SpecValidationMessages) > len(resp.SpecValidationMessages) {
			r.SpecValidationMessages = r.SpecValidationMessages[:len(resp.SpecValidationMessages)]
		}
		for specValidationMessagesCount, specValidationMessagesItem := range resp.SpecValidationMessages {
			var specValidationMessages tfTypes.ValidationMessages
			specValidationMessages.Message = types.StringValue(specValidationMessagesItem.Message)
			if specValidationMessagesCount+1 > len(r.SpecValidationMessages) {
				r.SpecValidationMessages = append(r.SpecValidationMessages, specValidationMessages)
			} else {
				r.SpecValidationMessages[specValidationMessagesCount].Message = specValidationMessages.Message
			}
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringPointerValue(resp.Version)
	}

	return diags
}
