// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect-beta/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
	"github.com/kong/terraform-provider-konnect-beta/internal/validators"
	speakeasy_int64validators "github.com/kong/terraform-provider-konnect-beta/internal/validators/int64validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect-beta/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect-beta/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DashboardResource{}
var _ resource.ResourceWithImportState = &DashboardResource{}

func NewDashboardResource() resource.Resource {
	return &DashboardResource{}
}

// DashboardResource defines the resource implementation.
type DashboardResource struct {
	// Provider configured SDK client.
	client *sdk.KonnectBeta
}

// DashboardResourceModel describes the resource data model.
type DashboardResourceModel struct {
	CreatedAt  types.String            `tfsdk:"created_at"`
	CreatedBy  types.String            `tfsdk:"created_by"`
	Definition tfTypes.Dashboard       `tfsdk:"definition"`
	ID         types.String            `tfsdk:"id"`
	Labels     map[string]types.String `tfsdk:"labels"`
	Name       types.String            `tfsdk:"name"`
	UpdatedAt  types.String            `tfsdk:"updated_at"`
}

func (r *DashboardResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "konnect_dashboard"
}

func (r *DashboardResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Dashboard Resource",
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"created_by": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Contains a unique identifier used for this resource.`,
			},
			"definition": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"preset_filters": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["ai_plugin", "ai_provider", "ai_request_model", "ai_response_model", "api", "api_product", "api_product_version", "application", "consumer", "control_plane", "control_plane_group", "country_code", "data_plane_node", "data_plane_node_version", "gateway_service", "llm_cache_status", "llm_embeddings_model", "llm_embeddings_provider", "portal", "realm", "response_source", "route", "status_code", "status_code_grouped", "upstream_status_code", "upstream_status_code_grouped"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"ai_plugin",
											"ai_provider",
											"ai_request_model",
											"ai_response_model",
											"api",
											"api_product",
											"api_product_version",
											"application",
											"consumer",
											"control_plane",
											"control_plane_group",
											"country_code",
											"data_plane_node",
											"data_plane_node_version",
											"gateway_service",
											"llm_cache_status",
											"llm_embeddings_model",
											"llm_embeddings_provider",
											"portal",
											"realm",
											"response_source",
											"route",
											"status_code",
											"status_code_grouped",
											"upstream_status_code",
											"upstream_status_code_grouped",
										),
									},
								},
								"operator": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["in", "not_in", "empty", "not_empty"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"in",
											"not_in",
											"empty",
											"not_empty",
										),
									},
								},
								"value": schema.StringAttribute{
									CustomType:  jsontypes.NormalizedType{},
									Computed:    true,
									Optional:    true,
									Description: `Parsed as JSON.`,
								},
							},
						},
						MarkdownDescription: `An optional array of filters that are applied globally to all relevant tiles in the dashboard.` + "\n" +
							`` + "\n" +
							`Whether or not a preset filter applies to a tile depends on the filter's dimension.  Some dimensions, like ` + "`" + `control_plane` + "`" + `, are common to all datasources; other dimensions may only apply to one datasource.`,
					},
					"tiles": schema.ListNestedAttribute{
						Required: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"chart": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"definition": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"chart": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"choropleth_map": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"chart_title": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The title of the chart, which is displayed in the tile's header.`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be "choropleth_map"`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"choropleth_map",
																		),
																	},
																},
															},
															MarkdownDescription: `A chart that displays data on a world map. Each region on the map is colored based on the metric value.` + "\n" +
																`This chart works only with the ` + "`" + `api_usage` + "`" + ` datasource and requires a single metric and a single dimension of ` + "`" + `country_code` + "`" + `.` + "\n" +
																`No additional dimensions are supported.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("horizontal_bar"),
																	path.MatchRelative().AtParent().AtName("donut"),
																	path.MatchRelative().AtParent().AtName("single_value"),
																	path.MatchRelative().AtParent().AtName("timeseries_line"),
																}...),
															},
														},
														"donut": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"chart_title": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The title of the chart, which is displayed in the tile's header.`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be "donut"`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf("donut"),
																	},
																},
															},
															MarkdownDescription: `A chart that can display one-dimensional data in a hollow, segmented circle.  To use this chart, ensure that` + "\n" +
																`the query includes only one dimension (not ` + "`" + `time` + "`" + `).`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("horizontal_bar"),
																	path.MatchRelative().AtParent().AtName("choropleth_map"),
																	path.MatchRelative().AtParent().AtName("single_value"),
																	path.MatchRelative().AtParent().AtName("timeseries_line"),
																}...),
															},
														},
														"horizontal_bar": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"chart_title": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The title of the chart, which is displayed in the tile's header.`,
																},
																"stacked": schema.BoolAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Whether to stack the bars (implicitly adding them together to form a total), or leave them independent from each other.`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be one of ["horizontal_bar", "vertical_bar"]`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"horizontal_bar",
																			"vertical_bar",
																		),
																	},
																},
															},
															MarkdownDescription: `A chart that can display non-timeseries data as bars.  This type of chart supports up to 2 dimensions (not ` + "`" + `time` + "`" + `).` + "\n" +
																`To render a bar chart of timeseries data, use a ` + "`" + `timeseries_bar` + "`" + ` chart instead.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("choropleth_map"),
																	path.MatchRelative().AtParent().AtName("donut"),
																	path.MatchRelative().AtParent().AtName("single_value"),
																	path.MatchRelative().AtParent().AtName("timeseries_line"),
																}...),
															},
														},
														"single_value": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"chart_title": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The title of the chart, which is displayed in the tile's header.`,
																},
																"decimal_points": schema.Float64Attribute{
																	Optional:    true,
																	Description: `The number of figures to render after the decimal.  Most metrics only support up to 2 decimals, but some may support more.`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be "single_value"`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"single_value",
																		),
																	},
																},
															},
															Description: `A chart that can render a single number.  This chart works with a single metric and no dimensions.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("horizontal_bar"),
																	path.MatchRelative().AtParent().AtName("choropleth_map"),
																	path.MatchRelative().AtParent().AtName("donut"),
																	path.MatchRelative().AtParent().AtName("timeseries_line"),
																}...),
															},
														},
														"timeseries_line": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"chart_title": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The title of the chart, which is displayed in the tile's header.`,
																},
																"stacked": schema.BoolAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Whether to stack the bars or lines (implicitly adding them together to form a total), or leave them independent from each other.`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be one of ["timeseries_line", "timeseries_bar"]`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"timeseries_line",
																			"timeseries_bar",
																		),
																	},
																},
															},
															MarkdownDescription: `A chart that can render timeseries data -- data from a query that has ` + "`" + `time` + "`" + ` as a dimension -- as lines or bars.` + "\n" +
																`` + "\n" +
																`This type of chart can support:` + "\n" +
																`` + "\n" +
																`- One or more metrics: ` + "`" + `{ metrics: ["response_latency_p99", "response_latency_p95"], dimensions: ["time"] }` + "`" + `` + "\n" +
																`- One metric plus one non-time dimension: ` + "`" + `{ metrics: ["request_count"], dimensions: ["time", "gateway_service"] }` + "`" + ` ` + "\n" +
																`` + "\n" +
																`Either way, ensure that ` + "`" + `time` + "`" + ` is in the list of query dimensions.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("horizontal_bar"),
																	path.MatchRelative().AtParent().AtName("choropleth_map"),
																	path.MatchRelative().AtParent().AtName("donut"),
																	path.MatchRelative().AtParent().AtName("single_value"),
																}...),
															},
														},
													},
													Description: `The type of chart to render. Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"query": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"api_usage": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"datasource": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be "api_usage"`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"api_usage",
																		),
																	},
																},
																"dimensions": schema.ListAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `List of attributes or entity types to group by.`,
																	Validators: []validator.List{
																		listvalidator.SizeAtMost(2),
																	},
																},
																"filters": schema.ListNestedAttribute{
																	Computed: true,
																	Optional: true,
																	NestedObject: schema.NestedAttributeObject{
																		Validators: []validator.Object{
																			speakeasy_objectvalidators.NotNull(),
																		},
																		Attributes: map[string]schema.Attribute{
																			"field": schema.StringAttribute{
																				Computed:    true,
																				Optional:    true,
																				Description: `Not Null; must be one of ["api", "api_product", "api_product_version", "application", "consumer", "control_plane", "control_plane_group", "country_code", "data_plane_node", "data_plane_node_version", "gateway_service", "portal", "realm", "response_source", "route", "status_code", "status_code_grouped", "upstream_status_code", "upstream_status_code_grouped"]`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.OneOf(
																						"api",
																						"api_product",
																						"api_product_version",
																						"application",
																						"consumer",
																						"control_plane",
																						"control_plane_group",
																						"country_code",
																						"data_plane_node",
																						"data_plane_node_version",
																						"gateway_service",
																						"portal",
																						"realm",
																						"response_source",
																						"route",
																						"status_code",
																						"status_code_grouped",
																						"upstream_status_code",
																						"upstream_status_code_grouped",
																					),
																				},
																			},
																			"operator": schema.StringAttribute{
																				Computed:    true,
																				Optional:    true,
																				Description: `Not Null; must be one of ["in", "not_in", "empty", "not_empty"]`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.OneOf(
																						"in",
																						"not_in",
																						"empty",
																						"not_empty",
																					),
																				},
																			},
																			"value": schema.StringAttribute{
																				CustomType:  jsontypes.NormalizedType{},
																				Computed:    true,
																				Optional:    true,
																				Description: `Parsed as JSON.`,
																			},
																		},
																	},
																	Description: `A list of filters to apply to the query.`,
																},
																"granularity": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																	MarkdownDescription: `Force time grouping into buckets of the specified duration.  Only has an effect if "time" is in the "dimensions" list.` + "\n" +
																		`` + "\n" +
																		`The granularity of the result may be coarser than requested.  The finest allowed granularity depends on the query's time range: data farther in the past may have coarser granularity.  The exact result granularity will be reported in the response ` + "`" + `meta.granularity_ms` + "`" + ` field.` + "\n" +
																		`` + "\n" +
																		`If granularity is not specified and "time" is in the dimensions list, a default will be chosen based on the time range requested.` + "\n" +
																		`` + "\n" +
																		`Different relative times support different granularities:` + "\n" +
																		`` + "\n" +
																		`  - 15m => tenSecondly, thirtySecondly, minutely` + "\n" +
																		`  - 1h  => tenSecondly, thirtySecondly, minutely, fiveMinutely, tenMinutely` + "\n" +
																		`  - 6h  => thirtySecondly, minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 12h => minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 24h => fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 7d  => thirtyMinutely, hourly, twoHourly, twelveHourly, daily` + "\n" +
																		`  - 30d => hourly, twoHourly, twelveHourly, daily, weekly` + "\n" +
																		`` + "\n" +
																		`For special time ranges:` + "\n" +
																		`` + "\n" +
																		`  - current_week, previous_week   => thirtyMinutely, hourly, twoHourly, twelveHourly, daily` + "\n" +
																		`  - current_month, previous_month => hourly, twoHourly, twelveHourly, daily, weekly` + "\n" +
																		`` + "\n" +
																		`For absolute time ranges, daily will be used.` + "\n" +
																		`must be one of ["tenSecondly", "thirtySecondly", "minutely", "fiveMinutely", "tenMinutely", "thirtyMinutely", "hourly", "twoHourly", "twelveHourly", "daily", "weekly"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"tenSecondly",
																			"thirtySecondly",
																			"minutely",
																			"fiveMinutely",
																			"tenMinutely",
																			"thirtyMinutely",
																			"hourly",
																			"twoHourly",
																			"twelveHourly",
																			"daily",
																			"weekly",
																		),
																	},
																},
																"metrics": schema.ListAttribute{
																	Computed:    true,
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `List of aggregated metrics to collect across the requested time span. If no metrics are specified, request_count will be computed by default.`,
																},
																"time_range": schema.SingleNestedAttribute{
																	Computed: true,
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"absolute": schema.SingleNestedAttribute{
																			Computed: true,
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"end": schema.StringAttribute{
																					Optional: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"start": schema.StringAttribute{
																					Optional: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"type": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Description: `Not Null; must be "absolute"`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf("absolute"),
																					},
																				},
																				"tz": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`Etc/UTC`),
																					Description: `Default: "Etc/UTC"`,
																				},
																			},
																			Description: `A duration representing an exact start and end time.`,
																			Validators: []validator.Object{
																				objectvalidator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("relative"),
																				}...),
																			},
																		},
																		"relative": schema.SingleNestedAttribute{
																			Computed: true,
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"time_range": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`1h`),
																					Description: `Default: "1h"; must be one of ["15m", "1h", "6h", "12h", "24h", "7d", "30d", "current_week", "current_month", "previous_week", "previous_month"]`,
																					Validators: []validator.String{
																						stringvalidator.OneOf(
																							"15m",
																							"1h",
																							"6h",
																							"12h",
																							"24h",
																							"7d",
																							"30d",
																							"current_week",
																							"current_month",
																							"previous_week",
																							"previous_month",
																						),
																					},
																				},
																				"type": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Description: `Not Null; must be "relative"`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf("relative"),
																					},
																				},
																				"tz": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`Etc/UTC`),
																					Description: `Default: "Etc/UTC"`,
																				},
																			},
																			Description: `A duration representing a relative-to-now span of time. Generally the start time is floored to the requested granularity. Eg 7d from now, with 1day granularity initiated at 2024-01-08T17:11:00+05:00 will query for the time range from 2024-01-01T00:00:00+05:00 to 2024-01-08T17:11:00+05:00. The exact start and end timestamps are returned in the result query in the meta.start and meta.end fields. If the granularity for the previous query was 1hour, it would query a time range from 2024-01-01T17:00:00+05:00 to 2024-01-08T17:11:00+05:00.`,
																			Validators: []validator.Object{
																				objectvalidator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("absolute"),
																				}...),
																			},
																		},
																	},
																	Description: `The time range to query.`,
																},
															},
															Description: `A query targeting the API usage analytics datasource.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("llm_usage"),
																}...),
															},
														},
														"llm_usage": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"datasource": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `Not Null; must be "llm_usage"`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"llm_usage",
																		),
																	},
																},
																"dimensions": schema.ListAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `List of attributes or entity types to group by.`,
																	Validators: []validator.List{
																		listvalidator.SizeAtMost(2),
																	},
																},
																"filters": schema.ListNestedAttribute{
																	Computed: true,
																	Optional: true,
																	NestedObject: schema.NestedAttributeObject{
																		Validators: []validator.Object{
																			speakeasy_objectvalidators.NotNull(),
																		},
																		Attributes: map[string]schema.Attribute{
																			"field": schema.StringAttribute{
																				Computed:    true,
																				Optional:    true,
																				Description: `Not Null; must be one of ["ai_plugin", "ai_provider", "ai_request_model", "ai_response_model", "application", "consumer", "control_plane", "control_plane_group", "gateway_service", "llm_cache_status", "llm_embeddings_model", "llm_embeddings_provider", "realm", "route", "status_code", "status_code_grouped"]`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.OneOf(
																						"ai_plugin",
																						"ai_provider",
																						"ai_request_model",
																						"ai_response_model",
																						"application",
																						"consumer",
																						"control_plane",
																						"control_plane_group",
																						"gateway_service",
																						"llm_cache_status",
																						"llm_embeddings_model",
																						"llm_embeddings_provider",
																						"realm",
																						"route",
																						"status_code",
																						"status_code_grouped",
																					),
																				},
																			},
																			"operator": schema.StringAttribute{
																				Computed:    true,
																				Optional:    true,
																				Description: `Not Null; must be one of ["in", "not_in", "empty", "not_empty"]`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.OneOf(
																						"in",
																						"not_in",
																						"empty",
																						"not_empty",
																					),
																				},
																			},
																			"value": schema.StringAttribute{
																				CustomType:  jsontypes.NormalizedType{},
																				Computed:    true,
																				Optional:    true,
																				Description: `Parsed as JSON.`,
																			},
																		},
																	},
																	Description: `A list of filters to apply to the query.`,
																},
																"granularity": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																	MarkdownDescription: `Force time grouping into buckets of the specified duration.  Only has an effect if "time" is in the "dimensions" list.` + "\n" +
																		`` + "\n" +
																		`The granularity of the result may be coarser than requested.  The finest allowed granularity depends on the query's time range: data farther in the past may have coarser granularity.  The exact result granularity will be reported in the response ` + "`" + `meta.granularity_ms` + "`" + ` field.` + "\n" +
																		`` + "\n" +
																		`If granularity is not specified and "time" is in the dimensions list, a default will be chosen based on the time range requested.` + "\n" +
																		`` + "\n" +
																		`Different relative times support different granularities:` + "\n" +
																		`` + "\n" +
																		`  - 15m => tenSecondly, thirtySecondly, minutely` + "\n" +
																		`  - 1h  => tenSecondly, thirtySecondly, minutely, fiveMinutely, tenMinutely` + "\n" +
																		`  - 6h  => thirtySecondly, minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 12h => minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 24h => fiveMinutely, tenMinutely, thirtyMinutely, hourly` + "\n" +
																		`  - 7d  => thirtyMinutely, hourly, twoHourly, twelveHourly, daily` + "\n" +
																		`  - 30d => hourly, twoHourly, twelveHourly, daily, weekly` + "\n" +
																		`` + "\n" +
																		`For special time ranges:` + "\n" +
																		`` + "\n" +
																		`  - current_week, previous_week   => thirtyMinutely, hourly, twoHourly, twelveHourly, daily` + "\n" +
																		`  - current_month, previous_month => hourly, twoHourly, twelveHourly, daily, weekly` + "\n" +
																		`` + "\n" +
																		`For absolute time ranges, daily will be used.` + "\n" +
																		`must be one of ["tenSecondly", "thirtySecondly", "minutely", "fiveMinutely", "tenMinutely", "thirtyMinutely", "hourly", "twoHourly", "twelveHourly", "daily", "weekly"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"tenSecondly",
																			"thirtySecondly",
																			"minutely",
																			"fiveMinutely",
																			"tenMinutely",
																			"thirtyMinutely",
																			"hourly",
																			"twoHourly",
																			"twelveHourly",
																			"daily",
																			"weekly",
																		),
																	},
																},
																"metrics": schema.ListAttribute{
																	Computed:    true,
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `List of aggregated metrics to collect across the requested time span.`,
																},
																"time_range": schema.SingleNestedAttribute{
																	Computed: true,
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"absolute": schema.SingleNestedAttribute{
																			Computed: true,
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"end": schema.StringAttribute{
																					Optional: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"start": schema.StringAttribute{
																					Optional: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"type": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Description: `Not Null; must be "absolute"`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf("absolute"),
																					},
																				},
																				"tz": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`Etc/UTC`),
																					Description: `Default: "Etc/UTC"`,
																				},
																			},
																			Description: `A duration representing an exact start and end time.`,
																			Validators: []validator.Object{
																				objectvalidator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("relative"),
																				}...),
																			},
																		},
																		"relative": schema.SingleNestedAttribute{
																			Computed: true,
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"time_range": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`1h`),
																					Description: `Default: "1h"; must be one of ["15m", "1h", "6h", "12h", "24h", "7d", "30d", "current_week", "current_month", "previous_week", "previous_month"]`,
																					Validators: []validator.String{
																						stringvalidator.OneOf(
																							"15m",
																							"1h",
																							"6h",
																							"12h",
																							"24h",
																							"7d",
																							"30d",
																							"current_week",
																							"current_month",
																							"previous_week",
																							"previous_month",
																						),
																					},
																				},
																				"type": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Description: `Not Null; must be "relative"`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf("relative"),
																					},
																				},
																				"tz": schema.StringAttribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     stringdefault.StaticString(`Etc/UTC`),
																					Description: `Default: "Etc/UTC"`,
																				},
																			},
																			Description: `A duration representing a relative-to-now span of time. Generally the start time is floored to the requested granularity. Eg 7d from now, with 1day granularity initiated at 2024-01-08T17:11:00+05:00 will query for the time range from 2024-01-01T00:00:00+05:00 to 2024-01-08T17:11:00+05:00. The exact start and end timestamps are returned in the result query in the meta.start and meta.end fields. If the granularity for the previous query was 1hour, it would query a time range from 2024-01-01T17:00:00+05:00 to 2024-01-08T17:11:00+05:00.`,
																			Validators: []validator.Object{
																				objectvalidator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("absolute"),
																				}...),
																			},
																		},
																	},
																	Description: `The time range to query.`,
																},
															},
															Description: `A query targeting the LLM usage analytics datasource.`,
															Validators: []validator.Object{
																objectvalidator.ConflictsWith(path.Expressions{
																	path.MatchRelative().AtParent().AtName("api_usage"),
																}...),
															},
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
											},
											MarkdownDescription: `The tile's definition, which consists of a query to fetch data and a chart to render the data.` + "\n" +
												`Note that some charts expect certain types of queries to render properly.  The documentation for the individual chart types has more information.` + "\n" +
												`Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"layout": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"position": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"col": schema.Int64Attribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Int64{
																speakeasy_int64validators.NotNull(),
																int64validator.AtMost(5),
															},
														},
														"row": schema.Int64Attribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Int64{
																speakeasy_int64validators.NotNull(),
															},
														},
													},
													Description: `Position of the tile in the dashboard's grid.  Numbering starts at 0, so a tile in the upper left of the dashboard will be at column 0, row 0. Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"size": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"cols": schema.Int64Attribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Int64{
																speakeasy_int64validators.NotNull(),
																int64validator.Between(1, 6),
															},
														},
														"rows": schema.Int64Attribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.Int64{
																speakeasy_int64validators.NotNull(),
																int64validator.AtLeast(1),
															},
														},
													},
													Description: `Number of columns and rows the tile occupies.  A dashboard always has 6 columns, but has as many rows as needed to accommodate the given tiles. Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
											},
											MarkdownDescription: `Information about how the tile is placed on the dashboard.` + "\n" +
												`` + "\n" +
												`Examples:` + "\n" +
												`- a tile occupying the first half of the top row: ` + "`" + `{ "position": { "col": 0, "row": 0 }, size: { "cols": 3, "rows": 1 } }` + "`" + `` + "\n" +
												`- a tile occupying the second half of the top row: ` + "`" + `{ "position": { "col": 3, "row": 0 }, size: { "cols": 3, "rows": 1 } }` + "`" + `` + "\n" +
												`Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The type of tile.  Chart tiles must have type 'chart'. Not Null; must be "chart"`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf("chart"),
											},
										},
									},
									Description: `A tile that queries data and renders a chart.`,
								},
							},
						},
						Description: `The array of tiles.  We currently support up to 102 tiles, which is 17 rows of 6x1 tiles.`,
					},
				},
				MarkdownDescription: `A JSON object describing a dashboard.` + "\n" +
					`` + "\n" +
					`A dashboard is an array of tiles.  All tiles are of type 'chart', which query data and render a chart displaying that data.` + "\n" +
					`` + "\n" +
					`Dashboards have 6 columns and as many rows as necessary to display their tiles.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Contains a unique identifier used for this resource.`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"name": schema.StringAttribute{
				Required: true,
				MarkdownDescription: `The dashboard name, which is displayed at the top of the dashboard and in lists.` + "\n" +
					`It does not need to be unique.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 255),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `An ISO-8601 timestamp representation of entity update date.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *DashboardResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DashboardResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DashboardResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedDashboardUpdateRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.DashboardsCreate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DashboardResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDashboardResponse(ctx, res.DashboardResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DashboardResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DashboardResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDashboardsGetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.DashboardsGet(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DashboardResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDashboardResponse(ctx, res.DashboardResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DashboardResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DashboardResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDashboardsUpdateRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.DashboardsUpdate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DashboardResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDashboardResponse(ctx, res.DashboardResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DashboardResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DashboardResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDashboardsDeleteRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Dashboards.DashboardsDelete(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DashboardResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
