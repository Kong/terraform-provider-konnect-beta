// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AuthServerClaimsListDataSource{}
var _ datasource.DataSourceWithConfigure = &AuthServerClaimsListDataSource{}

func NewAuthServerClaimsListDataSource() datasource.DataSource {
	return &AuthServerClaimsListDataSource{}
}

// AuthServerClaimsListDataSource is the data source implementation.
type AuthServerClaimsListDataSource struct {
	client *sdk.KonnectBeta
}

// AuthServerClaimsListDataSourceModel describes the data model.
type AuthServerClaimsListDataSourceModel struct {
	AuthServerID types.String          `tfsdk:"auth_server_id"`
	Data         []tfTypes.Claim       `tfsdk:"data"`
	Meta         tfTypes.PaginatedMeta `tfsdk:"meta"`
}

// Metadata returns the data source type name.
func (r *AuthServerClaimsListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_auth_server_claims_list"
}

// Schema defines the schema for the data source.
func (r *AuthServerClaimsListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AuthServerClaimsList DataSource",

		Attributes: map[string]schema.Attribute{
			"auth_server_id": schema.StringAttribute{
				Required:    true,
				Description: `The auth server ID`,
			},
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `An ISO-8601 timestamp representation of entity creation date.`,
						},
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Specifies whether the claim is enabled`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the claim`,
						},
						"include_in_all_scopes": schema.BoolAttribute{
							Computed:    true,
							Description: `Specifies whether to include the claim in all scopes. If the value is set to 'false' for a claim, the claim is only included in the scopes that explicitly list it.`,
						},
						"include_in_scopes": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Specifies the scopes IDs in which the claim is included`,
						},
						"include_in_token": schema.BoolAttribute{
							Computed:    true,
							Description: `Specifies whether to include claim in the token. If the value is set to 'false' for a claim, the client instead uses the access token to get claims from the '/userinfo' endpoint.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the claim`,
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: `An ISO-8601 timestamp representation of entity update date.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Specifies the value of the claim. It may contain a static value or a dynamic (templated) value. Static values which are valid JSON will result in a JSON object in the token claims.`,
						},
					},
				},
			},
			"meta": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"page": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"number": schema.Float64Attribute{
								Computed: true,
							},
							"size": schema.Float64Attribute{
								Computed: true,
							},
							"total": schema.Float64Attribute{
								Computed: true,
							},
						},
						Description: `Contains pagination query parameters and the total number of objects returned.`,
					},
				},
				Description: `returns the pagination information`,
			},
		},
	}
}

func (r *AuthServerClaimsListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AuthServerClaimsListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AuthServerClaimsListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListAuthServerClaimsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Authserver.ListAuthServerClaims(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ClaimList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedClaimList(ctx, res.ClaimList)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
