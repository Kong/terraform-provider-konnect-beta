// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshRetryDataSourceModel) ToOperationsGetMeshRetryRequest(ctx context.Context) (*operations.GetMeshRetryRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshRetryRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshRetryDataSourceModel) RefreshFromSharedMeshRetryItem(ctx context.Context, resp *shared.MeshRetryItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshRetryItemTo{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to tfTypes.MeshRetryItemTo
			if toItem.Default == nil {
				to.Default = nil
			} else {
				to.Default = &tfTypes.MeshRetryItemDefault{}
				if toItem.Default.Grpc == nil {
					to.Default.Grpc = nil
				} else {
					to.Default.Grpc = &tfTypes.MeshRetryItemGrpc{}
					if toItem.Default.Grpc.BackOff == nil {
						to.Default.Grpc.BackOff = nil
					} else {
						to.Default.Grpc.BackOff = &tfTypes.BackOff{}
						to.Default.Grpc.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.BaseInterval)
						to.Default.Grpc.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.MaxInterval)
					}
					to.Default.Grpc.NumRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.Grpc.NumRetries))
					to.Default.Grpc.PerTryTimeout = types.StringPointerValue(toItem.Default.Grpc.PerTryTimeout)
					if toItem.Default.Grpc.RateLimitedBackOff == nil {
						to.Default.Grpc.RateLimitedBackOff = nil
					} else {
						to.Default.Grpc.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
						to.Default.Grpc.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.RateLimitedBackOff.MaxInterval)
						to.Default.Grpc.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
						for resetHeadersCount, resetHeadersItem := range toItem.Default.Grpc.RateLimitedBackOff.ResetHeaders {
							var resetHeaders tfTypes.ResetHeaders
							resetHeaders.Format = types.StringValue(string(resetHeadersItem.Format))
							resetHeaders.Name = types.StringValue(resetHeadersItem.Name)
							if resetHeadersCount+1 > len(to.Default.Grpc.RateLimitedBackOff.ResetHeaders) {
								to.Default.Grpc.RateLimitedBackOff.ResetHeaders = append(to.Default.Grpc.RateLimitedBackOff.ResetHeaders, resetHeaders)
							} else {
								to.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Format = resetHeaders.Format
								to.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Name = resetHeaders.Name
							}
						}
					}
					to.Default.Grpc.RetryOn = make([]types.String, 0, len(toItem.Default.Grpc.RetryOn))
					for _, v := range toItem.Default.Grpc.RetryOn {
						to.Default.Grpc.RetryOn = append(to.Default.Grpc.RetryOn, types.StringValue(string(v)))
					}
				}
				if toItem.Default.HTTP == nil {
					to.Default.HTTP = nil
				} else {
					to.Default.HTTP = &tfTypes.MeshRetryItemHTTP{}
					if toItem.Default.HTTP.BackOff == nil {
						to.Default.HTTP.BackOff = nil
					} else {
						to.Default.HTTP.BackOff = &tfTypes.BackOff{}
						to.Default.HTTP.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.BaseInterval)
						to.Default.HTTP.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.MaxInterval)
					}
					to.Default.HTTP.HostSelection = []tfTypes.HostSelection{}
					for hostSelectionCount, hostSelectionItem := range toItem.Default.HTTP.HostSelection {
						var hostSelection tfTypes.HostSelection
						hostSelection.Predicate = types.StringValue(string(hostSelectionItem.Predicate))
						if len(hostSelectionItem.Tags) > 0 {
							hostSelection.Tags = make(map[string]types.String, len(hostSelectionItem.Tags))
							for key3, value3 := range hostSelectionItem.Tags {
								hostSelection.Tags[key3] = types.StringValue(value3)
							}
						}
						hostSelection.UpdateFrequency = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(hostSelectionItem.UpdateFrequency))
						if hostSelectionCount+1 > len(to.Default.HTTP.HostSelection) {
							to.Default.HTTP.HostSelection = append(to.Default.HTTP.HostSelection, hostSelection)
						} else {
							to.Default.HTTP.HostSelection[hostSelectionCount].Predicate = hostSelection.Predicate
							to.Default.HTTP.HostSelection[hostSelectionCount].Tags = hostSelection.Tags
							to.Default.HTTP.HostSelection[hostSelectionCount].UpdateFrequency = hostSelection.UpdateFrequency
						}
					}
					to.Default.HTTP.HostSelectionMaxAttempts = types.Int64PointerValue(toItem.Default.HTTP.HostSelectionMaxAttempts)
					to.Default.HTTP.NumRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.HTTP.NumRetries))
					to.Default.HTTP.PerTryTimeout = types.StringPointerValue(toItem.Default.HTTP.PerTryTimeout)
					if toItem.Default.HTTP.RateLimitedBackOff == nil {
						to.Default.HTTP.RateLimitedBackOff = nil
					} else {
						to.Default.HTTP.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
						to.Default.HTTP.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.RateLimitedBackOff.MaxInterval)
						to.Default.HTTP.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
						for resetHeadersCount1, resetHeadersItem1 := range toItem.Default.HTTP.RateLimitedBackOff.ResetHeaders {
							var resetHeaders1 tfTypes.ResetHeaders
							resetHeaders1.Format = types.StringValue(string(resetHeadersItem1.Format))
							resetHeaders1.Name = types.StringValue(resetHeadersItem1.Name)
							if resetHeadersCount1+1 > len(to.Default.HTTP.RateLimitedBackOff.ResetHeaders) {
								to.Default.HTTP.RateLimitedBackOff.ResetHeaders = append(to.Default.HTTP.RateLimitedBackOff.ResetHeaders, resetHeaders1)
							} else {
								to.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Format = resetHeaders1.Format
								to.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Name = resetHeaders1.Name
							}
						}
					}
					to.Default.HTTP.RetriableRequestHeaders = []tfTypes.Headers{}
					for retriableRequestHeadersCount, retriableRequestHeadersItem := range toItem.Default.HTTP.RetriableRequestHeaders {
						var retriableRequestHeaders tfTypes.Headers
						retriableRequestHeaders.Name = types.StringValue(retriableRequestHeadersItem.Name)
						if retriableRequestHeadersItem.Type != nil {
							retriableRequestHeaders.Type = types.StringValue(string(*retriableRequestHeadersItem.Type))
						} else {
							retriableRequestHeaders.Type = types.StringNull()
						}
						retriableRequestHeaders.Value = types.StringPointerValue(retriableRequestHeadersItem.Value)
						if retriableRequestHeadersCount+1 > len(to.Default.HTTP.RetriableRequestHeaders) {
							to.Default.HTTP.RetriableRequestHeaders = append(to.Default.HTTP.RetriableRequestHeaders, retriableRequestHeaders)
						} else {
							to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Name = retriableRequestHeaders.Name
							to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Type = retriableRequestHeaders.Type
							to.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Value = retriableRequestHeaders.Value
						}
					}
					to.Default.HTTP.RetriableResponseHeaders = []tfTypes.Headers{}
					for retriableResponseHeadersCount, retriableResponseHeadersItem := range toItem.Default.HTTP.RetriableResponseHeaders {
						var retriableResponseHeaders tfTypes.Headers
						retriableResponseHeaders.Name = types.StringValue(retriableResponseHeadersItem.Name)
						if retriableResponseHeadersItem.Type != nil {
							retriableResponseHeaders.Type = types.StringValue(string(*retriableResponseHeadersItem.Type))
						} else {
							retriableResponseHeaders.Type = types.StringNull()
						}
						retriableResponseHeaders.Value = types.StringPointerValue(retriableResponseHeadersItem.Value)
						if retriableResponseHeadersCount+1 > len(to.Default.HTTP.RetriableResponseHeaders) {
							to.Default.HTTP.RetriableResponseHeaders = append(to.Default.HTTP.RetriableResponseHeaders, retriableResponseHeaders)
						} else {
							to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Name = retriableResponseHeaders.Name
							to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Type = retriableResponseHeaders.Type
							to.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Value = retriableResponseHeaders.Value
						}
					}
					to.Default.HTTP.RetryOn = make([]types.String, 0, len(toItem.Default.HTTP.RetryOn))
					for _, v := range toItem.Default.HTTP.RetryOn {
						to.Default.HTTP.RetryOn = append(to.Default.HTTP.RetryOn, types.StringValue(v))
					}
				}
				if toItem.Default.TCP == nil {
					to.Default.TCP = nil
				} else {
					to.Default.TCP = &tfTypes.MeshRetryItemTCP{}
					to.Default.TCP.MaxConnectAttempt = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.TCP.MaxConnectAttempt))
				}
			}
			to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
				for key4, value4 := range toItem.TargetRef.Labels {
					to.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
				for key5, value5 := range toItem.TargetRef.Tags {
					to.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to)
			} else {
				r.Spec.To[toCount].Default = to.Default
				r.Spec.To[toCount].TargetRef = to.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}
