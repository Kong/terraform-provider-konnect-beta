// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayDataPlaneCertificateResourceModel) RefreshFromSharedEventGatewayDataPlaneCertificate(ctx context.Context, resp *shared.EventGatewayDataPlaneCertificate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Certificate = types.StringValue(resp.Certificate)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if resp.Metadata == nil {
			r.Metadata = nil
		} else {
			r.Metadata = &tfTypes.CertificateMetadata{}
			if resp.Metadata.DNSNames != nil {
				r.Metadata.DNSNames = make([]types.String, 0, len(resp.Metadata.DNSNames))
				for _, v := range resp.Metadata.DNSNames {
					r.Metadata.DNSNames = append(r.Metadata.DNSNames, types.StringValue(v))
				}
			}
			if resp.Metadata.EmailAddresses != nil {
				r.Metadata.EmailAddresses = make([]types.String, 0, len(resp.Metadata.EmailAddresses))
				for _, v := range resp.Metadata.EmailAddresses {
					r.Metadata.EmailAddresses = append(r.Metadata.EmailAddresses, types.StringValue(v))
				}
			}
			r.Metadata.Expiry = types.Int64PointerValue(resp.Metadata.Expiry)
			if resp.Metadata.IPAddresses != nil {
				r.Metadata.IPAddresses = make([]types.String, 0, len(resp.Metadata.IPAddresses))
				for _, v := range resp.Metadata.IPAddresses {
					r.Metadata.IPAddresses = append(r.Metadata.IPAddresses, types.StringValue(v))
				}
			}
			r.Metadata.Issuer = types.StringPointerValue(resp.Metadata.Issuer)
			if resp.Metadata.KeyUsages != nil {
				r.Metadata.KeyUsages = make([]types.String, 0, len(resp.Metadata.KeyUsages))
				for _, v := range resp.Metadata.KeyUsages {
					r.Metadata.KeyUsages = append(r.Metadata.KeyUsages, types.StringValue(v))
				}
			}
			if resp.Metadata.SanNames != nil {
				r.Metadata.SanNames = make([]types.String, 0, len(resp.Metadata.SanNames))
				for _, v := range resp.Metadata.SanNames {
					r.Metadata.SanNames = append(r.Metadata.SanNames, types.StringValue(v))
				}
			}
			r.Metadata.Sha256Fingerprint = types.StringPointerValue(resp.Metadata.Sha256Fingerprint)
			r.Metadata.Subject = types.StringPointerValue(resp.Metadata.Subject)
			if resp.Metadata.Uris != nil {
				r.Metadata.Uris = make([]types.String, 0, len(resp.Metadata.Uris))
				for _, v := range resp.Metadata.Uris {
					r.Metadata.Uris = append(r.Metadata.Uris, types.StringValue(v))
				}
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToOperationsCreateEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*operations.CreateEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	createEventGatewayDataPlaneCertificateRequest, createEventGatewayDataPlaneCertificateRequestDiags := r.ToSharedCreateEventGatewayDataPlaneCertificateRequest(ctx)
	diags.Append(createEventGatewayDataPlaneCertificateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayDataPlaneCertificateRequest{
		GatewayID: gatewayID,
		CreateEventGatewayDataPlaneCertificateRequest: createEventGatewayDataPlaneCertificateRequest,
	}

	return &out, diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToOperationsDeleteEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*operations.DeleteEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var certificateID string
	certificateID = r.ID.ValueString()

	out := operations.DeleteEventGatewayDataPlaneCertificateRequest{
		GatewayID:     gatewayID,
		CertificateID: certificateID,
	}

	return &out, diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToOperationsGetEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*operations.GetEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var certificateID string
	certificateID = r.ID.ValueString()

	out := operations.GetEventGatewayDataPlaneCertificateRequest{
		GatewayID:     gatewayID,
		CertificateID: certificateID,
	}

	return &out, diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToOperationsUpdateEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*operations.UpdateEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var certificateID string
	certificateID = r.ID.ValueString()

	updateEventGatewayDataPlaneCertificateRequest, updateEventGatewayDataPlaneCertificateRequestDiags := r.ToSharedUpdateEventGatewayDataPlaneCertificateRequest(ctx)
	diags.Append(updateEventGatewayDataPlaneCertificateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayDataPlaneCertificateRequest{
		GatewayID:     gatewayID,
		CertificateID: certificateID,
		UpdateEventGatewayDataPlaneCertificateRequest: updateEventGatewayDataPlaneCertificateRequest,
	}

	return &out, diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToSharedCreateEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*shared.CreateEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var certificate string
	certificate = r.Certificate.ValueString()

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.CreateEventGatewayDataPlaneCertificateRequest{
		Certificate: certificate,
		Name:        name,
		Description: description,
	}

	return &out, diags
}

func (r *EventGatewayDataPlaneCertificateResourceModel) ToSharedUpdateEventGatewayDataPlaneCertificateRequest(ctx context.Context) (*shared.UpdateEventGatewayDataPlaneCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var certificate string
	certificate = r.Certificate.ValueString()

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.UpdateEventGatewayDataPlaneCertificateRequest{
		Certificate: certificate,
		Name:        name,
		Description: description,
	}

	return &out, diags
}
