// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshTraceListDataSourceModel) ToOperationsGetMeshTraceListRequest(ctx context.Context) (*operations.GetMeshTraceListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshTraceListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}

func (r *MeshTraceListDataSourceModel) RefreshFromSharedMeshTraceList(ctx context.Context, resp *shared.MeshTraceList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshTraceItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshTraceItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			if len(itemsItem.Labels) > 0 {
				items.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key, value := range itemsItem.Labels {
					items.Labels[key] = types.StringValue(value)
				}
			}
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.Default == nil {
				items.Spec.Default = nil
			} else {
				items.Spec.Default = &tfTypes.MeshTraceItemDefault{}
				items.Spec.Default.Backends = []tfTypes.MeshTraceItemBackends{}
				for backendsCount, backendsItem := range itemsItem.Spec.Default.Backends {
					var backends tfTypes.MeshTraceItemBackends
					if backendsItem.Datadog == nil {
						backends.Datadog = nil
					} else {
						backends.Datadog = &tfTypes.Datadog{}
						backends.Datadog.SplitService = types.BoolPointerValue(backendsItem.Datadog.SplitService)
						backends.Datadog.URL = types.StringValue(backendsItem.Datadog.URL)
					}
					if backendsItem.OpenTelemetry == nil {
						backends.OpenTelemetry = nil
					} else {
						backends.OpenTelemetry = &tfTypes.MeshTraceItemOpenTelemetry{}
						backends.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
					}
					backends.Type = types.StringValue(string(backendsItem.Type))
					if backendsItem.Zipkin == nil {
						backends.Zipkin = nil
					} else {
						backends.Zipkin = &tfTypes.Zipkin{}
						if backendsItem.Zipkin.APIVersion != nil {
							backends.Zipkin.APIVersion = types.StringValue(string(*backendsItem.Zipkin.APIVersion))
						} else {
							backends.Zipkin.APIVersion = types.StringNull()
						}
						backends.Zipkin.SharedSpanContext = types.BoolPointerValue(backendsItem.Zipkin.SharedSpanContext)
						backends.Zipkin.TraceId128bit = types.BoolPointerValue(backendsItem.Zipkin.TraceId128bit)
						backends.Zipkin.URL = types.StringValue(backendsItem.Zipkin.URL)
					}
					if backendsCount+1 > len(items.Spec.Default.Backends) {
						items.Spec.Default.Backends = append(items.Spec.Default.Backends, backends)
					} else {
						items.Spec.Default.Backends[backendsCount].Datadog = backends.Datadog
						items.Spec.Default.Backends[backendsCount].OpenTelemetry = backends.OpenTelemetry
						items.Spec.Default.Backends[backendsCount].Type = backends.Type
						items.Spec.Default.Backends[backendsCount].Zipkin = backends.Zipkin
					}
				}
				if itemsItem.Spec.Default.Sampling == nil {
					items.Spec.Default.Sampling = nil
				} else {
					items.Spec.Default.Sampling = &tfTypes.Sampling{}
					if itemsItem.Spec.Default.Sampling.Client != nil {
						items.Spec.Default.Sampling.Client = &tfTypes.MeshItemMode{}
						if itemsItem.Spec.Default.Sampling.Client.Integer != nil {
							items.Spec.Default.Sampling.Client.Integer = types.Int64PointerValue(itemsItem.Spec.Default.Sampling.Client.Integer)
						}
						if itemsItem.Spec.Default.Sampling.Client.Str != nil {
							items.Spec.Default.Sampling.Client.Str = types.StringPointerValue(itemsItem.Spec.Default.Sampling.Client.Str)
						}
					}
					if itemsItem.Spec.Default.Sampling.Overall != nil {
						items.Spec.Default.Sampling.Overall = &tfTypes.MeshItemMode{}
						if itemsItem.Spec.Default.Sampling.Overall.Integer != nil {
							items.Spec.Default.Sampling.Overall.Integer = types.Int64PointerValue(itemsItem.Spec.Default.Sampling.Overall.Integer)
						}
						if itemsItem.Spec.Default.Sampling.Overall.Str != nil {
							items.Spec.Default.Sampling.Overall.Str = types.StringPointerValue(itemsItem.Spec.Default.Sampling.Overall.Str)
						}
					}
					if itemsItem.Spec.Default.Sampling.Random != nil {
						items.Spec.Default.Sampling.Random = &tfTypes.MeshItemMode{}
						if itemsItem.Spec.Default.Sampling.Random.Integer != nil {
							items.Spec.Default.Sampling.Random.Integer = types.Int64PointerValue(itemsItem.Spec.Default.Sampling.Random.Integer)
						}
						if itemsItem.Spec.Default.Sampling.Random.Str != nil {
							items.Spec.Default.Sampling.Random.Str = types.StringPointerValue(itemsItem.Spec.Default.Sampling.Random.Str)
						}
					}
				}
				items.Spec.Default.Tags = []tfTypes.Tags{}
				for tagsCount, tagsItem := range itemsItem.Spec.Default.Tags {
					var tags tfTypes.Tags
					if tagsItem.Header == nil {
						tags.Header = nil
					} else {
						tags.Header = &tfTypes.Header{}
						tags.Header.Default = types.StringPointerValue(tagsItem.Header.Default)
						tags.Header.Name = types.StringValue(tagsItem.Header.Name)
					}
					tags.Literal = types.StringPointerValue(tagsItem.Literal)
					tags.Name = types.StringValue(tagsItem.Name)
					if tagsCount+1 > len(items.Spec.Default.Tags) {
						items.Spec.Default.Tags = append(items.Spec.Default.Tags, tags)
					} else {
						items.Spec.Default.Tags[tagsCount].Header = tags.Header
						items.Spec.Default.Tags[tagsCount].Literal = tags.Literal
						items.Spec.Default.Tags[tagsCount].Name = tags.Name
					}
				}
			}
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key1, value1 := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key2, value2 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
					}
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}
