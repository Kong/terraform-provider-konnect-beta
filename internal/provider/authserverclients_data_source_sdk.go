// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *AuthServerClientsDataSourceModel) RefreshFromSharedClient(ctx context.Context, resp *shared.Client) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessTokenDuration = types.Int64PointerValue(resp.AccessTokenDuration)
		r.AllowAllScopes = types.BoolPointerValue(resp.AllowAllScopes)
		r.AllowScopes = make([]types.String, 0, len(resp.AllowScopes))
		for _, v := range resp.AllowScopes {
			r.AllowScopes = append(r.AllowScopes, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.GrantTypes = make([]types.String, 0, len(resp.GrantTypes))
		for _, v := range resp.GrantTypes {
			r.GrantTypes = append(r.GrantTypes, types.StringValue(string(v)))
		}
		r.ID = types.StringValue(resp.ID)
		r.IDTokenDuration = types.Int64PointerValue(resp.IDTokenDuration)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.LoginURI = types.StringPointerValue(resp.LoginURI)
		r.Name = types.StringValue(resp.Name)
		r.RedirectUris = make([]types.String, 0, len(resp.RedirectUris))
		for _, v := range resp.RedirectUris {
			r.RedirectUris = append(r.RedirectUris, types.StringValue(v))
		}
		r.ResponseTypes = make([]types.String, 0, len(resp.ResponseTypes))
		for _, v := range resp.ResponseTypes {
			r.ResponseTypes = append(r.ResponseTypes, types.StringValue(string(v)))
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *AuthServerClientsDataSourceModel) ToOperationsGetAuthServerClientRequest(ctx context.Context) (*operations.GetAuthServerClientRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authServerID string
	authServerID = r.AuthServerID.ValueString()

	var clientID string
	clientID = r.ID.ValueString()

	out := operations.GetAuthServerClientRequest{
		AuthServerID: authServerID,
		ClientID:     clientID,
	}

	return &out, diags
}
