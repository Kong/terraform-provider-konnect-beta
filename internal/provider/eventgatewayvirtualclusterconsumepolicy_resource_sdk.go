// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToOperationsCreateEventGatewayVirtualClusterConsumePolicyRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterConsumePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayConsumePolicyCreate, eventGatewayConsumePolicyCreateDiags := r.ToSharedEventGatewayConsumePolicyCreate(ctx)
	diags.Append(eventGatewayConsumePolicyCreateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterConsumePolicyRequest{
		GatewayID:                       gatewayID,
		VirtualClusterID:                virtualClusterID,
		ParentPolicyID:                  parentPolicyID,
		EventGatewayConsumePolicyCreate: eventGatewayConsumePolicyCreate,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToOperationsDeleteEventGatewayVirtualClusterConsumePolicyRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterConsumePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterConsumePolicyRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToOperationsGetEventGatewayVirtualClusterConsumePolicyRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterConsumePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterConsumePolicyRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToOperationsUpdateEventGatewayVirtualClusterConsumePolicyRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterConsumePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayConsumePolicyUpdate, eventGatewayConsumePolicyUpdateDiags := r.ToSharedEventGatewayConsumePolicyUpdate(ctx)
	diags.Append(eventGatewayConsumePolicyUpdateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterConsumePolicyRequest{
		GatewayID:                       gatewayID,
		VirtualClusterID:                virtualClusterID,
		PolicyID:                        policyID,
		EventGatewayConsumePolicyUpdate: eventGatewayConsumePolicyUpdate,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToSharedEventGatewayConsumePolicyCreate(ctx context.Context) (*shared.EventGatewayConsumePolicyCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayConsumePolicyCreate
	var eventGatewayModifyHeadersPolicy *shared.EventGatewayModifyHeadersPolicy
	if r.ModifyHeaders != nil {
		name := new(string)
		if !r.ModifyHeaders.Name.IsUnknown() && !r.ModifyHeaders.Name.IsNull() {
			*name = r.ModifyHeaders.Name.ValueString()
		} else {
			name = nil
		}
		description := new(string)
		if !r.ModifyHeaders.Description.IsUnknown() && !r.ModifyHeaders.Description.IsNull() {
			*description = r.ModifyHeaders.Description.ValueString()
		} else {
			description = nil
		}
		enabled := new(bool)
		if !r.ModifyHeaders.Enabled.IsUnknown() && !r.ModifyHeaders.Enabled.IsNull() {
			*enabled = r.ModifyHeaders.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		condition := new(string)
		if !r.ModifyHeaders.Condition.IsUnknown() && !r.ModifyHeaders.Condition.IsNull() {
			*condition = r.ModifyHeaders.Condition.ValueString()
		} else {
			condition = nil
		}
		var actions []shared.EventGatewayModifyHeaderAction
		if r.ModifyHeaders.Config.Actions != nil {
			actions = make([]shared.EventGatewayModifyHeaderAction, 0, len(r.ModifyHeaders.Config.Actions))
			for _, actionsItem := range r.ModifyHeaders.Config.Actions {
				if actionsItem.Remove != nil {
					var key string
					key = actionsItem.Remove.Key.ValueString()

					eventGatewayModifyHeaderRemoveAction := shared.EventGatewayModifyHeaderRemoveAction{
						Key: key,
					}
					actions = append(actions, shared.EventGatewayModifyHeaderAction{
						EventGatewayModifyHeaderRemoveAction: &eventGatewayModifyHeaderRemoveAction,
					})
				}
				if actionsItem.Set != nil {
					var key1 string
					key1 = actionsItem.Set.Key.ValueString()

					var value string
					value = actionsItem.Set.Value.ValueString()

					eventGatewayModifyHeaderSetAction := shared.EventGatewayModifyHeaderSetAction{
						Key:   key1,
						Value: value,
					}
					actions = append(actions, shared.EventGatewayModifyHeaderAction{
						EventGatewayModifyHeaderSetAction: &eventGatewayModifyHeaderSetAction,
					})
				}
			}
		}
		config := shared.EventGatewayModifyHeadersPolicyConfig{
			Actions: actions,
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.ModifyHeaders.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		eventGatewayModifyHeadersPolicy = &shared.EventGatewayModifyHeadersPolicy{
			Name:        name,
			Description: description,
			Enabled:     enabled,
			Condition:   condition,
			Config:      config,
			Labels:      labels,
		}
	}
	if eventGatewayModifyHeadersPolicy != nil {
		out = shared.EventGatewayConsumePolicyCreate{
			EventGatewayModifyHeadersPolicy: eventGatewayModifyHeadersPolicy,
		}
	}
	var eventGatewayConsumeSchemaValidationPolicy *shared.EventGatewayConsumeSchemaValidationPolicy
	if r.SchemaValidation != nil {
		name1 := new(string)
		if !r.SchemaValidation.Name.IsUnknown() && !r.SchemaValidation.Name.IsNull() {
			*name1 = r.SchemaValidation.Name.ValueString()
		} else {
			name1 = nil
		}
		description1 := new(string)
		if !r.SchemaValidation.Description.IsUnknown() && !r.SchemaValidation.Description.IsNull() {
			*description1 = r.SchemaValidation.Description.ValueString()
		} else {
			description1 = nil
		}
		enabled1 := new(bool)
		if !r.SchemaValidation.Enabled.IsUnknown() && !r.SchemaValidation.Enabled.IsNull() {
			*enabled1 = r.SchemaValidation.Enabled.ValueBool()
		} else {
			enabled1 = nil
		}
		condition1 := new(string)
		if !r.SchemaValidation.Condition.IsUnknown() && !r.SchemaValidation.Condition.IsNull() {
			*condition1 = r.SchemaValidation.Condition.ValueString()
		} else {
			condition1 = nil
		}
		var config1 *shared.EventGatewayConsumeSchemaValidationPolicyConfig
		if r.SchemaValidation.Config != nil {
			typeVar := shared.SchemaValidationType(r.SchemaValidation.Config.Type.ValueString())
			var schemaRegistry *shared.SchemaRegistryReference
			if r.SchemaValidation.Config.SchemaRegistry != nil {
				var schemaRegistryReferenceByID *shared.SchemaRegistryReferenceByID
				if r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByID != nil {
					var id string
					id = r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByID.ID.ValueString()

					schemaRegistryReferenceByID = &shared.SchemaRegistryReferenceByID{
						ID: id,
					}
				}
				if schemaRegistryReferenceByID != nil {
					schemaRegistry = &shared.SchemaRegistryReference{
						SchemaRegistryReferenceByID: schemaRegistryReferenceByID,
					}
				}
				var schemaRegistryReferenceByName *shared.SchemaRegistryReferenceByName
				if r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByName != nil {
					var name2 string
					name2 = r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByName.Name.ValueString()

					schemaRegistryReferenceByName = &shared.SchemaRegistryReferenceByName{
						Name: name2,
					}
				}
				if schemaRegistryReferenceByName != nil {
					schemaRegistry = &shared.SchemaRegistryReference{
						SchemaRegistryReferenceByName: schemaRegistryReferenceByName,
					}
				}
			}
			keyValidationAction := new(shared.ConsumeKeyValidationAction)
			if !r.SchemaValidation.Config.KeyValidationAction.IsUnknown() && !r.SchemaValidation.Config.KeyValidationAction.IsNull() {
				*keyValidationAction = shared.ConsumeKeyValidationAction(r.SchemaValidation.Config.KeyValidationAction.ValueString())
			} else {
				keyValidationAction = nil
			}
			valueValidationAction := new(shared.ConsumeValueValidationAction)
			if !r.SchemaValidation.Config.ValueValidationAction.IsUnknown() && !r.SchemaValidation.Config.ValueValidationAction.IsNull() {
				*valueValidationAction = shared.ConsumeValueValidationAction(r.SchemaValidation.Config.ValueValidationAction.ValueString())
			} else {
				valueValidationAction = nil
			}
			config1 = &shared.EventGatewayConsumeSchemaValidationPolicyConfig{
				Type:                  typeVar,
				SchemaRegistry:        schemaRegistry,
				KeyValidationAction:   keyValidationAction,
				ValueValidationAction: valueValidationAction,
			}
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.SchemaValidation.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		eventGatewayConsumeSchemaValidationPolicy = &shared.EventGatewayConsumeSchemaValidationPolicy{
			Name:        name1,
			Description: description1,
			Enabled:     enabled1,
			Condition:   condition1,
			Config:      config1,
			Labels:      labels1,
		}
	}
	if eventGatewayConsumeSchemaValidationPolicy != nil {
		out = shared.EventGatewayConsumePolicyCreate{
			EventGatewayConsumeSchemaValidationPolicy: eventGatewayConsumeSchemaValidationPolicy,
		}
	}
	var eventGatewayDecryptPolicy *shared.EventGatewayDecryptPolicy
	if r.Decrypt != nil {
		name3 := new(string)
		if !r.Decrypt.Name.IsUnknown() && !r.Decrypt.Name.IsNull() {
			*name3 = r.Decrypt.Name.ValueString()
		} else {
			name3 = nil
		}
		description2 := new(string)
		if !r.Decrypt.Description.IsUnknown() && !r.Decrypt.Description.IsNull() {
			*description2 = r.Decrypt.Description.ValueString()
		} else {
			description2 = nil
		}
		enabled2 := new(bool)
		if !r.Decrypt.Enabled.IsUnknown() && !r.Decrypt.Enabled.IsNull() {
			*enabled2 = r.Decrypt.Enabled.ValueBool()
		} else {
			enabled2 = nil
		}
		condition2 := new(string)
		if !r.Decrypt.Condition.IsUnknown() && !r.Decrypt.Condition.IsNull() {
			*condition2 = r.Decrypt.Condition.ValueString()
		} else {
			condition2 = nil
		}
		failureMode := shared.EncryptionFailureMode(r.Decrypt.Config.FailureMode.ValueString())
		keySources := make([]shared.EventGatewayKeySource, 0, len(r.Decrypt.Config.KeySources))
		for _, keySourcesItem := range r.Decrypt.Config.KeySources {
			if keySourcesItem.Aws != nil {
				eventGatewayAWSKeySource := shared.EventGatewayAWSKeySource{}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayAWSKeySource: &eventGatewayAWSKeySource,
				})
			}
			if keySourcesItem.Static != nil {
				keys := make([]shared.Keys, 0, len(keySourcesItem.Static.Keys))
				for _, keysItem := range keySourcesItem.Static.Keys {
					var id1 string
					id1 = keysItem.ID.ValueString()

					var key2 string
					key2 = keysItem.Key.ValueString()

					keys = append(keys, shared.Keys{
						ID:  id1,
						Key: key2,
					})
				}
				eventGatewayStaticKeySource := shared.EventGatewayStaticKeySource{
					Keys: keys,
				}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayStaticKeySource: &eventGatewayStaticKeySource,
				})
			}
		}
		decrypt := make([]shared.DecryptionRecordSelector, 0, len(r.Decrypt.Config.Decrypt))
		for _, decryptItem := range r.Decrypt.Config.Decrypt {
			partOfRecord := shared.PartOfRecord(decryptItem.PartOfRecord.ValueString())
			decrypt = append(decrypt, shared.DecryptionRecordSelector{
				PartOfRecord: partOfRecord,
			})
		}
		config2 := shared.EventGatewayDecryptPolicyConfig{
			FailureMode: failureMode,
			KeySources:  keySources,
			Decrypt:     decrypt,
		}
		labels2 := make(map[string]*string)
		for labelsKey2, labelsValue2 := range r.Decrypt.Labels {
			labelsInst2 := new(string)
			if !labelsValue2.IsUnknown() && !labelsValue2.IsNull() {
				*labelsInst2 = labelsValue2.ValueString()
			} else {
				labelsInst2 = nil
			}
			labels2[labelsKey2] = labelsInst2
		}
		eventGatewayDecryptPolicy = &shared.EventGatewayDecryptPolicy{
			Name:        name3,
			Description: description2,
			Enabled:     enabled2,
			Condition:   condition2,
			Config:      config2,
			Labels:      labels2,
		}
	}
	if eventGatewayDecryptPolicy != nil {
		out = shared.EventGatewayConsumePolicyCreate{
			EventGatewayDecryptPolicy: eventGatewayDecryptPolicy,
		}
	}
	var eventGatewaySkipRecordPolicy *shared.EventGatewaySkipRecordPolicy
	if r.SkipRecord != nil {
		name4 := new(string)
		if !r.SkipRecord.Name.IsUnknown() && !r.SkipRecord.Name.IsNull() {
			*name4 = r.SkipRecord.Name.ValueString()
		} else {
			name4 = nil
		}
		description3 := new(string)
		if !r.SkipRecord.Description.IsUnknown() && !r.SkipRecord.Description.IsNull() {
			*description3 = r.SkipRecord.Description.ValueString()
		} else {
			description3 = nil
		}
		enabled3 := new(bool)
		if !r.SkipRecord.Enabled.IsUnknown() && !r.SkipRecord.Enabled.IsNull() {
			*enabled3 = r.SkipRecord.Enabled.ValueBool()
		} else {
			enabled3 = nil
		}
		condition3 := new(string)
		if !r.SkipRecord.Condition.IsUnknown() && !r.SkipRecord.Condition.IsNull() {
			*condition3 = r.SkipRecord.Condition.ValueString()
		} else {
			condition3 = nil
		}
		labels3 := make(map[string]*string)
		for labelsKey3, labelsValue3 := range r.SkipRecord.Labels {
			labelsInst3 := new(string)
			if !labelsValue3.IsUnknown() && !labelsValue3.IsNull() {
				*labelsInst3 = labelsValue3.ValueString()
			} else {
				labelsInst3 = nil
			}
			labels3[labelsKey3] = labelsInst3
		}
		eventGatewaySkipRecordPolicy = &shared.EventGatewaySkipRecordPolicy{
			Name:        name4,
			Description: description3,
			Enabled:     enabled3,
			Condition:   condition3,
			Labels:      labels3,
		}
	}
	if eventGatewaySkipRecordPolicy != nil {
		out = shared.EventGatewayConsumePolicyCreate{
			EventGatewaySkipRecordPolicy: eventGatewaySkipRecordPolicy,
		}
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterConsumePolicyResourceModel) ToSharedEventGatewayConsumePolicyUpdate(ctx context.Context) (*shared.EventGatewayConsumePolicyUpdate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.EventGatewayConsumePolicyUpdate
	var eventGatewayModifyHeadersPolicy *shared.EventGatewayModifyHeadersPolicy
	if r.ModifyHeaders != nil {
		name := new(string)
		if !r.ModifyHeaders.Name.IsUnknown() && !r.ModifyHeaders.Name.IsNull() {
			*name = r.ModifyHeaders.Name.ValueString()
		} else {
			name = nil
		}
		description := new(string)
		if !r.ModifyHeaders.Description.IsUnknown() && !r.ModifyHeaders.Description.IsNull() {
			*description = r.ModifyHeaders.Description.ValueString()
		} else {
			description = nil
		}
		enabled := new(bool)
		if !r.ModifyHeaders.Enabled.IsUnknown() && !r.ModifyHeaders.Enabled.IsNull() {
			*enabled = r.ModifyHeaders.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		condition := new(string)
		if !r.ModifyHeaders.Condition.IsUnknown() && !r.ModifyHeaders.Condition.IsNull() {
			*condition = r.ModifyHeaders.Condition.ValueString()
		} else {
			condition = nil
		}
		var actions []shared.EventGatewayModifyHeaderAction
		if r.ModifyHeaders.Config.Actions != nil {
			actions = make([]shared.EventGatewayModifyHeaderAction, 0, len(r.ModifyHeaders.Config.Actions))
			for _, actionsItem := range r.ModifyHeaders.Config.Actions {
				if actionsItem.Remove != nil {
					var key string
					key = actionsItem.Remove.Key.ValueString()

					eventGatewayModifyHeaderRemoveAction := shared.EventGatewayModifyHeaderRemoveAction{
						Key: key,
					}
					actions = append(actions, shared.EventGatewayModifyHeaderAction{
						EventGatewayModifyHeaderRemoveAction: &eventGatewayModifyHeaderRemoveAction,
					})
				}
				if actionsItem.Set != nil {
					var key1 string
					key1 = actionsItem.Set.Key.ValueString()

					var value string
					value = actionsItem.Set.Value.ValueString()

					eventGatewayModifyHeaderSetAction := shared.EventGatewayModifyHeaderSetAction{
						Key:   key1,
						Value: value,
					}
					actions = append(actions, shared.EventGatewayModifyHeaderAction{
						EventGatewayModifyHeaderSetAction: &eventGatewayModifyHeaderSetAction,
					})
				}
			}
		}
		config := shared.EventGatewayModifyHeadersPolicyConfig{
			Actions: actions,
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.ModifyHeaders.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		eventGatewayModifyHeadersPolicy = &shared.EventGatewayModifyHeadersPolicy{
			Name:        name,
			Description: description,
			Enabled:     enabled,
			Condition:   condition,
			Config:      config,
			Labels:      labels,
		}
	}
	if eventGatewayModifyHeadersPolicy != nil {
		out = shared.EventGatewayConsumePolicyUpdate{
			EventGatewayModifyHeadersPolicy: eventGatewayModifyHeadersPolicy,
		}
	}
	var eventGatewayConsumeSchemaValidationPolicy *shared.EventGatewayConsumeSchemaValidationPolicy
	if r.SchemaValidation != nil {
		name1 := new(string)
		if !r.SchemaValidation.Name.IsUnknown() && !r.SchemaValidation.Name.IsNull() {
			*name1 = r.SchemaValidation.Name.ValueString()
		} else {
			name1 = nil
		}
		description1 := new(string)
		if !r.SchemaValidation.Description.IsUnknown() && !r.SchemaValidation.Description.IsNull() {
			*description1 = r.SchemaValidation.Description.ValueString()
		} else {
			description1 = nil
		}
		enabled1 := new(bool)
		if !r.SchemaValidation.Enabled.IsUnknown() && !r.SchemaValidation.Enabled.IsNull() {
			*enabled1 = r.SchemaValidation.Enabled.ValueBool()
		} else {
			enabled1 = nil
		}
		condition1 := new(string)
		if !r.SchemaValidation.Condition.IsUnknown() && !r.SchemaValidation.Condition.IsNull() {
			*condition1 = r.SchemaValidation.Condition.ValueString()
		} else {
			condition1 = nil
		}
		var config1 *shared.EventGatewayConsumeSchemaValidationPolicyConfig
		if r.SchemaValidation.Config != nil {
			typeVar := shared.SchemaValidationType(r.SchemaValidation.Config.Type.ValueString())
			var schemaRegistry *shared.SchemaRegistryReference
			if r.SchemaValidation.Config.SchemaRegistry != nil {
				var schemaRegistryReferenceByID *shared.SchemaRegistryReferenceByID
				if r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByID != nil {
					var id string
					id = r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByID.ID.ValueString()

					schemaRegistryReferenceByID = &shared.SchemaRegistryReferenceByID{
						ID: id,
					}
				}
				if schemaRegistryReferenceByID != nil {
					schemaRegistry = &shared.SchemaRegistryReference{
						SchemaRegistryReferenceByID: schemaRegistryReferenceByID,
					}
				}
				var schemaRegistryReferenceByName *shared.SchemaRegistryReferenceByName
				if r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByName != nil {
					var name2 string
					name2 = r.SchemaValidation.Config.SchemaRegistry.SchemaRegistryReferenceByName.Name.ValueString()

					schemaRegistryReferenceByName = &shared.SchemaRegistryReferenceByName{
						Name: name2,
					}
				}
				if schemaRegistryReferenceByName != nil {
					schemaRegistry = &shared.SchemaRegistryReference{
						SchemaRegistryReferenceByName: schemaRegistryReferenceByName,
					}
				}
			}
			keyValidationAction := new(shared.ConsumeKeyValidationAction)
			if !r.SchemaValidation.Config.KeyValidationAction.IsUnknown() && !r.SchemaValidation.Config.KeyValidationAction.IsNull() {
				*keyValidationAction = shared.ConsumeKeyValidationAction(r.SchemaValidation.Config.KeyValidationAction.ValueString())
			} else {
				keyValidationAction = nil
			}
			valueValidationAction := new(shared.ConsumeValueValidationAction)
			if !r.SchemaValidation.Config.ValueValidationAction.IsUnknown() && !r.SchemaValidation.Config.ValueValidationAction.IsNull() {
				*valueValidationAction = shared.ConsumeValueValidationAction(r.SchemaValidation.Config.ValueValidationAction.ValueString())
			} else {
				valueValidationAction = nil
			}
			config1 = &shared.EventGatewayConsumeSchemaValidationPolicyConfig{
				Type:                  typeVar,
				SchemaRegistry:        schemaRegistry,
				KeyValidationAction:   keyValidationAction,
				ValueValidationAction: valueValidationAction,
			}
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.SchemaValidation.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		eventGatewayConsumeSchemaValidationPolicy = &shared.EventGatewayConsumeSchemaValidationPolicy{
			Name:        name1,
			Description: description1,
			Enabled:     enabled1,
			Condition:   condition1,
			Config:      config1,
			Labels:      labels1,
		}
	}
	if eventGatewayConsumeSchemaValidationPolicy != nil {
		out = shared.EventGatewayConsumePolicyUpdate{
			EventGatewayConsumeSchemaValidationPolicy: eventGatewayConsumeSchemaValidationPolicy,
		}
	}
	var eventGatewayDecryptSensitiveDataAwarePolicy *shared.EventGatewayDecryptSensitiveDataAwarePolicy
	if r.Decrypt != nil {
		name3 := new(string)
		if !r.Decrypt.Name.IsUnknown() && !r.Decrypt.Name.IsNull() {
			*name3 = r.Decrypt.Name.ValueString()
		} else {
			name3 = nil
		}
		description2 := new(string)
		if !r.Decrypt.Description.IsUnknown() && !r.Decrypt.Description.IsNull() {
			*description2 = r.Decrypt.Description.ValueString()
		} else {
			description2 = nil
		}
		enabled2 := new(bool)
		if !r.Decrypt.Enabled.IsUnknown() && !r.Decrypt.Enabled.IsNull() {
			*enabled2 = r.Decrypt.Enabled.ValueBool()
		} else {
			enabled2 = nil
		}
		condition2 := new(string)
		if !r.Decrypt.Condition.IsUnknown() && !r.Decrypt.Condition.IsNull() {
			*condition2 = r.Decrypt.Condition.ValueString()
		} else {
			condition2 = nil
		}
		failureMode := shared.EncryptionFailureMode(r.Decrypt.Config.FailureMode.ValueString())
		keySources := make([]shared.EventGatewayKeySourceSensitiveDataAware, 0, len(r.Decrypt.Config.KeySources))
		for _, keySourcesItem := range r.Decrypt.Config.KeySources {
			if keySourcesItem.Aws != nil {
				eventGatewayAWSKeySource := shared.EventGatewayAWSKeySource{}
				keySources = append(keySources, shared.EventGatewayKeySourceSensitiveDataAware{
					EventGatewayAWSKeySource: &eventGatewayAWSKeySource,
				})
			}
			if keySourcesItem.Static != nil {
				keys := make([]shared.EventGatewayStaticKeySourceSensitiveDataAwareKeys, 0, len(keySourcesItem.Static.Keys))
				for _, keysItem := range keySourcesItem.Static.Keys {
					var id1 string
					id1 = keysItem.ID.ValueString()

					key2 := new(string)
					if !keysItem.Key.IsUnknown() && !keysItem.Key.IsNull() {
						*key2 = keysItem.Key.ValueString()
					} else {
						key2 = nil
					}
					keys = append(keys, shared.EventGatewayStaticKeySourceSensitiveDataAwareKeys{
						ID:  id1,
						Key: key2,
					})
				}
				eventGatewayStaticKeySourceSensitiveDataAware := shared.EventGatewayStaticKeySourceSensitiveDataAware{
					Keys: keys,
				}
				keySources = append(keySources, shared.EventGatewayKeySourceSensitiveDataAware{
					EventGatewayStaticKeySourceSensitiveDataAware: &eventGatewayStaticKeySourceSensitiveDataAware,
				})
			}
		}
		decrypt := make([]shared.DecryptionRecordSelector, 0, len(r.Decrypt.Config.Decrypt))
		for _, decryptItem := range r.Decrypt.Config.Decrypt {
			partOfRecord := shared.PartOfRecord(decryptItem.PartOfRecord.ValueString())
			decrypt = append(decrypt, shared.DecryptionRecordSelector{
				PartOfRecord: partOfRecord,
			})
		}
		config2 := shared.EventGatewayDecryptPolicyConfigSensitiveDataAware{
			FailureMode: failureMode,
			KeySources:  keySources,
			Decrypt:     decrypt,
		}
		labels2 := make(map[string]*string)
		for labelsKey2, labelsValue2 := range r.Decrypt.Labels {
			labelsInst2 := new(string)
			if !labelsValue2.IsUnknown() && !labelsValue2.IsNull() {
				*labelsInst2 = labelsValue2.ValueString()
			} else {
				labelsInst2 = nil
			}
			labels2[labelsKey2] = labelsInst2
		}
		eventGatewayDecryptSensitiveDataAwarePolicy = &shared.EventGatewayDecryptSensitiveDataAwarePolicy{
			Name:        name3,
			Description: description2,
			Enabled:     enabled2,
			Condition:   condition2,
			Config:      config2,
			Labels:      labels2,
		}
	}
	if eventGatewayDecryptSensitiveDataAwarePolicy != nil {
		out = shared.EventGatewayConsumePolicyUpdate{
			EventGatewayDecryptSensitiveDataAwarePolicy: eventGatewayDecryptSensitiveDataAwarePolicy,
		}
	}
	var eventGatewaySkipRecordPolicy *shared.EventGatewaySkipRecordPolicy
	if r.SkipRecord != nil {
		name4 := new(string)
		if !r.SkipRecord.Name.IsUnknown() && !r.SkipRecord.Name.IsNull() {
			*name4 = r.SkipRecord.Name.ValueString()
		} else {
			name4 = nil
		}
		description3 := new(string)
		if !r.SkipRecord.Description.IsUnknown() && !r.SkipRecord.Description.IsNull() {
			*description3 = r.SkipRecord.Description.ValueString()
		} else {
			description3 = nil
		}
		enabled3 := new(bool)
		if !r.SkipRecord.Enabled.IsUnknown() && !r.SkipRecord.Enabled.IsNull() {
			*enabled3 = r.SkipRecord.Enabled.ValueBool()
		} else {
			enabled3 = nil
		}
		condition3 := new(string)
		if !r.SkipRecord.Condition.IsUnknown() && !r.SkipRecord.Condition.IsNull() {
			*condition3 = r.SkipRecord.Condition.ValueString()
		} else {
			condition3 = nil
		}
		labels3 := make(map[string]*string)
		for labelsKey3, labelsValue3 := range r.SkipRecord.Labels {
			labelsInst3 := new(string)
			if !labelsValue3.IsUnknown() && !labelsValue3.IsNull() {
				*labelsInst3 = labelsValue3.ValueString()
			} else {
				labelsInst3 = nil
			}
			labels3[labelsKey3] = labelsInst3
		}
		eventGatewaySkipRecordPolicy = &shared.EventGatewaySkipRecordPolicy{
			Name:        name4,
			Description: description3,
			Enabled:     enabled3,
			Condition:   condition3,
			Labels:      labels3,
		}
	}
	if eventGatewaySkipRecordPolicy != nil {
		out = shared.EventGatewayConsumePolicyUpdate{
			EventGatewaySkipRecordPolicy: eventGatewaySkipRecordPolicy,
		}
	}

	return &out, diags
}
