// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshExternalServiceResourceModel) ToSharedMeshExternalServiceItemInput(ctx context.Context) (*shared.MeshExternalServiceItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.MeshExternalServiceItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	endpoints := make([]shared.Endpoints, 0, len(r.Spec.Endpoints))
	for _, endpointsItem := range r.Spec.Endpoints {
		var address string
		address = endpointsItem.Address.ValueString()

		var port int64
		port = endpointsItem.Port.ValueInt64()

		endpoints = append(endpoints, shared.Endpoints{
			Address: address,
			Port:    port,
		})
	}
	var extension *shared.MeshExternalServiceItemExtension
	if r.Spec.Extension != nil {
		var config interface{}
		if !r.Spec.Extension.Config.IsUnknown() && !r.Spec.Extension.Config.IsNull() {
			_ = json.Unmarshal([]byte(r.Spec.Extension.Config.ValueString()), &config)
		}
		var typeVar1 string
		typeVar1 = r.Spec.Extension.Type.ValueString()

		extension = &shared.MeshExternalServiceItemExtension{
			Config: config,
			Type:   typeVar1,
		}
	}
	var port1 int64
	port1 = r.Spec.Match.Port.ValueInt64()

	protocol := new(shared.MeshExternalServiceItemProtocol)
	if !r.Spec.Match.Protocol.IsUnknown() && !r.Spec.Match.Protocol.IsNull() {
		*protocol = shared.MeshExternalServiceItemProtocol(r.Spec.Match.Protocol.ValueString())
	} else {
		protocol = nil
	}
	typeVar2 := new(shared.MeshExternalServiceItemSpecType)
	if !r.Spec.Match.Type.IsUnknown() && !r.Spec.Match.Type.IsNull() {
		*typeVar2 = shared.MeshExternalServiceItemSpecType(r.Spec.Match.Type.ValueString())
	} else {
		typeVar2 = nil
	}
	match := shared.Match{
		Port:     port1,
		Protocol: protocol,
		Type:     typeVar2,
	}
	var tls *shared.TLS
	if r.Spec.TLS != nil {
		allowRenegotiation := new(bool)
		if !r.Spec.TLS.AllowRenegotiation.IsUnknown() && !r.Spec.TLS.AllowRenegotiation.IsNull() {
			*allowRenegotiation = r.Spec.TLS.AllowRenegotiation.ValueBool()
		} else {
			allowRenegotiation = nil
		}
		enabled := new(bool)
		if !r.Spec.TLS.Enabled.IsUnknown() && !r.Spec.TLS.Enabled.IsNull() {
			*enabled = r.Spec.TLS.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		var verification *shared.Verification
		if r.Spec.TLS.Verification != nil {
			var caCert *shared.CaCert
			if r.Spec.TLS.Verification.CaCert != nil {
				inline := new(string)
				if !r.Spec.TLS.Verification.CaCert.Inline.IsUnknown() && !r.Spec.TLS.Verification.CaCert.Inline.IsNull() {
					*inline = r.Spec.TLS.Verification.CaCert.Inline.ValueString()
				} else {
					inline = nil
				}
				inlineString := new(string)
				if !r.Spec.TLS.Verification.CaCert.InlineString.IsUnknown() && !r.Spec.TLS.Verification.CaCert.InlineString.IsNull() {
					*inlineString = r.Spec.TLS.Verification.CaCert.InlineString.ValueString()
				} else {
					inlineString = nil
				}
				secret := new(string)
				if !r.Spec.TLS.Verification.CaCert.Secret.IsUnknown() && !r.Spec.TLS.Verification.CaCert.Secret.IsNull() {
					*secret = r.Spec.TLS.Verification.CaCert.Secret.ValueString()
				} else {
					secret = nil
				}
				caCert = &shared.CaCert{
					Inline:       inline,
					InlineString: inlineString,
					Secret:       secret,
				}
			}
			var clientCert *shared.ClientCert
			if r.Spec.TLS.Verification.ClientCert != nil {
				inline1 := new(string)
				if !r.Spec.TLS.Verification.ClientCert.Inline.IsUnknown() && !r.Spec.TLS.Verification.ClientCert.Inline.IsNull() {
					*inline1 = r.Spec.TLS.Verification.ClientCert.Inline.ValueString()
				} else {
					inline1 = nil
				}
				inlineString1 := new(string)
				if !r.Spec.TLS.Verification.ClientCert.InlineString.IsUnknown() && !r.Spec.TLS.Verification.ClientCert.InlineString.IsNull() {
					*inlineString1 = r.Spec.TLS.Verification.ClientCert.InlineString.ValueString()
				} else {
					inlineString1 = nil
				}
				secret1 := new(string)
				if !r.Spec.TLS.Verification.ClientCert.Secret.IsUnknown() && !r.Spec.TLS.Verification.ClientCert.Secret.IsNull() {
					*secret1 = r.Spec.TLS.Verification.ClientCert.Secret.ValueString()
				} else {
					secret1 = nil
				}
				clientCert = &shared.ClientCert{
					Inline:       inline1,
					InlineString: inlineString1,
					Secret:       secret1,
				}
			}
			var clientKey *shared.ClientKey
			if r.Spec.TLS.Verification.ClientKey != nil {
				inline2 := new(string)
				if !r.Spec.TLS.Verification.ClientKey.Inline.IsUnknown() && !r.Spec.TLS.Verification.ClientKey.Inline.IsNull() {
					*inline2 = r.Spec.TLS.Verification.ClientKey.Inline.ValueString()
				} else {
					inline2 = nil
				}
				inlineString2 := new(string)
				if !r.Spec.TLS.Verification.ClientKey.InlineString.IsUnknown() && !r.Spec.TLS.Verification.ClientKey.InlineString.IsNull() {
					*inlineString2 = r.Spec.TLS.Verification.ClientKey.InlineString.ValueString()
				} else {
					inlineString2 = nil
				}
				secret2 := new(string)
				if !r.Spec.TLS.Verification.ClientKey.Secret.IsUnknown() && !r.Spec.TLS.Verification.ClientKey.Secret.IsNull() {
					*secret2 = r.Spec.TLS.Verification.ClientKey.Secret.ValueString()
				} else {
					secret2 = nil
				}
				clientKey = &shared.ClientKey{
					Inline:       inline2,
					InlineString: inlineString2,
					Secret:       secret2,
				}
			}
			mode := new(shared.MeshExternalServiceItemMode)
			if !r.Spec.TLS.Verification.Mode.IsUnknown() && !r.Spec.TLS.Verification.Mode.IsNull() {
				*mode = shared.MeshExternalServiceItemMode(r.Spec.TLS.Verification.Mode.ValueString())
			} else {
				mode = nil
			}
			serverName := new(string)
			if !r.Spec.TLS.Verification.ServerName.IsUnknown() && !r.Spec.TLS.Verification.ServerName.IsNull() {
				*serverName = r.Spec.TLS.Verification.ServerName.ValueString()
			} else {
				serverName = nil
			}
			subjectAltNames := make([]shared.SubjectAltNames, 0, len(r.Spec.TLS.Verification.SubjectAltNames))
			for _, subjectAltNamesItem := range r.Spec.TLS.Verification.SubjectAltNames {
				type1 := new(shared.MeshExternalServiceItemSpecTLSType)
				if !subjectAltNamesItem.Type.IsUnknown() && !subjectAltNamesItem.Type.IsNull() {
					*type1 = shared.MeshExternalServiceItemSpecTLSType(subjectAltNamesItem.Type.ValueString())
				} else {
					type1 = nil
				}
				var value string
				value = subjectAltNamesItem.Value.ValueString()

				subjectAltNames = append(subjectAltNames, shared.SubjectAltNames{
					Type:  type1,
					Value: value,
				})
			}
			verification = &shared.Verification{
				CaCert:          caCert,
				ClientCert:      clientCert,
				ClientKey:       clientKey,
				Mode:            mode,
				ServerName:      serverName,
				SubjectAltNames: subjectAltNames,
			}
		}
		var version *shared.Version
		if r.Spec.TLS.Version != nil {
			max := new(shared.Max)
			if !r.Spec.TLS.Version.Max.IsUnknown() && !r.Spec.TLS.Version.Max.IsNull() {
				*max = shared.Max(r.Spec.TLS.Version.Max.ValueString())
			} else {
				max = nil
			}
			min := new(shared.Min)
			if !r.Spec.TLS.Version.Min.IsUnknown() && !r.Spec.TLS.Version.Min.IsNull() {
				*min = shared.Min(r.Spec.TLS.Version.Min.ValueString())
			} else {
				min = nil
			}
			version = &shared.Version{
				Max: max,
				Min: min,
			}
		}
		tls = &shared.TLS{
			AllowRenegotiation: allowRenegotiation,
			Enabled:            enabled,
			Verification:       verification,
			Version:            version,
		}
	}
	spec := shared.MeshExternalServiceItemSpec{
		Endpoints: endpoints,
		Extension: extension,
		Match:     match,
		TLS:       tls,
	}
	out := shared.MeshExternalServiceItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}

func (r *MeshExternalServiceResourceModel) ToOperationsCreateMeshExternalServiceRequest(ctx context.Context) (*operations.CreateMeshExternalServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshExternalServiceItem, meshExternalServiceItemDiags := r.ToSharedMeshExternalServiceItemInput(ctx)
	diags.Append(meshExternalServiceItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateMeshExternalServiceRequest{
		CpID:                    cpID,
		Mesh:                    mesh,
		Name:                    name,
		MeshExternalServiceItem: *meshExternalServiceItem,
	}

	return &out, diags
}

func (r *MeshExternalServiceResourceModel) ToOperationsUpdateMeshExternalServiceRequest(ctx context.Context) (*operations.UpdateMeshExternalServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshExternalServiceItem, meshExternalServiceItemDiags := r.ToSharedMeshExternalServiceItemInput(ctx)
	diags.Append(meshExternalServiceItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateMeshExternalServiceRequest{
		CpID:                    cpID,
		Mesh:                    mesh,
		Name:                    name,
		MeshExternalServiceItem: *meshExternalServiceItem,
	}

	return &out, diags
}

func (r *MeshExternalServiceResourceModel) ToOperationsGetMeshExternalServiceRequest(ctx context.Context) (*operations.GetMeshExternalServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshExternalServiceRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshExternalServiceResourceModel) ToOperationsDeleteMeshExternalServiceRequest(ctx context.Context) (*operations.DeleteMeshExternalServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshExternalServiceRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshExternalServiceResourceModel) RefreshFromSharedMeshExternalServiceCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshExternalServiceCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshExternalServiceResourceModel) RefreshFromSharedMeshExternalServiceItem(ctx context.Context, resp *shared.MeshExternalServiceItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.Endpoints = []tfTypes.Endpoints{}
		if len(r.Spec.Endpoints) > len(resp.Spec.Endpoints) {
			r.Spec.Endpoints = r.Spec.Endpoints[:len(resp.Spec.Endpoints)]
		}
		for endpointsCount, endpointsItem := range resp.Spec.Endpoints {
			var endpoints tfTypes.Endpoints
			endpoints.Address = types.StringValue(endpointsItem.Address)
			endpoints.Port = types.Int64Value(endpointsItem.Port)
			if endpointsCount+1 > len(r.Spec.Endpoints) {
				r.Spec.Endpoints = append(r.Spec.Endpoints, endpoints)
			} else {
				r.Spec.Endpoints[endpointsCount].Address = endpoints.Address
				r.Spec.Endpoints[endpointsCount].Port = endpoints.Port
			}
		}
		if resp.Spec.Extension == nil {
			r.Spec.Extension = nil
		} else {
			r.Spec.Extension = &tfTypes.MeshExternalServiceItemExtension{}
			if resp.Spec.Extension.Config == nil {
				r.Spec.Extension.Config = types.StringNull()
			} else {
				configResult, _ := json.Marshal(resp.Spec.Extension.Config)
				r.Spec.Extension.Config = types.StringValue(string(configResult))
			}
			r.Spec.Extension.Type = types.StringValue(resp.Spec.Extension.Type)
		}
		r.Spec.Match.Port = types.Int64Value(resp.Spec.Match.Port)
		if resp.Spec.Match.Protocol != nil {
			r.Spec.Match.Protocol = types.StringValue(string(*resp.Spec.Match.Protocol))
		} else {
			r.Spec.Match.Protocol = types.StringNull()
		}
		if resp.Spec.Match.Type != nil {
			r.Spec.Match.Type = types.StringValue(string(*resp.Spec.Match.Type))
		} else {
			r.Spec.Match.Type = types.StringNull()
		}
		if resp.Spec.TLS == nil {
			r.Spec.TLS = nil
		} else {
			r.Spec.TLS = &tfTypes.TLS{}
			r.Spec.TLS.AllowRenegotiation = types.BoolPointerValue(resp.Spec.TLS.AllowRenegotiation)
			r.Spec.TLS.Enabled = types.BoolPointerValue(resp.Spec.TLS.Enabled)
			if resp.Spec.TLS.Verification == nil {
				r.Spec.TLS.Verification = nil
			} else {
				r.Spec.TLS.Verification = &tfTypes.Verification{}
				if resp.Spec.TLS.Verification.CaCert == nil {
					r.Spec.TLS.Verification.CaCert = nil
				} else {
					r.Spec.TLS.Verification.CaCert = &tfTypes.CaCert{}
					r.Spec.TLS.Verification.CaCert.Inline = types.StringPointerValue(resp.Spec.TLS.Verification.CaCert.Inline)
					r.Spec.TLS.Verification.CaCert.InlineString = types.StringPointerValue(resp.Spec.TLS.Verification.CaCert.InlineString)
					r.Spec.TLS.Verification.CaCert.Secret = types.StringPointerValue(resp.Spec.TLS.Verification.CaCert.Secret)
				}
				if resp.Spec.TLS.Verification.ClientCert == nil {
					r.Spec.TLS.Verification.ClientCert = nil
				} else {
					r.Spec.TLS.Verification.ClientCert = &tfTypes.CaCert{}
					r.Spec.TLS.Verification.ClientCert.Inline = types.StringPointerValue(resp.Spec.TLS.Verification.ClientCert.Inline)
					r.Spec.TLS.Verification.ClientCert.InlineString = types.StringPointerValue(resp.Spec.TLS.Verification.ClientCert.InlineString)
					r.Spec.TLS.Verification.ClientCert.Secret = types.StringPointerValue(resp.Spec.TLS.Verification.ClientCert.Secret)
				}
				if resp.Spec.TLS.Verification.ClientKey == nil {
					r.Spec.TLS.Verification.ClientKey = nil
				} else {
					r.Spec.TLS.Verification.ClientKey = &tfTypes.CaCert{}
					r.Spec.TLS.Verification.ClientKey.Inline = types.StringPointerValue(resp.Spec.TLS.Verification.ClientKey.Inline)
					r.Spec.TLS.Verification.ClientKey.InlineString = types.StringPointerValue(resp.Spec.TLS.Verification.ClientKey.InlineString)
					r.Spec.TLS.Verification.ClientKey.Secret = types.StringPointerValue(resp.Spec.TLS.Verification.ClientKey.Secret)
				}
				if resp.Spec.TLS.Verification.Mode != nil {
					r.Spec.TLS.Verification.Mode = types.StringValue(string(*resp.Spec.TLS.Verification.Mode))
				} else {
					r.Spec.TLS.Verification.Mode = types.StringNull()
				}
				r.Spec.TLS.Verification.ServerName = types.StringPointerValue(resp.Spec.TLS.Verification.ServerName)
				r.Spec.TLS.Verification.SubjectAltNames = []tfTypes.SubjectAltNames{}
				if len(r.Spec.TLS.Verification.SubjectAltNames) > len(resp.Spec.TLS.Verification.SubjectAltNames) {
					r.Spec.TLS.Verification.SubjectAltNames = r.Spec.TLS.Verification.SubjectAltNames[:len(resp.Spec.TLS.Verification.SubjectAltNames)]
				}
				for subjectAltNamesCount, subjectAltNamesItem := range resp.Spec.TLS.Verification.SubjectAltNames {
					var subjectAltNames tfTypes.SubjectAltNames
					if subjectAltNamesItem.Type != nil {
						subjectAltNames.Type = types.StringValue(string(*subjectAltNamesItem.Type))
					} else {
						subjectAltNames.Type = types.StringNull()
					}
					subjectAltNames.Value = types.StringValue(subjectAltNamesItem.Value)
					if subjectAltNamesCount+1 > len(r.Spec.TLS.Verification.SubjectAltNames) {
						r.Spec.TLS.Verification.SubjectAltNames = append(r.Spec.TLS.Verification.SubjectAltNames, subjectAltNames)
					} else {
						r.Spec.TLS.Verification.SubjectAltNames[subjectAltNamesCount].Type = subjectAltNames.Type
						r.Spec.TLS.Verification.SubjectAltNames[subjectAltNamesCount].Value = subjectAltNames.Value
					}
				}
			}
			if resp.Spec.TLS.Version == nil {
				r.Spec.TLS.Version = nil
			} else {
				r.Spec.TLS.Version = &tfTypes.Version{}
				if resp.Spec.TLS.Version.Max != nil {
					r.Spec.TLS.Version.Max = types.StringValue(string(*resp.Spec.TLS.Version.Max))
				} else {
					r.Spec.TLS.Version.Max = types.StringNull()
				}
				if resp.Spec.TLS.Version.Min != nil {
					r.Spec.TLS.Version.Min = types.StringValue(string(*resp.Spec.TLS.Version.Min))
				} else {
					r.Spec.TLS.Version.Min = types.StringNull()
				}
			}
		}
		if resp.Status == nil {
			r.Status = nil
		} else {
			r.Status = &tfTypes.Status{}
			r.Status.Addresses = []tfTypes.Addresses{}
			if len(r.Status.Addresses) > len(resp.Status.Addresses) {
				r.Status.Addresses = r.Status.Addresses[:len(resp.Status.Addresses)]
			}
			for addressesCount, addressesItem := range resp.Status.Addresses {
				var addresses tfTypes.Addresses
				addresses.Hostname = types.StringPointerValue(addressesItem.Hostname)
				if addressesItem.HostnameGeneratorRef == nil {
					addresses.HostnameGeneratorRef = nil
				} else {
					addresses.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
					addresses.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
				}
				addresses.Origin = types.StringPointerValue(addressesItem.Origin)
				if addressesCount+1 > len(r.Status.Addresses) {
					r.Status.Addresses = append(r.Status.Addresses, addresses)
				} else {
					r.Status.Addresses[addressesCount].Hostname = addresses.Hostname
					r.Status.Addresses[addressesCount].HostnameGeneratorRef = addresses.HostnameGeneratorRef
					r.Status.Addresses[addressesCount].Origin = addresses.Origin
				}
			}
			r.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}
			if len(r.Status.HostnameGenerators) > len(resp.Status.HostnameGenerators) {
				r.Status.HostnameGenerators = r.Status.HostnameGenerators[:len(resp.Status.HostnameGenerators)]
			}
			for hostnameGeneratorsCount, hostnameGeneratorsItem := range resp.Status.HostnameGenerators {
				var hostnameGenerators tfTypes.HostnameGenerators
				hostnameGenerators.Conditions = []tfTypes.Conditions{}
				for conditionsCount, conditionsItem := range hostnameGeneratorsItem.Conditions {
					var conditions tfTypes.Conditions
					conditions.Message = types.StringValue(conditionsItem.Message)
					conditions.Reason = types.StringValue(conditionsItem.Reason)
					conditions.Status = types.StringValue(string(conditionsItem.Status))
					conditions.Type = types.StringValue(conditionsItem.Type)
					if conditionsCount+1 > len(hostnameGenerators.Conditions) {
						hostnameGenerators.Conditions = append(hostnameGenerators.Conditions, conditions)
					} else {
						hostnameGenerators.Conditions[conditionsCount].Message = conditions.Message
						hostnameGenerators.Conditions[conditionsCount].Reason = conditions.Reason
						hostnameGenerators.Conditions[conditionsCount].Status = conditions.Status
						hostnameGenerators.Conditions[conditionsCount].Type = conditions.Type
					}
				}
				hostnameGenerators.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)
				if hostnameGeneratorsCount+1 > len(r.Status.HostnameGenerators) {
					r.Status.HostnameGenerators = append(r.Status.HostnameGenerators, hostnameGenerators)
				} else {
					r.Status.HostnameGenerators[hostnameGeneratorsCount].Conditions = hostnameGenerators.Conditions
					r.Status.HostnameGenerators[hostnameGeneratorsCount].HostnameGeneratorRef = hostnameGenerators.HostnameGeneratorRef
				}
			}
			if resp.Status.Vip == nil {
				r.Status.Vip = nil
			} else {
				r.Status.Vip = &tfTypes.Vip{}
				r.Status.Vip.IP = types.StringPointerValue(resp.Status.Vip.IP)
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}
