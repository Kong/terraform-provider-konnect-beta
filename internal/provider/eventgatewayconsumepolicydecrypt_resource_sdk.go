// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayConsumePolicyDecryptResourceModel) RefreshFromSharedEventGatewayPolicy(ctx context.Context, resp *shared.EventGatewayPolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Condition = types.StringPointerValue(resp.Condition)
		if r.Config == nil {
			configPriorData := r.Config
			r.Config = &tfTypes.EventGatewayDecryptPolicyConfig{}

			if configPriorData != nil {
				r.Config.Decrypt = configPriorData.Decrypt
			}
			if configPriorData != nil {
				r.Config.FailureMode = configPriorData.FailureMode
			}
			if configPriorData != nil {
				r.Config.KeySources = configPriorData.KeySources
			}
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentPolicyID = types.StringPointerValue(resp.ParentPolicyID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayConsumePolicyDecryptResourceModel) ToOperationsCreateEventGatewayVirtualClusterConsumePolicyDecryptRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterConsumePolicyDecryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	parentPolicyID := new(string)
	if !r.ParentPolicyID.IsUnknown() && !r.ParentPolicyID.IsNull() {
		*parentPolicyID = r.ParentPolicyID.ValueString()
	} else {
		parentPolicyID = nil
	}
	eventGatewayDecryptPolicy, eventGatewayDecryptPolicyDiags := r.ToSharedEventGatewayDecryptPolicy(ctx)
	diags.Append(eventGatewayDecryptPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterConsumePolicyDecryptRequest{
		GatewayID:                 gatewayID,
		VirtualClusterID:          virtualClusterID,
		ParentPolicyID:            parentPolicyID,
		EventGatewayDecryptPolicy: eventGatewayDecryptPolicy,
	}

	return &out, diags
}

func (r *EventGatewayConsumePolicyDecryptResourceModel) ToOperationsDeleteEventGatewayVirtualClusterConsumePolicyDecryptRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterConsumePolicyDecryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterConsumePolicyDecryptRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayConsumePolicyDecryptResourceModel) ToOperationsGetEventGatewayVirtualClusterConsumePolicyDecryptRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterConsumePolicyDecryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterConsumePolicyDecryptRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
		PolicyID:         policyID,
	}

	return &out, diags
}

func (r *EventGatewayConsumePolicyDecryptResourceModel) ToOperationsUpdateEventGatewayVirtualClusterConsumePolicyDecryptRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterConsumePolicyDecryptRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.VirtualClusterID.ValueString()

	var policyID string
	policyID = r.ID.ValueString()

	eventGatewayDecryptPolicy, eventGatewayDecryptPolicyDiags := r.ToSharedEventGatewayDecryptPolicy(ctx)
	diags.Append(eventGatewayDecryptPolicyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterConsumePolicyDecryptRequest{
		GatewayID:                 gatewayID,
		VirtualClusterID:          virtualClusterID,
		PolicyID:                  policyID,
		EventGatewayDecryptPolicy: eventGatewayDecryptPolicy,
	}

	return &out, diags
}

func (r *EventGatewayConsumePolicyDecryptResourceModel) ToSharedEventGatewayDecryptPolicy(ctx context.Context) (*shared.EventGatewayDecryptPolicy, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	condition := new(string)
	if !r.Condition.IsUnknown() && !r.Condition.IsNull() {
		*condition = r.Condition.ValueString()
	} else {
		condition = nil
	}
	var config *shared.EventGatewayDecryptPolicyConfig
	if r.Config != nil {
		failureMode := shared.EncryptionFailureMode(r.Config.FailureMode.ValueString())
		keySources := make([]shared.EventGatewayKeySource, 0, len(r.Config.KeySources))
		for _, keySourcesItem := range r.Config.KeySources {
			if keySourcesItem.Aws != nil {
				eventGatewayAWSKeySource := shared.EventGatewayAWSKeySource{}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayAWSKeySource: &eventGatewayAWSKeySource,
				})
			}
			if keySourcesItem.Static != nil {
				keys := make([]shared.Keys, 0, len(keySourcesItem.Static.Keys))
				for _, keysItem := range keySourcesItem.Static.Keys {
					var id string
					id = keysItem.ID.ValueString()

					var key string
					key = keysItem.Key.ValueString()

					keys = append(keys, shared.Keys{
						ID:  id,
						Key: key,
					})
				}
				eventGatewayStaticKeySource := shared.EventGatewayStaticKeySource{
					Keys: keys,
				}
				keySources = append(keySources, shared.EventGatewayKeySource{
					EventGatewayStaticKeySource: &eventGatewayStaticKeySource,
				})
			}
		}
		decrypt := make([]shared.DecryptionRecordSelector, 0, len(r.Config.Decrypt))
		for _, decryptItem := range r.Config.Decrypt {
			partOfRecord := shared.PartOfRecord(decryptItem.PartOfRecord.ValueString())
			decrypt = append(decrypt, shared.DecryptionRecordSelector{
				PartOfRecord: partOfRecord,
			})
		}
		config = &shared.EventGatewayDecryptPolicyConfig{
			FailureMode: failureMode,
			KeySources:  keySources,
			Decrypt:     decrypt,
		}
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.EventGatewayDecryptPolicy{
		Name:        name,
		Description: description,
		Enabled:     enabled,
		Condition:   condition,
		Config:      config,
		Labels:      labels,
	}

	return &out, diags
}
