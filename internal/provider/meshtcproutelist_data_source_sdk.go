// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshTCPRouteListDataSourceModel) RefreshFromSharedMeshTCPRouteList(ctx context.Context, resp *shared.MeshTCPRouteList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshTCPRouteItem{}

		for _, itemsItem := range resp.Items {
			var items tfTypes.MeshTCPRouteItem

			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, itemsItem.Labels)
			diags.Append(labelsDiags...)
			labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
			diags.Append(labelsDiags...)
			items.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key, value := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key] = types.StringValue(value)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key1, value1 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
					}
				}
			}
			items.Spec.To = []tfTypes.MeshTCPRouteItemTo{}

			for _, toItem := range itemsItem.Spec.To {
				var to tfTypes.MeshTCPRouteItemTo

				to.Rules = []tfTypes.MeshTCPRouteItemRules{}

				for _, rulesItem := range toItem.Rules {
					var rules tfTypes.MeshTCPRouteItemRules

					rules.Default.BackendRefs = []tfTypes.BackendRefs{}

					for _, backendRefsItem := range rulesItem.Default.BackendRefs {
						var backendRefs tfTypes.BackendRefs

						backendRefs.Kind = types.StringValue(string(backendRefsItem.Kind))
						if len(backendRefsItem.Labels) > 0 {
							backendRefs.Labels = make(map[string]types.String, len(backendRefsItem.Labels))
							for key2, value2 := range backendRefsItem.Labels {
								backendRefs.Labels[key2] = types.StringValue(value2)
							}
						}
						backendRefs.Mesh = types.StringPointerValue(backendRefsItem.Mesh)
						backendRefs.Name = types.StringPointerValue(backendRefsItem.Name)
						backendRefs.Namespace = types.StringPointerValue(backendRefsItem.Namespace)
						backendRefs.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(backendRefsItem.Port))
						backendRefs.ProxyTypes = make([]types.String, 0, len(backendRefsItem.ProxyTypes))
						for _, v := range backendRefsItem.ProxyTypes {
							backendRefs.ProxyTypes = append(backendRefs.ProxyTypes, types.StringValue(string(v)))
						}
						backendRefs.SectionName = types.StringPointerValue(backendRefsItem.SectionName)
						if len(backendRefsItem.Tags) > 0 {
							backendRefs.Tags = make(map[string]types.String, len(backendRefsItem.Tags))
							for key3, value3 := range backendRefsItem.Tags {
								backendRefs.Tags[key3] = types.StringValue(value3)
							}
						}
						backendRefs.Weight = types.Int64PointerValue(backendRefsItem.Weight)

						rules.Default.BackendRefs = append(rules.Default.BackendRefs, backendRefs)
					}

					to.Rules = append(to.Rules, rules)
				}
				to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
				if len(toItem.TargetRef.Labels) > 0 {
					to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
					for key4, value4 := range toItem.TargetRef.Labels {
						to.TargetRef.Labels[key4] = types.StringValue(value4)
					}
				}
				to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
				to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
				to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
				to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
				for _, v := range toItem.TargetRef.ProxyTypes {
					to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
				if len(toItem.TargetRef.Tags) > 0 {
					to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
					for key5, value5 := range toItem.TargetRef.Tags {
						to.TargetRef.Tags[key5] = types.StringValue(value5)
					}
				}

				items.Spec.To = append(items.Spec.To, to)
			}
			items.Type = types.StringValue(string(itemsItem.Type))

			r.Items = append(r.Items, items)
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}

func (r *MeshTCPRouteListDataSourceModel) ToOperationsGetMeshTCPRouteListRequest(ctx context.Context) (*operations.GetMeshTCPRouteListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var filter *operations.GetMeshTCPRouteListQueryParamFilter
	if r.Filter != nil {
		key := new(string)
		if !r.Filter.Key.IsUnknown() && !r.Filter.Key.IsNull() {
			*key = r.Filter.Key.ValueString()
		} else {
			key = nil
		}
		value := new(string)
		if !r.Filter.Value.IsUnknown() && !r.Filter.Value.IsNull() {
			*value = r.Filter.Value.ValueString()
		} else {
			value = nil
		}
		filter = &operations.GetMeshTCPRouteListQueryParamFilter{
			Key:   key,
			Value: value,
		}
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshTCPRouteListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Filter: filter,
		Mesh:   mesh,
	}

	return &out, diags
}
