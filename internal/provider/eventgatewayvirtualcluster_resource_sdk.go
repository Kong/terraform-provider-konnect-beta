// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *EventGatewayVirtualClusterResourceModel) RefreshFromSharedVirtualCluster(ctx context.Context, resp *shared.VirtualCluster) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ACLMode = types.StringValue(string(resp.ACLMode))
		r.Authentication = []tfTypes.VirtualClusterAuthenticationScheme{}

		for _, authenticationItem := range resp.Authentication {
			var authentication tfTypes.VirtualClusterAuthenticationScheme

			if authenticationItem.VirtualClusterAuthenticationAnonymous != nil {
				authentication.Anonymous = &tfTypes.BackendClusterAuthenticationAnonymous{}
			}
			if authenticationItem.VirtualClusterAuthenticationOauthBearer != nil {
				authentication.OauthBearer = &tfTypes.VirtualClusterAuthenticationOauthBearer{}
				if authenticationItem.VirtualClusterAuthenticationOauthBearer.ClaimsMapping == nil {
					authentication.OauthBearer.ClaimsMapping = nil
				} else {
					authentication.OauthBearer.ClaimsMapping = &tfTypes.VirtualClusterAuthenticationClaimsMapping{}
					authentication.OauthBearer.ClaimsMapping.Scope = types.StringPointerValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.ClaimsMapping.Scope)
					authentication.OauthBearer.ClaimsMapping.Sub = types.StringPointerValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.ClaimsMapping.Sub)
				}
				if authenticationItem.VirtualClusterAuthenticationOauthBearer.Jwks == nil {
					authentication.OauthBearer.Jwks = nil
				} else {
					authentication.OauthBearer.Jwks = &tfTypes.VirtualClusterAuthenticationJWKS{}
					authentication.OauthBearer.Jwks.CacheExpiration = types.StringPointerValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.Jwks.CacheExpiration)
					authentication.OauthBearer.Jwks.Endpoint = types.StringValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.Jwks.Endpoint)
					authentication.OauthBearer.Jwks.Timeout = types.StringPointerValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.Jwks.Timeout)
				}
				authentication.OauthBearer.Mediation = types.StringValue(string(authenticationItem.VirtualClusterAuthenticationOauthBearer.Mediation))
				if authenticationItem.VirtualClusterAuthenticationOauthBearer.Validate == nil {
					authentication.OauthBearer.Validate = nil
				} else {
					authentication.OauthBearer.Validate = &tfTypes.VirtualClusterAuthenticationValidate{}
					if authenticationItem.VirtualClusterAuthenticationOauthBearer.Validate.Audiences != nil {
						authentication.OauthBearer.Validate.Audiences = []tfTypes.EventGatewayACLOperation{}

						for _, audiencesItem := range authenticationItem.VirtualClusterAuthenticationOauthBearer.Validate.Audiences {
							var audiences tfTypes.EventGatewayACLOperation

							audiences.Name = types.StringValue(audiencesItem.Name)

							authentication.OauthBearer.Validate.Audiences = append(authentication.OauthBearer.Validate.Audiences, audiences)
						}
					}
					authentication.OauthBearer.Validate.Issuer = types.StringPointerValue(authenticationItem.VirtualClusterAuthenticationOauthBearer.Validate.Issuer)
				}
			}
			if authenticationItem.VirtualClusterAuthenticationSaslPlainSensitiveDataAware != nil {
				authentication.SaslPlain = &tfTypes.VirtualClusterAuthenticationSaslPlain{}
				authentication.SaslPlain.Mediation = types.StringValue(string(authenticationItem.VirtualClusterAuthenticationSaslPlainSensitiveDataAware.Mediation))
				if authenticationItem.VirtualClusterAuthenticationSaslPlainSensitiveDataAware.Principals != nil {
					authentication.SaslPlain.Principals = []tfTypes.BackendClusterAuthenticationSaslPlain{}

					for _, principalsItem := range authenticationItem.VirtualClusterAuthenticationSaslPlainSensitiveDataAware.Principals {
						var principals tfTypes.BackendClusterAuthenticationSaslPlain

						principals.Password = types.StringPointerValue(principalsItem.Password)
						principals.Username = types.StringValue(principalsItem.Username)

						authentication.SaslPlain.Principals = append(authentication.SaslPlain.Principals, principals)
					}
				}
			}
			if authenticationItem.VirtualClusterAuthenticationSaslScram != nil {
				authentication.SaslScram = &tfTypes.VirtualClusterAuthenticationSaslScram{}
				authentication.SaslScram.Algorithm = types.StringValue(string(authenticationItem.VirtualClusterAuthenticationSaslScram.Algorithm))
			}

			r.Authentication = append(r.Authentication, authentication)
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Destination.ID = types.StringValue(resp.Destination.ID)
		r.Destination.Name = types.StringValue(resp.Destination.Name)
		r.DNSLabel = types.StringValue(resp.DNSLabel)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Namespace == nil {
			r.Namespace = nil
		} else {
			r.Namespace = &tfTypes.VirtualClusterNamespace{}
			if resp.Namespace.Additional == nil {
				r.Namespace.Additional = nil
			} else {
				r.Namespace.Additional = &tfTypes.VirtualClusterNamespaceAdditionalProperties{}
				r.Namespace.Additional.ConsumerGroups = []tfTypes.VirtualClusterNamespaceIDSelector{}

				for _, consumerGroupsItem := range resp.Namespace.Additional.ConsumerGroups {
					var consumerGroups tfTypes.VirtualClusterNamespaceIDSelector

					if consumerGroupsItem.VirtualClusterNamespaceIDSelectorExactList != nil {
						consumerGroups.ExactList = &tfTypes.VirtualClusterNamespaceIDSelectorExactList{}
						if consumerGroupsItem.VirtualClusterNamespaceIDSelectorExactList.ExactList != nil {
							consumerGroups.ExactList.ExactList = []tfTypes.ExactList{}

							for _, exactListItem := range consumerGroupsItem.VirtualClusterNamespaceIDSelectorExactList.ExactList {
								var exactList tfTypes.ExactList

								exactList.Value = types.StringValue(exactListItem.Value)

								consumerGroups.ExactList.ExactList = append(consumerGroups.ExactList.ExactList, exactList)
							}
						}
					}
					if consumerGroupsItem.VirtualClusterNamespaceIDSelectorGlob != nil {
						consumerGroups.Glob = &tfTypes.VirtualClusterNamespaceIDSelectorGlob{}
						consumerGroups.Glob.Glob = types.StringValue(consumerGroupsItem.VirtualClusterNamespaceIDSelectorGlob.Glob)
					}

					r.Namespace.Additional.ConsumerGroups = append(r.Namespace.Additional.ConsumerGroups, consumerGroups)
				}
				r.Namespace.Additional.Topics = []tfTypes.VirtualClusterNamespaceTopicSelector{}

				for _, topicsItem := range resp.Namespace.Additional.Topics {
					var topics tfTypes.VirtualClusterNamespaceTopicSelector

					if topicsItem.VirtualClusterNamespaceTopicSelectorExactList != nil {
						topics.ExactList = &tfTypes.VirtualClusterNamespaceTopicSelectorExactList{}
						if topicsItem.VirtualClusterNamespaceTopicSelectorExactList.Conflict != nil {
							topics.ExactList.Conflict = types.StringValue(string(*topicsItem.VirtualClusterNamespaceTopicSelectorExactList.Conflict))
						} else {
							topics.ExactList.Conflict = types.StringNull()
						}
						if topicsItem.VirtualClusterNamespaceTopicSelectorExactList.ExactList != nil {
							topics.ExactList.ExactList = []tfTypes.NamespaceExactAllowListItem{}

							for _, exactListItem1 := range topicsItem.VirtualClusterNamespaceTopicSelectorExactList.ExactList {
								var exactList1 tfTypes.NamespaceExactAllowListItem

								exactList1.Backend = types.StringValue(exactListItem1.Backend)

								topics.ExactList.ExactList = append(topics.ExactList.ExactList, exactList1)
							}
						}
					}
					if topicsItem.VirtualClusterNamespaceTopicSelectorGlob != nil {
						topics.Glob = &tfTypes.VirtualClusterNamespaceTopicSelectorGlob{}
						if topicsItem.VirtualClusterNamespaceTopicSelectorGlob.Conflict != nil {
							topics.Glob.Conflict = types.StringValue(string(*topicsItem.VirtualClusterNamespaceTopicSelectorGlob.Conflict))
						} else {
							topics.Glob.Conflict = types.StringNull()
						}
						topics.Glob.Glob = types.StringValue(topicsItem.VirtualClusterNamespaceTopicSelectorGlob.Glob)
					}

					r.Namespace.Additional.Topics = append(r.Namespace.Additional.Topics, topics)
				}
			}
			r.Namespace.Mode = types.StringValue(string(resp.Namespace.Mode))
			r.Namespace.Prefix = types.StringValue(resp.Namespace.Prefix)
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToOperationsCreateEventGatewayVirtualClusterRequest(ctx context.Context) (*operations.CreateEventGatewayVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	createVirtualClusterRequest, createVirtualClusterRequestDiags := r.ToSharedCreateVirtualClusterRequest(ctx)
	diags.Append(createVirtualClusterRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateEventGatewayVirtualClusterRequest{
		GatewayID:                   gatewayID,
		CreateVirtualClusterRequest: createVirtualClusterRequest,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToOperationsDeleteEventGatewayVirtualClusterRequest(ctx context.Context) (*operations.DeleteEventGatewayVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.ID.ValueString()

	out := operations.DeleteEventGatewayVirtualClusterRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToOperationsGetEventGatewayVirtualClusterRequest(ctx context.Context) (*operations.GetEventGatewayVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.ID.ValueString()

	out := operations.GetEventGatewayVirtualClusterRequest{
		GatewayID:        gatewayID,
		VirtualClusterID: virtualClusterID,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToOperationsUpdateEventGatewayVirtualClusterRequest(ctx context.Context) (*operations.UpdateEventGatewayVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var gatewayID string
	gatewayID = r.GatewayID.ValueString()

	var virtualClusterID string
	virtualClusterID = r.ID.ValueString()

	updateVirtualClusterRequest, updateVirtualClusterRequestDiags := r.ToSharedUpdateVirtualClusterRequest(ctx)
	diags.Append(updateVirtualClusterRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateEventGatewayVirtualClusterRequest{
		GatewayID:                   gatewayID,
		VirtualClusterID:            virtualClusterID,
		UpdateVirtualClusterRequest: updateVirtualClusterRequest,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToSharedCreateVirtualClusterRequest(ctx context.Context) (*shared.CreateVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	id := new(string)
	if !r.Destination.ID.IsUnknown() && !r.Destination.ID.IsNull() {
		*id = r.Destination.ID.ValueString()
	} else {
		id = nil
	}
	destination := shared.BackendClusterReferenceModify{
		ID: id,
	}
	authentication := make([]shared.VirtualClusterAuthenticationScheme, 0, len(r.Authentication))
	for _, authenticationItem := range r.Authentication {
		if authenticationItem.Anonymous != nil {
			virtualClusterAuthenticationAnonymous := shared.VirtualClusterAuthenticationAnonymous{}
			authentication = append(authentication, shared.VirtualClusterAuthenticationScheme{
				VirtualClusterAuthenticationAnonymous: &virtualClusterAuthenticationAnonymous,
			})
		}
		if authenticationItem.SaslPlain != nil {
			mediation := shared.Mediation(authenticationItem.SaslPlain.Mediation.ValueString())
			var principals []shared.VirtualClusterAuthenticationPrincipal
			if authenticationItem.SaslPlain.Principals != nil {
				principals = make([]shared.VirtualClusterAuthenticationPrincipal, 0, len(authenticationItem.SaslPlain.Principals))
				for _, principalsItem := range authenticationItem.SaslPlain.Principals {
					var username string
					username = principalsItem.Username.ValueString()

					var password string
					password = principalsItem.Password.ValueString()

					principals = append(principals, shared.VirtualClusterAuthenticationPrincipal{
						Username: username,
						Password: password,
					})
				}
			}
			virtualClusterAuthenticationSaslPlain := shared.VirtualClusterAuthenticationSaslPlain{
				Mediation:  mediation,
				Principals: principals,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationScheme{
				VirtualClusterAuthenticationSaslPlain: &virtualClusterAuthenticationSaslPlain,
			})
		}
		if authenticationItem.SaslScram != nil {
			algorithm := shared.VirtualClusterAuthenticationSaslScramAlgorithm(authenticationItem.SaslScram.Algorithm.ValueString())
			virtualClusterAuthenticationSaslScram := shared.VirtualClusterAuthenticationSaslScram{
				Algorithm: algorithm,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationScheme{
				VirtualClusterAuthenticationSaslScram: &virtualClusterAuthenticationSaslScram,
			})
		}
		if authenticationItem.OauthBearer != nil {
			mediation1 := shared.VirtualClusterAuthenticationOauthBearerMediation(authenticationItem.OauthBearer.Mediation.ValueString())
			var claimsMapping *shared.VirtualClusterAuthenticationClaimsMapping
			if authenticationItem.OauthBearer.ClaimsMapping != nil {
				sub := new(string)
				if !authenticationItem.OauthBearer.ClaimsMapping.Sub.IsUnknown() && !authenticationItem.OauthBearer.ClaimsMapping.Sub.IsNull() {
					*sub = authenticationItem.OauthBearer.ClaimsMapping.Sub.ValueString()
				} else {
					sub = nil
				}
				scope := new(string)
				if !authenticationItem.OauthBearer.ClaimsMapping.Scope.IsUnknown() && !authenticationItem.OauthBearer.ClaimsMapping.Scope.IsNull() {
					*scope = authenticationItem.OauthBearer.ClaimsMapping.Scope.ValueString()
				} else {
					scope = nil
				}
				claimsMapping = &shared.VirtualClusterAuthenticationClaimsMapping{
					Sub:   sub,
					Scope: scope,
				}
			}
			var jwks *shared.VirtualClusterAuthenticationJWKS
			if authenticationItem.OauthBearer.Jwks != nil {
				var endpoint string
				endpoint = authenticationItem.OauthBearer.Jwks.Endpoint.ValueString()

				timeout := new(string)
				if !authenticationItem.OauthBearer.Jwks.Timeout.IsUnknown() && !authenticationItem.OauthBearer.Jwks.Timeout.IsNull() {
					*timeout = authenticationItem.OauthBearer.Jwks.Timeout.ValueString()
				} else {
					timeout = nil
				}
				cacheExpiration := new(string)
				if !authenticationItem.OauthBearer.Jwks.CacheExpiration.IsUnknown() && !authenticationItem.OauthBearer.Jwks.CacheExpiration.IsNull() {
					*cacheExpiration = authenticationItem.OauthBearer.Jwks.CacheExpiration.ValueString()
				} else {
					cacheExpiration = nil
				}
				jwks = &shared.VirtualClusterAuthenticationJWKS{
					Endpoint:        endpoint,
					Timeout:         timeout,
					CacheExpiration: cacheExpiration,
				}
			}
			var validate *shared.VirtualClusterAuthenticationValidate
			if authenticationItem.OauthBearer.Validate != nil {
				var audiences []shared.VirtualClusterAuthenticationAudience
				if authenticationItem.OauthBearer.Validate.Audiences != nil {
					audiences = make([]shared.VirtualClusterAuthenticationAudience, 0, len(authenticationItem.OauthBearer.Validate.Audiences))
					for _, audiencesItem := range authenticationItem.OauthBearer.Validate.Audiences {
						var name1 string
						name1 = audiencesItem.Name.ValueString()

						audiences = append(audiences, shared.VirtualClusterAuthenticationAudience{
							Name: name1,
						})
					}
				}
				issuer := new(string)
				if !authenticationItem.OauthBearer.Validate.Issuer.IsUnknown() && !authenticationItem.OauthBearer.Validate.Issuer.IsNull() {
					*issuer = authenticationItem.OauthBearer.Validate.Issuer.ValueString()
				} else {
					issuer = nil
				}
				validate = &shared.VirtualClusterAuthenticationValidate{
					Audiences: audiences,
					Issuer:    issuer,
				}
			}
			virtualClusterAuthenticationOauthBearer := shared.VirtualClusterAuthenticationOauthBearer{
				Mediation:     mediation1,
				ClaimsMapping: claimsMapping,
				Jwks:          jwks,
				Validate:      validate,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationScheme{
				VirtualClusterAuthenticationOauthBearer: &virtualClusterAuthenticationOauthBearer,
			})
		}
	}
	var namespace *shared.VirtualClusterNamespace
	if r.Namespace != nil {
		mode := shared.Mode(r.Namespace.Mode.ValueString())
		var prefix string
		prefix = r.Namespace.Prefix.ValueString()

		var additional *shared.VirtualClusterNamespaceAdditionalProperties
		if r.Namespace.Additional != nil {
			topics := make([]shared.VirtualClusterNamespaceTopicSelector, 0, len(r.Namespace.Additional.Topics))
			for _, topicsItem := range r.Namespace.Additional.Topics {
				if topicsItem.Glob != nil {
					var glob string
					glob = topicsItem.Glob.Glob.ValueString()

					conflict := new(shared.Conflict)
					if !topicsItem.Glob.Conflict.IsUnknown() && !topicsItem.Glob.Conflict.IsNull() {
						*conflict = shared.Conflict(topicsItem.Glob.Conflict.ValueString())
					} else {
						conflict = nil
					}
					virtualClusterNamespaceTopicSelectorGlob := shared.VirtualClusterNamespaceTopicSelectorGlob{
						Glob:     glob,
						Conflict: conflict,
					}
					topics = append(topics, shared.VirtualClusterNamespaceTopicSelector{
						VirtualClusterNamespaceTopicSelectorGlob: &virtualClusterNamespaceTopicSelectorGlob,
					})
				}
				if topicsItem.ExactList != nil {
					var exactList []shared.NamespaceExactAllowListItem
					if topicsItem.ExactList.ExactList != nil {
						exactList = make([]shared.NamespaceExactAllowListItem, 0, len(topicsItem.ExactList.ExactList))
						for _, exactListItem := range topicsItem.ExactList.ExactList {
							var backend string
							backend = exactListItem.Backend.ValueString()

							exactList = append(exactList, shared.NamespaceExactAllowListItem{
								Backend: backend,
							})
						}
					}
					conflict1 := new(shared.VirtualClusterNamespaceTopicSelectorExactListConflict)
					if !topicsItem.ExactList.Conflict.IsUnknown() && !topicsItem.ExactList.Conflict.IsNull() {
						*conflict1 = shared.VirtualClusterNamespaceTopicSelectorExactListConflict(topicsItem.ExactList.Conflict.ValueString())
					} else {
						conflict1 = nil
					}
					virtualClusterNamespaceTopicSelectorExactList := shared.VirtualClusterNamespaceTopicSelectorExactList{
						ExactList: exactList,
						Conflict:  conflict1,
					}
					topics = append(topics, shared.VirtualClusterNamespaceTopicSelector{
						VirtualClusterNamespaceTopicSelectorExactList: &virtualClusterNamespaceTopicSelectorExactList,
					})
				}
			}
			consumerGroups := make([]shared.VirtualClusterNamespaceIDSelector, 0, len(r.Namespace.Additional.ConsumerGroups))
			for _, consumerGroupsItem := range r.Namespace.Additional.ConsumerGroups {
				if consumerGroupsItem.Glob != nil {
					var glob1 string
					glob1 = consumerGroupsItem.Glob.Glob.ValueString()

					virtualClusterNamespaceIDSelectorGlob := shared.VirtualClusterNamespaceIDSelectorGlob{
						Glob: glob1,
					}
					consumerGroups = append(consumerGroups, shared.VirtualClusterNamespaceIDSelector{
						VirtualClusterNamespaceIDSelectorGlob: &virtualClusterNamespaceIDSelectorGlob,
					})
				}
				if consumerGroupsItem.ExactList != nil {
					var exactList1 []shared.ExactList
					if consumerGroupsItem.ExactList.ExactList != nil {
						exactList1 = make([]shared.ExactList, 0, len(consumerGroupsItem.ExactList.ExactList))
						for _, exactListItem1 := range consumerGroupsItem.ExactList.ExactList {
							var value string
							value = exactListItem1.Value.ValueString()

							exactList1 = append(exactList1, shared.ExactList{
								Value: value,
							})
						}
					}
					virtualClusterNamespaceIDSelectorExactList := shared.VirtualClusterNamespaceIDSelectorExactList{
						ExactList: exactList1,
					}
					consumerGroups = append(consumerGroups, shared.VirtualClusterNamespaceIDSelector{
						VirtualClusterNamespaceIDSelectorExactList: &virtualClusterNamespaceIDSelectorExactList,
					})
				}
			}
			additional = &shared.VirtualClusterNamespaceAdditionalProperties{
				Topics:         topics,
				ConsumerGroups: consumerGroups,
			}
		}
		namespace = &shared.VirtualClusterNamespace{
			Mode:       mode,
			Prefix:     prefix,
			Additional: additional,
		}
	}
	aclMode := shared.VirtualClusterACLMode(r.ACLMode.ValueString())
	var dnsLabel string
	dnsLabel = r.DNSLabel.ValueString()

	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateVirtualClusterRequest{
		Name:           name,
		Description:    description,
		Destination:    destination,
		Authentication: authentication,
		Namespace:      namespace,
		ACLMode:        aclMode,
		DNSLabel:       dnsLabel,
		Labels:         labels,
	}

	return &out, diags
}

func (r *EventGatewayVirtualClusterResourceModel) ToSharedUpdateVirtualClusterRequest(ctx context.Context) (*shared.UpdateVirtualClusterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	id := new(string)
	if !r.Destination.ID.IsUnknown() && !r.Destination.ID.IsNull() {
		*id = r.Destination.ID.ValueString()
	} else {
		id = nil
	}
	destination := shared.BackendClusterReferenceModify{
		ID: id,
	}
	authentication := make([]shared.VirtualClusterAuthenticationSensitiveDataAwareScheme, 0, len(r.Authentication))
	for _, authenticationItem := range r.Authentication {
		if authenticationItem.Anonymous != nil {
			virtualClusterAuthenticationAnonymous := shared.VirtualClusterAuthenticationAnonymous{}
			authentication = append(authentication, shared.VirtualClusterAuthenticationSensitiveDataAwareScheme{
				VirtualClusterAuthenticationAnonymous: &virtualClusterAuthenticationAnonymous,
			})
		}
		if authenticationItem.SaslPlain != nil {
			mediation := shared.VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation(authenticationItem.SaslPlain.Mediation.ValueString())
			var principals []shared.VirtualClusterAuthenticationPrincipalSensitiveDataAware
			if authenticationItem.SaslPlain.Principals != nil {
				principals = make([]shared.VirtualClusterAuthenticationPrincipalSensitiveDataAware, 0, len(authenticationItem.SaslPlain.Principals))
				for _, principalsItem := range authenticationItem.SaslPlain.Principals {
					var username string
					username = principalsItem.Username.ValueString()

					password := new(string)
					if !principalsItem.Password.IsUnknown() && !principalsItem.Password.IsNull() {
						*password = principalsItem.Password.ValueString()
					} else {
						password = nil
					}
					principals = append(principals, shared.VirtualClusterAuthenticationPrincipalSensitiveDataAware{
						Username: username,
						Password: password,
					})
				}
			}
			virtualClusterAuthenticationSaslPlainSensitiveDataAware := shared.VirtualClusterAuthenticationSaslPlainSensitiveDataAware{
				Mediation:  mediation,
				Principals: principals,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationSensitiveDataAwareScheme{
				VirtualClusterAuthenticationSaslPlainSensitiveDataAware: &virtualClusterAuthenticationSaslPlainSensitiveDataAware,
			})
		}
		if authenticationItem.SaslScram != nil {
			algorithm := shared.VirtualClusterAuthenticationSaslScramAlgorithm(authenticationItem.SaslScram.Algorithm.ValueString())
			virtualClusterAuthenticationSaslScram := shared.VirtualClusterAuthenticationSaslScram{
				Algorithm: algorithm,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationSensitiveDataAwareScheme{
				VirtualClusterAuthenticationSaslScram: &virtualClusterAuthenticationSaslScram,
			})
		}
		if authenticationItem.OauthBearer != nil {
			mediation1 := shared.VirtualClusterAuthenticationOauthBearerMediation(authenticationItem.OauthBearer.Mediation.ValueString())
			var claimsMapping *shared.VirtualClusterAuthenticationClaimsMapping
			if authenticationItem.OauthBearer.ClaimsMapping != nil {
				sub := new(string)
				if !authenticationItem.OauthBearer.ClaimsMapping.Sub.IsUnknown() && !authenticationItem.OauthBearer.ClaimsMapping.Sub.IsNull() {
					*sub = authenticationItem.OauthBearer.ClaimsMapping.Sub.ValueString()
				} else {
					sub = nil
				}
				scope := new(string)
				if !authenticationItem.OauthBearer.ClaimsMapping.Scope.IsUnknown() && !authenticationItem.OauthBearer.ClaimsMapping.Scope.IsNull() {
					*scope = authenticationItem.OauthBearer.ClaimsMapping.Scope.ValueString()
				} else {
					scope = nil
				}
				claimsMapping = &shared.VirtualClusterAuthenticationClaimsMapping{
					Sub:   sub,
					Scope: scope,
				}
			}
			var jwks *shared.VirtualClusterAuthenticationJWKS
			if authenticationItem.OauthBearer.Jwks != nil {
				var endpoint string
				endpoint = authenticationItem.OauthBearer.Jwks.Endpoint.ValueString()

				timeout := new(string)
				if !authenticationItem.OauthBearer.Jwks.Timeout.IsUnknown() && !authenticationItem.OauthBearer.Jwks.Timeout.IsNull() {
					*timeout = authenticationItem.OauthBearer.Jwks.Timeout.ValueString()
				} else {
					timeout = nil
				}
				cacheExpiration := new(string)
				if !authenticationItem.OauthBearer.Jwks.CacheExpiration.IsUnknown() && !authenticationItem.OauthBearer.Jwks.CacheExpiration.IsNull() {
					*cacheExpiration = authenticationItem.OauthBearer.Jwks.CacheExpiration.ValueString()
				} else {
					cacheExpiration = nil
				}
				jwks = &shared.VirtualClusterAuthenticationJWKS{
					Endpoint:        endpoint,
					Timeout:         timeout,
					CacheExpiration: cacheExpiration,
				}
			}
			var validate *shared.VirtualClusterAuthenticationValidate
			if authenticationItem.OauthBearer.Validate != nil {
				var audiences []shared.VirtualClusterAuthenticationAudience
				if authenticationItem.OauthBearer.Validate.Audiences != nil {
					audiences = make([]shared.VirtualClusterAuthenticationAudience, 0, len(authenticationItem.OauthBearer.Validate.Audiences))
					for _, audiencesItem := range authenticationItem.OauthBearer.Validate.Audiences {
						var name1 string
						name1 = audiencesItem.Name.ValueString()

						audiences = append(audiences, shared.VirtualClusterAuthenticationAudience{
							Name: name1,
						})
					}
				}
				issuer := new(string)
				if !authenticationItem.OauthBearer.Validate.Issuer.IsUnknown() && !authenticationItem.OauthBearer.Validate.Issuer.IsNull() {
					*issuer = authenticationItem.OauthBearer.Validate.Issuer.ValueString()
				} else {
					issuer = nil
				}
				validate = &shared.VirtualClusterAuthenticationValidate{
					Audiences: audiences,
					Issuer:    issuer,
				}
			}
			virtualClusterAuthenticationOauthBearer := shared.VirtualClusterAuthenticationOauthBearer{
				Mediation:     mediation1,
				ClaimsMapping: claimsMapping,
				Jwks:          jwks,
				Validate:      validate,
			}
			authentication = append(authentication, shared.VirtualClusterAuthenticationSensitiveDataAwareScheme{
				VirtualClusterAuthenticationOauthBearer: &virtualClusterAuthenticationOauthBearer,
			})
		}
	}
	var namespace *shared.VirtualClusterNamespace
	if r.Namespace != nil {
		mode := shared.Mode(r.Namespace.Mode.ValueString())
		var prefix string
		prefix = r.Namespace.Prefix.ValueString()

		var additional *shared.VirtualClusterNamespaceAdditionalProperties
		if r.Namespace.Additional != nil {
			topics := make([]shared.VirtualClusterNamespaceTopicSelector, 0, len(r.Namespace.Additional.Topics))
			for _, topicsItem := range r.Namespace.Additional.Topics {
				if topicsItem.Glob != nil {
					var glob string
					glob = topicsItem.Glob.Glob.ValueString()

					conflict := new(shared.Conflict)
					if !topicsItem.Glob.Conflict.IsUnknown() && !topicsItem.Glob.Conflict.IsNull() {
						*conflict = shared.Conflict(topicsItem.Glob.Conflict.ValueString())
					} else {
						conflict = nil
					}
					virtualClusterNamespaceTopicSelectorGlob := shared.VirtualClusterNamespaceTopicSelectorGlob{
						Glob:     glob,
						Conflict: conflict,
					}
					topics = append(topics, shared.VirtualClusterNamespaceTopicSelector{
						VirtualClusterNamespaceTopicSelectorGlob: &virtualClusterNamespaceTopicSelectorGlob,
					})
				}
				if topicsItem.ExactList != nil {
					var exactList []shared.NamespaceExactAllowListItem
					if topicsItem.ExactList.ExactList != nil {
						exactList = make([]shared.NamespaceExactAllowListItem, 0, len(topicsItem.ExactList.ExactList))
						for _, exactListItem := range topicsItem.ExactList.ExactList {
							var backend string
							backend = exactListItem.Backend.ValueString()

							exactList = append(exactList, shared.NamespaceExactAllowListItem{
								Backend: backend,
							})
						}
					}
					conflict1 := new(shared.VirtualClusterNamespaceTopicSelectorExactListConflict)
					if !topicsItem.ExactList.Conflict.IsUnknown() && !topicsItem.ExactList.Conflict.IsNull() {
						*conflict1 = shared.VirtualClusterNamespaceTopicSelectorExactListConflict(topicsItem.ExactList.Conflict.ValueString())
					} else {
						conflict1 = nil
					}
					virtualClusterNamespaceTopicSelectorExactList := shared.VirtualClusterNamespaceTopicSelectorExactList{
						ExactList: exactList,
						Conflict:  conflict1,
					}
					topics = append(topics, shared.VirtualClusterNamespaceTopicSelector{
						VirtualClusterNamespaceTopicSelectorExactList: &virtualClusterNamespaceTopicSelectorExactList,
					})
				}
			}
			consumerGroups := make([]shared.VirtualClusterNamespaceIDSelector, 0, len(r.Namespace.Additional.ConsumerGroups))
			for _, consumerGroupsItem := range r.Namespace.Additional.ConsumerGroups {
				if consumerGroupsItem.Glob != nil {
					var glob1 string
					glob1 = consumerGroupsItem.Glob.Glob.ValueString()

					virtualClusterNamespaceIDSelectorGlob := shared.VirtualClusterNamespaceIDSelectorGlob{
						Glob: glob1,
					}
					consumerGroups = append(consumerGroups, shared.VirtualClusterNamespaceIDSelector{
						VirtualClusterNamespaceIDSelectorGlob: &virtualClusterNamespaceIDSelectorGlob,
					})
				}
				if consumerGroupsItem.ExactList != nil {
					var exactList1 []shared.ExactList
					if consumerGroupsItem.ExactList.ExactList != nil {
						exactList1 = make([]shared.ExactList, 0, len(consumerGroupsItem.ExactList.ExactList))
						for _, exactListItem1 := range consumerGroupsItem.ExactList.ExactList {
							var value string
							value = exactListItem1.Value.ValueString()

							exactList1 = append(exactList1, shared.ExactList{
								Value: value,
							})
						}
					}
					virtualClusterNamespaceIDSelectorExactList := shared.VirtualClusterNamespaceIDSelectorExactList{
						ExactList: exactList1,
					}
					consumerGroups = append(consumerGroups, shared.VirtualClusterNamespaceIDSelector{
						VirtualClusterNamespaceIDSelectorExactList: &virtualClusterNamespaceIDSelectorExactList,
					})
				}
			}
			additional = &shared.VirtualClusterNamespaceAdditionalProperties{
				Topics:         topics,
				ConsumerGroups: consumerGroups,
			}
		}
		namespace = &shared.VirtualClusterNamespace{
			Mode:       mode,
			Prefix:     prefix,
			Additional: additional,
		}
	}
	aclMode := shared.VirtualClusterACLMode(r.ACLMode.ValueString())
	var dnsLabel string
	dnsLabel = r.DNSLabel.ValueString()

	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdateVirtualClusterRequest{
		Name:           name,
		Description:    description,
		Destination:    destination,
		Authentication: authentication,
		Namespace:      namespace,
		ACLMode:        aclMode,
		DNSLabel:       dnsLabel,
		Labels:         labels,
	}

	return &out, diags
}
