// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AuthServerClientsDataSource{}
var _ datasource.DataSourceWithConfigure = &AuthServerClientsDataSource{}

func NewAuthServerClientsDataSource() datasource.DataSource {
	return &AuthServerClientsDataSource{}
}

// AuthServerClientsDataSource is the data source implementation.
type AuthServerClientsDataSource struct {
	client *sdk.KonnectBeta
}

// AuthServerClientsDataSourceModel describes the data model.
type AuthServerClientsDataSourceModel struct {
	AccessTokenDuration types.Int64             `tfsdk:"access_token_duration"`
	AllowAllScopes      types.Bool              `tfsdk:"allow_all_scopes"`
	AllowScopes         []types.String          `tfsdk:"allow_scopes"`
	AuthServerID        types.String            `tfsdk:"auth_server_id"`
	CreatedAt           types.String            `tfsdk:"created_at"`
	GrantTypes          []types.String          `tfsdk:"grant_types"`
	ID                  types.String            `tfsdk:"id"`
	IDTokenDuration     types.Int64             `tfsdk:"id_token_duration"`
	Labels              map[string]types.String `tfsdk:"labels"`
	LoginURI            types.String            `tfsdk:"login_uri"`
	Name                types.String            `tfsdk:"name"`
	RedirectUris        []types.String          `tfsdk:"redirect_uris"`
	ResponseTypes       []types.String          `tfsdk:"response_types"`
	UpdatedAt           types.String            `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AuthServerClientsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_auth_server_clients"
}

// Schema defines the schema for the data source.
func (r *AuthServerClientsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AuthServerClients DataSource",

		Attributes: map[string]schema.Attribute{
			"access_token_duration": schema.Int64Attribute{
				Computed:    true,
				Description: `The duration of the minted token is valid for, in seconds`,
			},
			"allow_all_scopes": schema.BoolAttribute{
				Computed:    true,
				Description: `Specifies whether the client is allowed to request all scopes`,
			},
			"allow_scopes": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Specifies the scopes IDs that the client is allowed to request`,
			},
			"auth_server_id": schema.StringAttribute{
				Required:    true,
				Description: `The auth server ID`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"grant_types": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `List of OAuth 2.0 grant types`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The OAuth 2.0 client ID`,
			},
			"id_token_duration": schema.Int64Attribute{
				Computed:    true,
				Description: `The duration of the minted token is valid for, in seconds`,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
					`` + "\n" +
					`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
			},
			"login_uri": schema.StringAttribute{
				Computed:    true,
				Description: `The URI of the login page where the user is redirected to authenticate in interactive flows. The login page must be secure (HTTPS).`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the client`,
			},
			"redirect_uris": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The URIs that the client is allowed to redirect to after authentication in interactive flows. All redirect URIs must be absolute URIs, be secure (HTTPS), and must not include a fragment component.`,
			},
			"response_types": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `List of OAuth 2.0 response types`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
		},
	}
}

func (r *AuthServerClientsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KonnectBeta)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KonnectBeta, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AuthServerClientsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AuthServerClientsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAuthServerClientRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Authserver.GetAuthServerClient(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Client != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedClient(ctx, res.Client)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
