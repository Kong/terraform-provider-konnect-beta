// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"time"
)

func (r *APIResourceModel) ToSharedCreateAPIRequest() *shared.CreateAPIRequest {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	deprecated := new(bool)
	if !r.Deprecated.IsUnknown() && !r.Deprecated.IsNull() {
		*deprecated = r.Deprecated.ValueBool()
	} else {
		deprecated = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	publicLabels := make(map[string]string)
	for publicLabelsKey, publicLabelsValue := range r.PublicLabels {
		var publicLabelsInst string
		publicLabelsInst = publicLabelsValue.ValueString()

		publicLabels[publicLabelsKey] = publicLabelsInst
	}
	out := shared.CreateAPIRequest{
		Name:         name,
		Description:  description,
		Version:      version,
		Deprecated:   deprecated,
		Slug:         slug,
		Labels:       labels,
		PublicLabels: publicLabels,
	}
	return &out
}

func (r *APIResourceModel) RefreshFromSharedAPIResponseSchema(resp *shared.APIResponseSchema) {
	if resp != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Deprecated = types.BoolValue(resp.Deprecated)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Portals = []tfTypes.Portals{}
		if len(r.Portals) > len(resp.Portals) {
			r.Portals = r.Portals[:len(resp.Portals)]
		}
		for portalsCount, portalsItem := range resp.Portals {
			var portals1 tfTypes.Portals
			portals1.DisplayName = types.StringValue(portalsItem.DisplayName)
			portals1.ID = types.StringValue(portalsItem.ID)
			portals1.Name = types.StringValue(portalsItem.Name)
			if portalsCount+1 > len(r.Portals) {
				r.Portals = append(r.Portals, portals1)
			} else {
				r.Portals[portalsCount].DisplayName = portals1.DisplayName
				r.Portals[portalsCount].ID = portals1.ID
				r.Portals[portalsCount].Name = portals1.Name
			}
		}
		if len(resp.PublicLabels) > 0 {
			r.PublicLabels = make(map[string]types.String, len(resp.PublicLabels))
			for key1, value1 := range resp.PublicLabels {
				r.PublicLabels[key1] = types.StringValue(value1)
			}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		r.Version = types.StringPointerValue(resp.Version)
	}
}

func (r *APIResourceModel) ToSharedUpdateAPIRequest() *shared.UpdateAPIRequest {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	deprecated := new(bool)
	if !r.Deprecated.IsUnknown() && !r.Deprecated.IsNull() {
		*deprecated = r.Deprecated.ValueBool()
	} else {
		deprecated = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	publicLabels := make(map[string]*string)
	for publicLabelsKey, publicLabelsValue := range r.PublicLabels {
		publicLabelsInst := new(string)
		if !publicLabelsValue.IsUnknown() && !publicLabelsValue.IsNull() {
			*publicLabelsInst = publicLabelsValue.ValueString()
		} else {
			publicLabelsInst = nil
		}
		publicLabels[publicLabelsKey] = publicLabelsInst
	}
	out := shared.UpdateAPIRequest{
		Name:         name,
		Description:  description,
		Version:      version,
		Deprecated:   deprecated,
		Slug:         slug,
		Labels:       labels,
		PublicLabels: publicLabels,
	}
	return &out
}
