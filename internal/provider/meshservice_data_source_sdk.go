// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshServiceDataSourceModel) RefreshFromSharedMeshServiceItem(ctx context.Context, resp *shared.MeshServiceItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.Identities = []tfTypes.Path{}

		for _, identitiesItem := range resp.Spec.Identities {
			var identities tfTypes.Path

			identities.Type = types.StringValue(string(identitiesItem.Type))
			identities.Value = types.StringValue(identitiesItem.Value)

			r.Spec.Identities = append(r.Spec.Identities, identities)
		}
		r.Spec.Ports = []tfTypes.MeshServiceItemPorts{}

		for _, portsItem := range resp.Spec.Ports {
			var ports tfTypes.MeshServiceItemPorts

			ports.AppProtocol = types.StringPointerValue(portsItem.AppProtocol)
			ports.Name = types.StringPointerValue(portsItem.Name)
			ports.Port = types.Int32Value(int32(portsItem.Port))
			if portsItem.TargetPort != nil {
				ports.TargetPort = &tfTypes.MeshItemMode{}
				if portsItem.TargetPort.Integer != nil {
					ports.TargetPort.Integer = types.Int64PointerValue(portsItem.TargetPort.Integer)
				}
				if portsItem.TargetPort.Str != nil {
					ports.TargetPort.Str = types.StringPointerValue(portsItem.TargetPort.Str)
				}
			}

			r.Spec.Ports = append(r.Spec.Ports, ports)
		}
		if resp.Spec.Selector == nil {
			r.Spec.Selector = nil
		} else {
			r.Spec.Selector = &tfTypes.MeshServiceItemSelector{}
			if resp.Spec.Selector.DataplaneRef == nil {
				r.Spec.Selector.DataplaneRef = nil
			} else {
				r.Spec.Selector.DataplaneRef = &tfTypes.DataplaneRef{}
				r.Spec.Selector.DataplaneRef.Name = types.StringPointerValue(resp.Spec.Selector.DataplaneRef.Name)
			}
			if len(resp.Spec.Selector.DataplaneTags) > 0 {
				r.Spec.Selector.DataplaneTags = make(map[string]types.String, len(resp.Spec.Selector.DataplaneTags))
				for key, value := range resp.Spec.Selector.DataplaneTags {
					r.Spec.Selector.DataplaneTags[key] = types.StringValue(value)
				}
			}
		}
		if resp.Spec.State != nil {
			r.Spec.State = types.StringValue(string(*resp.Spec.State))
		} else {
			r.Spec.State = types.StringNull()
		}
		if resp.Status == nil {
			r.Status = nil
		} else {
			r.Status = &tfTypes.MeshServiceItemStatus{}
			r.Status.Addresses = []tfTypes.Addresses{}

			for _, addressesItem := range resp.Status.Addresses {
				var addresses tfTypes.Addresses

				addresses.Hostname = types.StringPointerValue(addressesItem.Hostname)
				if addressesItem.HostnameGeneratorRef == nil {
					addresses.HostnameGeneratorRef = nil
				} else {
					addresses.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
					addresses.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
				}
				addresses.Origin = types.StringPointerValue(addressesItem.Origin)

				r.Status.Addresses = append(r.Status.Addresses, addresses)
			}
			if resp.Status.DataplaneProxies == nil {
				r.Status.DataplaneProxies = nil
			} else {
				r.Status.DataplaneProxies = &tfTypes.DataplaneProxies{}
				r.Status.DataplaneProxies.Connected = types.Int64PointerValue(resp.Status.DataplaneProxies.Connected)
				r.Status.DataplaneProxies.Healthy = types.Int64PointerValue(resp.Status.DataplaneProxies.Healthy)
				r.Status.DataplaneProxies.Total = types.Int64PointerValue(resp.Status.DataplaneProxies.Total)
			}
			r.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}

			for _, hostnameGeneratorsItem := range resp.Status.HostnameGenerators {
				var hostnameGenerators tfTypes.HostnameGenerators

				hostnameGenerators.Conditions = []tfTypes.Conditions{}

				for _, conditionsItem := range hostnameGeneratorsItem.Conditions {
					var conditions tfTypes.Conditions

					conditions.Message = types.StringValue(conditionsItem.Message)
					conditions.Reason = types.StringValue(conditionsItem.Reason)
					conditions.Status = types.StringValue(string(conditionsItem.Status))
					conditions.Type = types.StringValue(conditionsItem.Type)

					hostnameGenerators.Conditions = append(hostnameGenerators.Conditions, conditions)
				}
				hostnameGenerators.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)

				r.Status.HostnameGenerators = append(r.Status.HostnameGenerators, hostnameGenerators)
			}
			if resp.Status.TLS == nil {
				r.Status.TLS = nil
			} else {
				r.Status.TLS = &tfTypes.MeshServiceItemTLS{}
				if resp.Status.TLS.Status != nil {
					r.Status.TLS.Status = types.StringValue(string(*resp.Status.TLS.Status))
				} else {
					r.Status.TLS.Status = types.StringNull()
				}
			}
			r.Status.Vips = []tfTypes.Vip{}

			for _, vipsItem := range resp.Status.Vips {
				var vips tfTypes.Vip

				vips.IP = types.StringPointerValue(vipsItem.IP)

				r.Status.Vips = append(r.Status.Vips, vips)
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshServiceDataSourceModel) ToOperationsGetMeshServiceRequest(ctx context.Context) (*operations.GetMeshServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshServiceRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}
