// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshPassthroughListDataSourceModel) ToOperationsGetMeshPassthroughListRequest(ctx context.Context) (*operations.GetMeshPassthroughListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	offset := new(int64)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = r.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !r.Size.IsUnknown() && !r.Size.IsNull() {
		*size = r.Size.ValueInt64()
	} else {
		size = nil
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetMeshPassthroughListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Mesh:   mesh,
	}

	return &out, diags
}

func (r *MeshPassthroughListDataSourceModel) RefreshFromSharedMeshPassthroughList(ctx context.Context, resp *shared.MeshPassthroughList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.MeshPassthroughItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.MeshPassthroughItem
			items.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.CreationTime))
			if len(itemsItem.Labels) > 0 {
				items.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key, value := range itemsItem.Labels {
					items.Labels[key] = types.StringValue(value)
				}
			}
			items.Mesh = types.StringPointerValue(itemsItem.Mesh)
			items.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(itemsItem.ModificationTime))
			items.Name = types.StringValue(itemsItem.Name)
			if itemsItem.Spec.Default == nil {
				items.Spec.Default = nil
			} else {
				items.Spec.Default = &tfTypes.MeshPassthroughItemDefault{}
				items.Spec.Default.AppendMatch = []tfTypes.AppendMatch{}
				for appendMatchCount, appendMatchItem := range itemsItem.Spec.Default.AppendMatch {
					var appendMatch tfTypes.AppendMatch
					appendMatch.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(appendMatchItem.Port))
					if appendMatchItem.Protocol != nil {
						appendMatch.Protocol = types.StringValue(string(*appendMatchItem.Protocol))
					} else {
						appendMatch.Protocol = types.StringNull()
					}
					appendMatch.Type = types.StringValue(string(appendMatchItem.Type))
					appendMatch.Value = types.StringValue(appendMatchItem.Value)
					if appendMatchCount+1 > len(items.Spec.Default.AppendMatch) {
						items.Spec.Default.AppendMatch = append(items.Spec.Default.AppendMatch, appendMatch)
					} else {
						items.Spec.Default.AppendMatch[appendMatchCount].Port = appendMatch.Port
						items.Spec.Default.AppendMatch[appendMatchCount].Protocol = appendMatch.Protocol
						items.Spec.Default.AppendMatch[appendMatchCount].Type = appendMatch.Type
						items.Spec.Default.AppendMatch[appendMatchCount].Value = appendMatch.Value
					}
				}
				if itemsItem.Spec.Default.PassthroughMode != nil {
					items.Spec.Default.PassthroughMode = types.StringValue(string(*itemsItem.Spec.Default.PassthroughMode))
				} else {
					items.Spec.Default.PassthroughMode = types.StringNull()
				}
			}
			if itemsItem.Spec.TargetRef == nil {
				items.Spec.TargetRef = nil
			} else {
				items.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				items.Spec.TargetRef.Kind = types.StringValue(string(itemsItem.Spec.TargetRef.Kind))
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items.Spec.TargetRef.Labels = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Labels))
					for key1, value1 := range itemsItem.Spec.TargetRef.Labels {
						items.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
					}
				}
				items.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items.Spec.TargetRef.ProxyTypes = append(items.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items.Spec.TargetRef.Tags = make(map[string]types.String, len(itemsItem.Spec.TargetRef.Tags))
					for key2, value2 := range itemsItem.Spec.TargetRef.Tags {
						items.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
					}
				}
			}
			items.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].CreationTime = items.CreationTime
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].ModificationTime = items.ModificationTime
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Float64PointerValue(resp.Total)
	}

	return diags
}
