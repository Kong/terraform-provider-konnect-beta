// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect-beta/internal/provider/types"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
)

func (r *MeshHealthCheckDataSourceModel) RefreshFromSharedMeshHealthCheckItem(ctx context.Context, resp *shared.MeshHealthCheckItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key, value := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key1, value1 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshHealthCheckItemTo{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to tfTypes.MeshHealthCheckItemTo
			if toItem.Default == nil {
				to.Default = nil
			} else {
				to.Default = &tfTypes.MeshHealthCheckItemDefault{}
				to.Default.AlwaysLogHealthCheckFailures = types.BoolPointerValue(toItem.Default.AlwaysLogHealthCheckFailures)
				to.Default.EventLogPath = types.StringPointerValue(toItem.Default.EventLogPath)
				to.Default.FailTrafficOnPanic = types.BoolPointerValue(toItem.Default.FailTrafficOnPanic)
				if toItem.Default.Grpc == nil {
					to.Default.Grpc = nil
				} else {
					to.Default.Grpc = &tfTypes.Grpc{}
					to.Default.Grpc.Authority = types.StringPointerValue(toItem.Default.Grpc.Authority)
					to.Default.Grpc.Disabled = types.BoolPointerValue(toItem.Default.Grpc.Disabled)
					to.Default.Grpc.ServiceName = types.StringPointerValue(toItem.Default.Grpc.ServiceName)
				}
				if toItem.Default.HealthyPanicThreshold != nil {
					to.Default.HealthyPanicThreshold = &tfTypes.MeshItemMode{}
					if toItem.Default.HealthyPanicThreshold.Integer != nil {
						to.Default.HealthyPanicThreshold.Integer = types.Int64PointerValue(toItem.Default.HealthyPanicThreshold.Integer)
					}
					if toItem.Default.HealthyPanicThreshold.Str != nil {
						to.Default.HealthyPanicThreshold.Str = types.StringPointerValue(toItem.Default.HealthyPanicThreshold.Str)
					}
				}
				to.Default.HealthyThreshold = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.HealthyThreshold))
				if toItem.Default.HTTP == nil {
					to.Default.HTTP = nil
				} else {
					to.Default.HTTP = &tfTypes.MeshHealthCheckItemHTTP{}
					to.Default.HTTP.Disabled = types.BoolPointerValue(toItem.Default.HTTP.Disabled)
					to.Default.HTTP.ExpectedStatuses = make([]types.Int64, 0, len(toItem.Default.HTTP.ExpectedStatuses))
					for _, v := range toItem.Default.HTTP.ExpectedStatuses {
						to.Default.HTTP.ExpectedStatuses = append(to.Default.HTTP.ExpectedStatuses, types.Int64Value(v))
					}
					to.Default.HTTP.Path = types.StringPointerValue(toItem.Default.HTTP.Path)
					if toItem.Default.HTTP.RequestHeadersToAdd == nil {
						to.Default.HTTP.RequestHeadersToAdd = nil
					} else {
						to.Default.HTTP.RequestHeadersToAdd = &tfTypes.MeshGlobalRateLimitItemHeaders{}
						to.Default.HTTP.RequestHeadersToAdd.Add = []tfTypes.MeshGlobalRateLimitItemAdd{}
						for addCount, addItem := range toItem.Default.HTTP.RequestHeadersToAdd.Add {
							var add tfTypes.MeshGlobalRateLimitItemAdd
							add.Name = types.StringValue(addItem.Name)
							add.Value = types.StringValue(addItem.Value)
							if addCount+1 > len(to.Default.HTTP.RequestHeadersToAdd.Add) {
								to.Default.HTTP.RequestHeadersToAdd.Add = append(to.Default.HTTP.RequestHeadersToAdd.Add, add)
							} else {
								to.Default.HTTP.RequestHeadersToAdd.Add[addCount].Name = add.Name
								to.Default.HTTP.RequestHeadersToAdd.Add[addCount].Value = add.Value
							}
						}
						to.Default.HTTP.RequestHeadersToAdd.Set = []tfTypes.MeshGlobalRateLimitItemAdd{}
						for setCount, setItem := range toItem.Default.HTTP.RequestHeadersToAdd.Set {
							var set tfTypes.MeshGlobalRateLimitItemAdd
							set.Name = types.StringValue(setItem.Name)
							set.Value = types.StringValue(setItem.Value)
							if setCount+1 > len(to.Default.HTTP.RequestHeadersToAdd.Set) {
								to.Default.HTTP.RequestHeadersToAdd.Set = append(to.Default.HTTP.RequestHeadersToAdd.Set, set)
							} else {
								to.Default.HTTP.RequestHeadersToAdd.Set[setCount].Name = set.Name
								to.Default.HTTP.RequestHeadersToAdd.Set[setCount].Value = set.Value
							}
						}
					}
				}
				to.Default.InitialJitter = types.StringPointerValue(toItem.Default.InitialJitter)
				to.Default.Interval = types.StringPointerValue(toItem.Default.Interval)
				to.Default.IntervalJitter = types.StringPointerValue(toItem.Default.IntervalJitter)
				to.Default.IntervalJitterPercent = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.IntervalJitterPercent))
				to.Default.NoTrafficInterval = types.StringPointerValue(toItem.Default.NoTrafficInterval)
				to.Default.ReuseConnection = types.BoolPointerValue(toItem.Default.ReuseConnection)
				if toItem.Default.TCP == nil {
					to.Default.TCP = nil
				} else {
					to.Default.TCP = &tfTypes.TCP{}
					to.Default.TCP.Disabled = types.BoolPointerValue(toItem.Default.TCP.Disabled)
					to.Default.TCP.Receive = make([]types.String, 0, len(toItem.Default.TCP.Receive))
					for _, v := range toItem.Default.TCP.Receive {
						to.Default.TCP.Receive = append(to.Default.TCP.Receive, types.StringValue(v))
					}
					to.Default.TCP.Send = types.StringPointerValue(toItem.Default.TCP.Send)
				}
				to.Default.Timeout = types.StringPointerValue(toItem.Default.Timeout)
				to.Default.UnhealthyThreshold = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(toItem.Default.UnhealthyThreshold))
			}
			to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
				for key2, value2 := range toItem.TargetRef.Labels {
					to.TargetRef.Labels[key2] = types.StringValue(value2)
				}
			}
			to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
				for key3, value3 := range toItem.TargetRef.Tags {
					to.TargetRef.Tags[key3] = types.StringValue(value3)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to)
			} else {
				r.Spec.To[toCount].Default = to.Default
				r.Spec.To[toCount].TargetRef = to.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshHealthCheckDataSourceModel) ToOperationsGetMeshHealthCheckRequest(ctx context.Context) (*operations.GetMeshHealthCheckRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpID string
	cpID = r.CpID.ValueString()

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshHealthCheckRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}
