// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type TimeRangeType string

const (
	TimeRangeTypeRelative TimeRangeType = "relative"
	TimeRangeTypeAbsolute TimeRangeType = "absolute"
)

// TimeRange - The time range to query.
type TimeRange struct {
	MetricsRelativeTimeRangeDtoV2 *MetricsRelativeTimeRangeDtoV2 `queryParam:"inline,name=TimeRange"`
	MetricsAbsoluteTimeRangeDtoV2 *MetricsAbsoluteTimeRangeDtoV2 `queryParam:"inline,name=TimeRange"`

	Type TimeRangeType
}

func CreateTimeRangeRelative(relative MetricsRelativeTimeRangeDtoV2) TimeRange {
	typ := TimeRangeTypeRelative

	typStr := MetricsRelativeTimeRangeDtoV2Type(typ)
	relative.Type = typStr

	return TimeRange{
		MetricsRelativeTimeRangeDtoV2: &relative,
		Type:                          typ,
	}
}

func CreateTimeRangeAbsolute(absolute MetricsAbsoluteTimeRangeDtoV2) TimeRange {
	typ := TimeRangeTypeAbsolute

	typStr := MetricsAbsoluteTimeRangeDtoV2Type(typ)
	absolute.Type = typStr

	return TimeRange{
		MetricsAbsoluteTimeRangeDtoV2: &absolute,
		Type:                          typ,
	}
}

func (u *TimeRange) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "relative":
		metricsRelativeTimeRangeDtoV2 := new(MetricsRelativeTimeRangeDtoV2)
		if err := utils.UnmarshalJSON(data, &metricsRelativeTimeRangeDtoV2, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == relative) type MetricsRelativeTimeRangeDtoV2 within TimeRange: %w", string(data), err)
		}

		u.MetricsRelativeTimeRangeDtoV2 = metricsRelativeTimeRangeDtoV2
		u.Type = TimeRangeTypeRelative
		return nil
	case "absolute":
		metricsAbsoluteTimeRangeDtoV2 := new(MetricsAbsoluteTimeRangeDtoV2)
		if err := utils.UnmarshalJSON(data, &metricsAbsoluteTimeRangeDtoV2, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == absolute) type MetricsAbsoluteTimeRangeDtoV2 within TimeRange: %w", string(data), err)
		}

		u.MetricsAbsoluteTimeRangeDtoV2 = metricsAbsoluteTimeRangeDtoV2
		u.Type = TimeRangeTypeAbsolute
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TimeRange", string(data))
}

func (u TimeRange) MarshalJSON() ([]byte, error) {
	if u.MetricsRelativeTimeRangeDtoV2 != nil {
		return utils.MarshalJSON(u.MetricsRelativeTimeRangeDtoV2, "", true)
	}

	if u.MetricsAbsoluteTimeRangeDtoV2 != nil {
		return utils.MarshalJSON(u.MetricsAbsoluteTimeRangeDtoV2, "", true)
	}

	return nil, errors.New("could not marshal union type TimeRange: all fields are null")
}
