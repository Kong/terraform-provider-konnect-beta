// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryConfluentType string

const (
	SchemaRegistryConfluentTypeConfluent SchemaRegistryConfluentType = "confluent"
)

func (e SchemaRegistryConfluentType) ToPointer() *SchemaRegistryConfluentType {
	return &e
}
func (e *SchemaRegistryConfluentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confluent":
		*e = SchemaRegistryConfluentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaRegistryConfluentType: %v", v)
	}
}

// SchemaType - The format of the message.
type SchemaType string

const (
	SchemaTypeAvro SchemaType = "avro"
	SchemaTypeJSON SchemaType = "json"
)

func (e SchemaType) ToPointer() *SchemaType {
	return &e
}
func (e *SchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		fallthrough
	case "json":
		*e = SchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaType: %v", v)
	}
}

// SchemaRegistryConfluentConfig - The configuration of [Confluent Schema Registry](https://github.com/confluentinc/schema-registry)
type SchemaRegistryConfluentConfig struct {
	// The format of the message.
	SchemaType SchemaType `json:"schema_type"`
	// The endpoint of the Confluent schema registry.
	Endpoint string `json:"endpoint"`
	// Total time in seconds from establishing connection to receive a response from schema registry.
	//
	TimeoutSeconds *int64 `default:"10" json:"timeout_seconds"`
	// The authentication configuration for the schema registry.
	Authentication *SchemaRegistryAuthenticationScheme `json:"authentication,omitempty"`
}

func (s SchemaRegistryConfluentConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemaRegistryConfluentConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SchemaRegistryConfluentConfig) GetSchemaType() SchemaType {
	if o == nil {
		return SchemaType("")
	}
	return o.SchemaType
}

func (o *SchemaRegistryConfluentConfig) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *SchemaRegistryConfluentConfig) GetTimeoutSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.TimeoutSeconds
}

func (o *SchemaRegistryConfluentConfig) GetAuthentication() *SchemaRegistryAuthenticationScheme {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *SchemaRegistryConfluentConfig) GetAuthenticationBasic() *SchemaRegistryAuthenticationBasic {
	if v := o.GetAuthentication(); v != nil {
		return v.SchemaRegistryAuthenticationBasic
	}
	return nil
}

// SchemaRegistryConfluent - A Confluent schema registry.
type SchemaRegistryConfluent struct {
	// The unique name of the schema registry.
	Name string `json:"name"`
	// A human-readable description of the virtual cluster.
	Description *string                     `default:"null" json:"description"`
	Type        SchemaRegistryConfluentType `json:"type"`
	// The configuration of [Confluent Schema Registry](https://github.com/confluentinc/schema-registry)
	//
	Config SchemaRegistryConfluentConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (s SchemaRegistryConfluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemaRegistryConfluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SchemaRegistryConfluent) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SchemaRegistryConfluent) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SchemaRegistryConfluent) GetType() SchemaRegistryConfluentType {
	if o == nil {
		return SchemaRegistryConfluentType("")
	}
	return o.Type
}

func (o *SchemaRegistryConfluent) GetConfig() SchemaRegistryConfluentConfig {
	if o == nil {
		return SchemaRegistryConfluentConfig{}
	}
	return o.Config
}

func (o *SchemaRegistryConfluent) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
