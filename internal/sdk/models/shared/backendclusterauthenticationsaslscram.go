// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BackendClusterAuthenticationSaslScramType string

const (
	BackendClusterAuthenticationSaslScramTypeSaslScram BackendClusterAuthenticationSaslScramType = "sasl_scram"
)

func (e BackendClusterAuthenticationSaslScramType) ToPointer() *BackendClusterAuthenticationSaslScramType {
	return &e
}
func (e *BackendClusterAuthenticationSaslScramType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sasl_scram":
		*e = BackendClusterAuthenticationSaslScramType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackendClusterAuthenticationSaslScramType: %v", v)
	}
}

// BackendClusterAuthenticationSaslScramAlgorithm - The algorithm used for SASL/SCRAM authentication.
type BackendClusterAuthenticationSaslScramAlgorithm string

const (
	BackendClusterAuthenticationSaslScramAlgorithmSha256 BackendClusterAuthenticationSaslScramAlgorithm = "sha256"
	BackendClusterAuthenticationSaslScramAlgorithmSha512 BackendClusterAuthenticationSaslScramAlgorithm = "sha512"
)

func (e BackendClusterAuthenticationSaslScramAlgorithm) ToPointer() *BackendClusterAuthenticationSaslScramAlgorithm {
	return &e
}
func (e *BackendClusterAuthenticationSaslScramAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sha256":
		fallthrough
	case "sha512":
		*e = BackendClusterAuthenticationSaslScramAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackendClusterAuthenticationSaslScramAlgorithm: %v", v)
	}
}

// BackendClusterAuthenticationSaslScram - SASL/SCRAM-SHA-256 authentication scheme for the backend cluster.
type BackendClusterAuthenticationSaslScram struct {
	Type BackendClusterAuthenticationSaslScramType `json:"type"`
	// The algorithm used for SASL/SCRAM authentication.
	Algorithm BackendClusterAuthenticationSaslScramAlgorithm `json:"algorithm"`
	// A template string expression containing a reference to a secret or a literal value
	Username string `json:"username"`
	// A template string expression containing a reference to a secret
	Password string `json:"password"`
}

func (o *BackendClusterAuthenticationSaslScram) GetType() BackendClusterAuthenticationSaslScramType {
	if o == nil {
		return BackendClusterAuthenticationSaslScramType("")
	}
	return o.Type
}

func (o *BackendClusterAuthenticationSaslScram) GetAlgorithm() BackendClusterAuthenticationSaslScramAlgorithm {
	if o == nil {
		return BackendClusterAuthenticationSaslScramAlgorithm("")
	}
	return o.Algorithm
}

func (o *BackendClusterAuthenticationSaslScram) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *BackendClusterAuthenticationSaslScram) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}
