// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayDecryptPolicyType string

const (
	EventGatewayDecryptPolicyTypeDecrypt EventGatewayDecryptPolicyType = "decrypt"
)

func (e EventGatewayDecryptPolicyType) ToPointer() *EventGatewayDecryptPolicyType {
	return &e
}
func (e *EventGatewayDecryptPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "decrypt":
		*e = EventGatewayDecryptPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGatewayDecryptPolicyType: %v", v)
	}
}

// EventGatewayDecryptPolicyConfig - The configuration of the decrypt policy.
type EventGatewayDecryptPolicyConfig struct {
	// Describes how to handle failing encryption or decryption.
	// Use `error` if the record should be rejected if encryption or decryption fails.
	// Use `passthrough` to ignore encryption or decryption failure and continue proxying the record.
	//
	FailureMode EncryptionFailureMode `json:"failure_mode"`
	// Describes how to find a symmetric key for decryption.
	//
	KeySources []EventGatewayKeySource `json:"key_sources"`
	// Describes what parts of a record to decrypt.
	Decrypt []DecryptionRecordSelector `json:"decrypt"`
}

func (o *EventGatewayDecryptPolicyConfig) GetFailureMode() EncryptionFailureMode {
	if o == nil {
		return EncryptionFailureMode("")
	}
	return o.FailureMode
}

func (o *EventGatewayDecryptPolicyConfig) GetKeySources() []EventGatewayKeySource {
	if o == nil {
		return []EventGatewayKeySource{}
	}
	return o.KeySources
}

func (o *EventGatewayDecryptPolicyConfig) GetDecrypt() []DecryptionRecordSelector {
	if o == nil {
		return []DecryptionRecordSelector{}
	}
	return o.Decrypt
}

// EventGatewayDecryptPolicy - Decrypts portions of Kafka records using AES_128_GCM. Keys are therefore 128 bits long.
type EventGatewayDecryptPolicy struct {
	Type EventGatewayDecryptPolicyType `json:"type"`
	// A unique user-defined name of the policy.
	Name *string `default:"null" json:"name"`
	// A human-readable description of the policy.
	Description *string `default:"null" json:"description"`
	// Whether the policy is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// A string containing the boolean expression that determines whether the policy is applied.
	Condition *string `json:"condition,omitempty"`
	// The configuration of the decrypt policy.
	Config *EventGatewayDecryptPolicyConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (e EventGatewayDecryptPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayDecryptPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayDecryptPolicy) GetType() EventGatewayDecryptPolicyType {
	if o == nil {
		return EventGatewayDecryptPolicyType("")
	}
	return o.Type
}

func (o *EventGatewayDecryptPolicy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventGatewayDecryptPolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayDecryptPolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *EventGatewayDecryptPolicy) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *EventGatewayDecryptPolicy) GetConfig() *EventGatewayDecryptPolicyConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *EventGatewayDecryptPolicy) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
