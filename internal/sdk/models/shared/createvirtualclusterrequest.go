// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// CreateVirtualClusterRequest - The request schema for creating a virtual cluster.
type CreateVirtualClusterRequest struct {
	// The name of the virtual cluster.
	Name string `json:"name"`
	// A human-readable description of the virtual cluster.
	Description *string `json:"description,omitempty"`
	// The backend cluster associated with the virtual cluster.
	//
	// Either `id` or `name` must be provided. Following changes to the backend cluster name won't affect the
	// reference, as the system will create the entities relationship by `id`.
	//
	Destination BackendClusterReferenceModify `json:"destination"`
	// How to handle authentication from clients.
	//
	// It tries to authenticate with every rule sequentially one by one.
	// It succeeds on the first match, and fails if no rule matches.
	//
	Authentication []VirtualClusterAuthenticationScheme `json:"authentication"`
	// Namespace allows to implement multitenancy using a single backend cluster.
	// It allows to either hide or enforce a static prefix on resources (topics, consumer group IDs, transaction IDs).
	//
	Namespace *VirtualClusterNamespace `json:"namespace,omitempty"`
	// Configures whether or not ACL policies are enforced on the gateway.
	// - `enforce_on_gateway` means the gateway enforces its own ACL policies for this virtual cluster
	//
	//   and does not forward ACL-related commands to the backend cluster.
	//   Note that if there are no ACL policies configured, all access is denied.
	// - `passthrough` tells the gateway to forward all ACL-related commands.
	//
	ACLMode VirtualClusterACLMode `json:"acl_mode"`
	// The DNS label used in the bootstrap server URL to identify the virtual cluster when using SNI routing.
	// The format follows the RFC1035: 1-63 chars, lowercase alphanumeric or '-', must start with a letter and end with an alphanumeric character.
	DNSLabel string `json:"dns_label"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (o *CreateVirtualClusterRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateVirtualClusterRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateVirtualClusterRequest) GetDestination() BackendClusterReferenceModify {
	if o == nil {
		return BackendClusterReferenceModify{}
	}
	return o.Destination
}

func (o *CreateVirtualClusterRequest) GetAuthentication() []VirtualClusterAuthenticationScheme {
	if o == nil {
		return []VirtualClusterAuthenticationScheme{}
	}
	return o.Authentication
}

func (o *CreateVirtualClusterRequest) GetNamespace() *VirtualClusterNamespace {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *CreateVirtualClusterRequest) GetACLMode() VirtualClusterACLMode {
	if o == nil {
		return VirtualClusterACLMode("")
	}
	return o.ACLMode
}

func (o *CreateVirtualClusterRequest) GetDNSLabel() string {
	if o == nil {
		return ""
	}
	return o.DNSLabel
}

func (o *CreateVirtualClusterRequest) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
