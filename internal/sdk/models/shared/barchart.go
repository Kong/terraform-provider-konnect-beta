// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BarChartType string

const (
	BarChartTypeHorizontalBar BarChartType = "horizontal_bar"
	BarChartTypeVerticalBar   BarChartType = "vertical_bar"
)

func (e BarChartType) ToPointer() *BarChartType {
	return &e
}
func (e *BarChartType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "horizontal_bar":
		fallthrough
	case "vertical_bar":
		*e = BarChartType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BarChartType: %v", v)
	}
}

// BarChart - A chart that can display non-timeseries data as bars.  This type of chart supports up to 2 dimensions (not `time`).
// To render a bar chart of timeseries data, use a `timeseries_bar` chart instead.
type BarChart struct {
	// The title of the chart, which is displayed in the tile's header.
	ChartTitle *string      `json:"chart_title,omitempty"`
	Type       BarChartType `json:"type"`
	// Whether to stack the bars (implicitly adding them together to form a total), or leave them independent from each other.
	//
	Stacked *bool `json:"stacked,omitempty"`
}

func (o *BarChart) GetChartTitle() *string {
	if o == nil {
		return nil
	}
	return o.ChartTitle
}

func (o *BarChart) GetType() BarChartType {
	if o == nil {
		return BarChartType("")
	}
	return o.Type
}

func (o *BarChart) GetStacked() *bool {
	if o == nil {
		return nil
	}
	return o.Stacked
}
