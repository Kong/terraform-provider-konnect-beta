// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type ForwardToVirtualClusterPolicyConfigType string

const (
	ForwardToVirtualClusterPolicyConfigTypePortMapping ForwardToVirtualClusterPolicyConfigType = "port_mapping"
	ForwardToVirtualClusterPolicyConfigTypeSni         ForwardToVirtualClusterPolicyConfigType = "sni"
)

type ForwardToVirtualClusterPolicyConfig struct {
	ForwardToClusterBySNIConfig         *ForwardToClusterBySNIConfig         `queryParam:"inline,name=config"`
	ForwardToClusterByPortMappingConfig *ForwardToClusterByPortMappingConfig `queryParam:"inline,name=config"`

	Type ForwardToVirtualClusterPolicyConfigType
}

func CreateForwardToVirtualClusterPolicyConfigPortMapping(portMapping ForwardToClusterByPortMappingConfig) ForwardToVirtualClusterPolicyConfig {
	typ := ForwardToVirtualClusterPolicyConfigTypePortMapping

	return ForwardToVirtualClusterPolicyConfig{
		ForwardToClusterByPortMappingConfig: &portMapping,
		Type:                                typ,
	}
}

func CreateForwardToVirtualClusterPolicyConfigSni(sni ForwardToClusterBySNIConfig) ForwardToVirtualClusterPolicyConfig {
	typ := ForwardToVirtualClusterPolicyConfigTypeSni

	return ForwardToVirtualClusterPolicyConfig{
		ForwardToClusterBySNIConfig: &sni,
		Type:                        typ,
	}
}

func (u *ForwardToVirtualClusterPolicyConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "port_mapping":
		forwardToClusterByPortMappingConfig := new(ForwardToClusterByPortMappingConfig)
		if err := utils.UnmarshalJSON(data, &forwardToClusterByPortMappingConfig, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == port_mapping) type ForwardToClusterByPortMappingConfig within ForwardToVirtualClusterPolicyConfig: %w", string(data), err)
		}

		u.ForwardToClusterByPortMappingConfig = forwardToClusterByPortMappingConfig
		u.Type = ForwardToVirtualClusterPolicyConfigTypePortMapping
		return nil
	case "sni":
		forwardToClusterBySNIConfig := new(ForwardToClusterBySNIConfig)
		if err := utils.UnmarshalJSON(data, &forwardToClusterBySNIConfig, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sni) type ForwardToClusterBySNIConfig within ForwardToVirtualClusterPolicyConfig: %w", string(data), err)
		}

		u.ForwardToClusterBySNIConfig = forwardToClusterBySNIConfig
		u.Type = ForwardToVirtualClusterPolicyConfigTypeSni
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ForwardToVirtualClusterPolicyConfig", string(data))
}

func (u ForwardToVirtualClusterPolicyConfig) MarshalJSON() ([]byte, error) {
	if u.ForwardToClusterBySNIConfig != nil {
		return utils.MarshalJSON(u.ForwardToClusterBySNIConfig, "", true)
	}

	if u.ForwardToClusterByPortMappingConfig != nil {
		return utils.MarshalJSON(u.ForwardToClusterByPortMappingConfig, "", true)
	}

	return nil, errors.New("could not marshal union type ForwardToVirtualClusterPolicyConfig: all fields are null")
}

// ForwardToVirtualClusterPolicy - Forwards requests to virtual clusters configured with port routing or SNI routing.
// While there can be multiple of these policies configured on a listener, there can only be one instance of
// `port_mapping`.
// When multiple policies are configured, the first one that matches the connection is used.
// If no policy matches, the connection is rejected.
//
// When using `port_mapping`, there must be a mapping port for each broker on the backend cluster see
// `ForwardToClusterBySNIConfig` for more details.
type ForwardToVirtualClusterPolicy struct {
	type_ string `const:"forward_to_virtual_cluster" json:"type"`
	// A unique user-defined name of the policy.
	Name *string `default:"null" json:"name"`
	// A human-readable description of the policy.
	Description *string `json:"description,omitempty"`
	// Whether the policy is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// A string containing the boolean expression that determines whether the policy is applied.
	Condition *string                             `json:"condition,omitempty"`
	Config    ForwardToVirtualClusterPolicyConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (f ForwardToVirtualClusterPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *ForwardToVirtualClusterPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "config"}); err != nil {
		return err
	}
	return nil
}

func (f *ForwardToVirtualClusterPolicy) GetType() string {
	return "forward_to_virtual_cluster"
}

func (f *ForwardToVirtualClusterPolicy) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *ForwardToVirtualClusterPolicy) GetDescription() *string {
	if f == nil {
		return nil
	}
	return f.Description
}

func (f *ForwardToVirtualClusterPolicy) GetEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.Enabled
}

func (f *ForwardToVirtualClusterPolicy) GetCondition() *string {
	if f == nil {
		return nil
	}
	return f.Condition
}

func (f *ForwardToVirtualClusterPolicy) GetConfig() ForwardToVirtualClusterPolicyConfig {
	if f == nil {
		return ForwardToVirtualClusterPolicyConfig{}
	}
	return f.Config
}

func (f *ForwardToVirtualClusterPolicy) GetConfigPortMapping() *ForwardToClusterByPortMappingConfig {
	return f.GetConfig().ForwardToClusterByPortMappingConfig
}

func (f *ForwardToVirtualClusterPolicy) GetConfigSni() *ForwardToClusterBySNIConfig {
	return f.GetConfig().ForwardToClusterBySNIConfig
}

func (f *ForwardToVirtualClusterPolicy) GetLabels() map[string]*string {
	if f == nil {
		return nil
	}
	return f.Labels
}
