// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PartOfRecord - * key - decrypt the record key
// * value - decrypt the record value
type PartOfRecord string

const (
	PartOfRecordKey   PartOfRecord = "key"
	PartOfRecordValue PartOfRecord = "value"
)

func (e PartOfRecord) ToPointer() *PartOfRecord {
	return &e
}
func (e *PartOfRecord) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key":
		fallthrough
	case "value":
		*e = PartOfRecord(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartOfRecord: %v", v)
	}
}

// DecryptionRecordSelector - Defines how to select part of a record for decryption.
type DecryptionRecordSelector struct {
	// * key - decrypt the record key
	// * value - decrypt the record value
	//
	PartOfRecord PartOfRecord `json:"part_of_record"`
}

func (o *DecryptionRecordSelector) GetPartOfRecord() PartOfRecord {
	if o == nil {
		return PartOfRecord("")
	}
	return o.PartOfRecord
}
