// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
	"time"
)

type ControlPlaneError string

const (
	ControlPlaneErrorControlPlaneErrorNoResponse             ControlPlaneError = "control_plane_error_no_response"
	ControlPlaneErrorControlPlaneErrorInvalidResponse        ControlPlaneError = "control_plane_error_invalid_response"
	ControlPlaneErrorControlPlaneErrorUnavailable            ControlPlaneError = "control_plane_error_unavailable"
	ControlPlaneErrorControlPlaneErrorInternalError          ControlPlaneError = "control_plane_error_internal_error"
	ControlPlaneErrorControlPlaneErrorBadRequest             ControlPlaneError = "control_plane_error_bad_request"
	ControlPlaneErrorControlPlaneErrorPluginConflict         ControlPlaneError = "control_plane_error_plugin_conflict"
	ControlPlaneErrorControlPlaneErrorDataConstraintError    ControlPlaneError = "control_plane_error_data_constraint_error"
	ControlPlaneErrorControlPlaneErrorImplementationNotFound ControlPlaneError = "control_plane_error_implementation_not_found"
)

func (e ControlPlaneError) ToPointer() *ControlPlaneError {
	return &e
}
func (e *ControlPlaneError) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "control_plane_error_no_response":
		fallthrough
	case "control_plane_error_invalid_response":
		fallthrough
	case "control_plane_error_unavailable":
		fallthrough
	case "control_plane_error_internal_error":
		fallthrough
	case "control_plane_error_bad_request":
		fallthrough
	case "control_plane_error_plugin_conflict":
		fallthrough
	case "control_plane_error_data_constraint_error":
		fallthrough
	case "control_plane_error_implementation_not_found":
		*e = ControlPlaneError(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ControlPlaneError: %v", v)
	}
}

type Details struct {
	Type                 *string  `json:"type,omitempty"`
	Message              []string `json:"message,omitempty"`
	AdditionalProperties any      `additionalProperties:"true" json:"-"`
}

func (d Details) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Details) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Details) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Details) GetMessage() []string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *Details) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Info struct {
	Details              []Details `json:"details,omitempty"`
	AdditionalProperties any       `additionalProperties:"true" json:"-"`
}

func (i Info) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Info) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Info) GetDetails() []Details {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *Info) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type AuthStrategySyncError struct {
	ControlPlaneError *ControlPlaneError `json:"control_plane_error,omitempty"`
	Message           string             `json:"message"`
	Info              *Info              `json:"info,omitempty"`
}

func (o *AuthStrategySyncError) GetControlPlaneError() *ControlPlaneError {
	if o == nil {
		return nil
	}
	return o.ControlPlaneError
}

func (o *AuthStrategySyncError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *AuthStrategySyncError) GetInfo() *Info {
	if o == nil {
		return nil
	}
	return o.Info
}

type Portals struct {
	// The portal identifier.
	ID string `json:"id"`
	// The name of the portal, used to distinguish it from other portals.
	Name string `json:"name"`
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName string `json:"display_name"`
}

func (o *Portals) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Portals) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Portals) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

// APIResponseSchema - API
type APIResponseSchema struct {
	// The API identifier.
	ID string `json:"id"`
	// The name of your API. The `name + version` combination must be unique for each API you publish.
	//
	Name string `json:"name"`
	// A description of your API. Will be visible on your live Portal.
	Description *string `json:"description,omitempty"`
	// An optional version for your API. Leave this empty if your API is unversioned.
	Version *string `json:"version"`
	// Marks this API as deprecated.
	Deprecated bool `json:"deprecated"`
	// The `slug` is used in generated URLs to provide human readable paths.
	//
	// Defaults to `slugify(name + version)`
	//
	Slug *string `json:"slug"`
	// The list of API specification ids for the API.
	APISpecIds            []string               `json:"api_spec_ids"`
	AuthStrategySyncError *AuthStrategySyncError `json:"auth_strategy_sync_error,omitempty"`
	// The list of portals which this API is published to.
	Portals []Portals `json:"portals"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (a APIResponseSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIResponseSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *APIResponseSchema) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *APIResponseSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *APIResponseSchema) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *APIResponseSchema) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *APIResponseSchema) GetDeprecated() bool {
	if o == nil {
		return false
	}
	return o.Deprecated
}

func (o *APIResponseSchema) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *APIResponseSchema) GetAPISpecIds() []string {
	if o == nil {
		return []string{}
	}
	return o.APISpecIds
}

func (o *APIResponseSchema) GetAuthStrategySyncError() *AuthStrategySyncError {
	if o == nil {
		return nil
	}
	return o.AuthStrategySyncError
}

func (o *APIResponseSchema) GetPortals() []Portals {
	if o == nil {
		return []Portals{}
	}
	return o.Portals
}

func (o *APIResponseSchema) GetLabels() map[string]*string {
	if o == nil {
		return map[string]*string{}
	}
	return o.Labels
}

func (o *APIResponseSchema) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *APIResponseSchema) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
