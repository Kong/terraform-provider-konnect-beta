// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type VirtualClusterReferenceType string

const (
	VirtualClusterReferenceTypeVirtualClusterReferenceByID   VirtualClusterReferenceType = "VirtualClusterReferenceById"
	VirtualClusterReferenceTypeVirtualClusterReferenceByName VirtualClusterReferenceType = "VirtualClusterReferenceByName"
)

// VirtualClusterReference - A reference to a virtual cluster.
type VirtualClusterReference struct {
	VirtualClusterReferenceByID   *VirtualClusterReferenceByID   `queryParam:"inline"`
	VirtualClusterReferenceByName *VirtualClusterReferenceByName `queryParam:"inline"`

	Type VirtualClusterReferenceType
}

func CreateVirtualClusterReferenceVirtualClusterReferenceByID(virtualClusterReferenceByID VirtualClusterReferenceByID) VirtualClusterReference {
	typ := VirtualClusterReferenceTypeVirtualClusterReferenceByID

	return VirtualClusterReference{
		VirtualClusterReferenceByID: &virtualClusterReferenceByID,
		Type:                        typ,
	}
}

func CreateVirtualClusterReferenceVirtualClusterReferenceByName(virtualClusterReferenceByName VirtualClusterReferenceByName) VirtualClusterReference {
	typ := VirtualClusterReferenceTypeVirtualClusterReferenceByName

	return VirtualClusterReference{
		VirtualClusterReferenceByName: &virtualClusterReferenceByName,
		Type:                          typ,
	}
}

func (u *VirtualClusterReference) UnmarshalJSON(data []byte) error {

	var virtualClusterReferenceByID VirtualClusterReferenceByID = VirtualClusterReferenceByID{}
	if err := utils.UnmarshalJSON(data, &virtualClusterReferenceByID, "", true, true); err == nil {
		u.VirtualClusterReferenceByID = &virtualClusterReferenceByID
		u.Type = VirtualClusterReferenceTypeVirtualClusterReferenceByID
		return nil
	}

	var virtualClusterReferenceByName VirtualClusterReferenceByName = VirtualClusterReferenceByName{}
	if err := utils.UnmarshalJSON(data, &virtualClusterReferenceByName, "", true, true); err == nil {
		u.VirtualClusterReferenceByName = &virtualClusterReferenceByName
		u.Type = VirtualClusterReferenceTypeVirtualClusterReferenceByName
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterReference", string(data))
}

func (u VirtualClusterReference) MarshalJSON() ([]byte, error) {
	if u.VirtualClusterReferenceByID != nil {
		return utils.MarshalJSON(u.VirtualClusterReferenceByID, "", true)
	}

	if u.VirtualClusterReferenceByName != nil {
		return utils.MarshalJSON(u.VirtualClusterReferenceByName, "", true)
	}

	return nil, errors.New("could not marshal union type VirtualClusterReference: all fields are null")
}
