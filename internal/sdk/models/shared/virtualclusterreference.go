// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type VirtualClusterReferenceType string

const (
	VirtualClusterReferenceTypeVirtualClusterReferenceByID   VirtualClusterReferenceType = "VirtualClusterReferenceById"
	VirtualClusterReferenceTypeVirtualClusterReferenceByName VirtualClusterReferenceType = "VirtualClusterReferenceByName"
)

// VirtualClusterReference - A reference to a virtual cluster.
type VirtualClusterReference struct {
	VirtualClusterReferenceByID   *VirtualClusterReferenceByID   `queryParam:"inline,name=VirtualClusterReference"`
	VirtualClusterReferenceByName *VirtualClusterReferenceByName `queryParam:"inline,name=VirtualClusterReference"`

	Type VirtualClusterReferenceType
}

func CreateVirtualClusterReferenceVirtualClusterReferenceByID(virtualClusterReferenceByID VirtualClusterReferenceByID) VirtualClusterReference {
	typ := VirtualClusterReferenceTypeVirtualClusterReferenceByID

	return VirtualClusterReference{
		VirtualClusterReferenceByID: &virtualClusterReferenceByID,
		Type:                        typ,
	}
}

func CreateVirtualClusterReferenceVirtualClusterReferenceByName(virtualClusterReferenceByName VirtualClusterReferenceByName) VirtualClusterReference {
	typ := VirtualClusterReferenceTypeVirtualClusterReferenceByName

	return VirtualClusterReference{
		VirtualClusterReferenceByName: &virtualClusterReferenceByName,
		Type:                          typ,
	}
}

func (u *VirtualClusterReference) UnmarshalJSON(data []byte) error {

	var candidates []utils.UnionCandidate

	// Collect all valid candidates
	var virtualClusterReferenceByID VirtualClusterReferenceByID = VirtualClusterReferenceByID{}
	if err := utils.UnmarshalJSON(data, &virtualClusterReferenceByID, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  VirtualClusterReferenceTypeVirtualClusterReferenceByID,
			Value: &virtualClusterReferenceByID,
		})
	}

	var virtualClusterReferenceByName VirtualClusterReferenceByName = VirtualClusterReferenceByName{}
	if err := utils.UnmarshalJSON(data, &virtualClusterReferenceByName, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  VirtualClusterReferenceTypeVirtualClusterReferenceByName,
			Value: &virtualClusterReferenceByName,
		})
	}

	if len(candidates) == 0 {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterReference", string(data))
	}

	// Pick the best candidate using multi-stage filtering
	best := utils.PickBestCandidate(candidates)
	if best == nil {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterReference", string(data))
	}

	// Set the union type and value based on the best candidate
	u.Type = best.Type.(VirtualClusterReferenceType)
	switch best.Type {
	case VirtualClusterReferenceTypeVirtualClusterReferenceByID:
		u.VirtualClusterReferenceByID = best.Value.(*VirtualClusterReferenceByID)
		return nil
	case VirtualClusterReferenceTypeVirtualClusterReferenceByName:
		u.VirtualClusterReferenceByName = best.Value.(*VirtualClusterReferenceByName)
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterReference", string(data))
}

func (u VirtualClusterReference) MarshalJSON() ([]byte, error) {
	if u.VirtualClusterReferenceByID != nil {
		return utils.MarshalJSON(u.VirtualClusterReferenceByID, "", true)
	}

	if u.VirtualClusterReferenceByName != nil {
		return utils.MarshalJSON(u.VirtualClusterReferenceByName, "", true)
	}

	return nil, errors.New("could not marshal union type VirtualClusterReference: all fields are null")
}
