// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayConsumePolicyModifyType string

const (
	EventGatewayConsumePolicyModifyTypeModifyHeaders    EventGatewayConsumePolicyModifyType = "modify_headers"
	EventGatewayConsumePolicyModifyTypeSchemaValidation EventGatewayConsumePolicyModifyType = "schema_validation"
	EventGatewayConsumePolicyModifyTypeDecrypt          EventGatewayConsumePolicyModifyType = "decrypt"
)

// EventGatewayConsumePolicyModify - The typed schema of the consume policy to modify it.
type EventGatewayConsumePolicyModify struct {
	EventGatewayModifyHeadersPolicy           *EventGatewayModifyHeadersPolicy           `queryParam:"inline"`
	EventGatewayConsumeSchemaValidationPolicy *EventGatewayConsumeSchemaValidationPolicy `queryParam:"inline"`
	EventGatewayDecryptPolicy                 *EventGatewayDecryptPolicy                 `queryParam:"inline"`

	Type EventGatewayConsumePolicyModifyType
}

func CreateEventGatewayConsumePolicyModifyModifyHeaders(modifyHeaders EventGatewayModifyHeadersPolicy) EventGatewayConsumePolicyModify {
	typ := EventGatewayConsumePolicyModifyTypeModifyHeaders

	typStr := EventGatewayModifyHeadersPolicyType(typ)
	modifyHeaders.Type = typStr

	return EventGatewayConsumePolicyModify{
		EventGatewayModifyHeadersPolicy: &modifyHeaders,
		Type:                            typ,
	}
}

func CreateEventGatewayConsumePolicyModifySchemaValidation(schemaValidation EventGatewayConsumeSchemaValidationPolicy) EventGatewayConsumePolicyModify {
	typ := EventGatewayConsumePolicyModifyTypeSchemaValidation

	typStr := EventGatewayConsumeSchemaValidationPolicyType(typ)
	schemaValidation.Type = typStr

	return EventGatewayConsumePolicyModify{
		EventGatewayConsumeSchemaValidationPolicy: &schemaValidation,
		Type: typ,
	}
}

func CreateEventGatewayConsumePolicyModifyDecrypt(decrypt EventGatewayDecryptPolicy) EventGatewayConsumePolicyModify {
	typ := EventGatewayConsumePolicyModifyTypeDecrypt

	typStr := EventGatewayDecryptPolicyType(typ)
	decrypt.Type = typStr

	return EventGatewayConsumePolicyModify{
		EventGatewayDecryptPolicy: &decrypt,
		Type:                      typ,
	}
}

func (u *EventGatewayConsumePolicyModify) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "modify_headers":
		eventGatewayModifyHeadersPolicy := new(EventGatewayModifyHeadersPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayModifyHeadersPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == modify_headers) type EventGatewayModifyHeadersPolicy within EventGatewayConsumePolicyModify: %w", string(data), err)
		}

		u.EventGatewayModifyHeadersPolicy = eventGatewayModifyHeadersPolicy
		u.Type = EventGatewayConsumePolicyModifyTypeModifyHeaders
		return nil
	case "schema_validation":
		eventGatewayConsumeSchemaValidationPolicy := new(EventGatewayConsumeSchemaValidationPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayConsumeSchemaValidationPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == schema_validation) type EventGatewayConsumeSchemaValidationPolicy within EventGatewayConsumePolicyModify: %w", string(data), err)
		}

		u.EventGatewayConsumeSchemaValidationPolicy = eventGatewayConsumeSchemaValidationPolicy
		u.Type = EventGatewayConsumePolicyModifyTypeSchemaValidation
		return nil
	case "decrypt":
		eventGatewayDecryptPolicy := new(EventGatewayDecryptPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayDecryptPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == decrypt) type EventGatewayDecryptPolicy within EventGatewayConsumePolicyModify: %w", string(data), err)
		}

		u.EventGatewayDecryptPolicy = eventGatewayDecryptPolicy
		u.Type = EventGatewayConsumePolicyModifyTypeDecrypt
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayConsumePolicyModify", string(data))
}

func (u EventGatewayConsumePolicyModify) MarshalJSON() ([]byte, error) {
	if u.EventGatewayModifyHeadersPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayModifyHeadersPolicy, "", true)
	}

	if u.EventGatewayConsumeSchemaValidationPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayConsumeSchemaValidationPolicy, "", true)
	}

	if u.EventGatewayDecryptPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayDecryptPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayConsumePolicyModify: all fields are null")
}
