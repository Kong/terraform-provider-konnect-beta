// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type InvalidParametersType string

const (
	InvalidParametersTypeInvalidParameterStandard      InvalidParametersType = "InvalidParameterStandard"
	InvalidParametersTypeInvalidParameterMinimumLength InvalidParametersType = "InvalidParameterMinimumLength"
	InvalidParametersTypeInvalidParameterMaximumLength InvalidParametersType = "InvalidParameterMaximumLength"
	InvalidParametersTypeInvalidParameterChoiceItem    InvalidParametersType = "InvalidParameterChoiceItem"
	InvalidParametersTypeInvalidParameterDependentItem InvalidParametersType = "InvalidParameterDependentItem"
)

type InvalidParameters struct {
	InvalidParameterStandard      *InvalidParameterStandard      `queryParam:"inline,name=InvalidParameters"`
	InvalidParameterMinimumLength *InvalidParameterMinimumLength `queryParam:"inline,name=InvalidParameters"`
	InvalidParameterMaximumLength *InvalidParameterMaximumLength `queryParam:"inline,name=InvalidParameters"`
	InvalidParameterChoiceItem    *InvalidParameterChoiceItem    `queryParam:"inline,name=InvalidParameters"`
	InvalidParameterDependentItem *InvalidParameterDependentItem `queryParam:"inline,name=InvalidParameters"`

	Type InvalidParametersType
}

func CreateInvalidParametersInvalidParameterStandard(invalidParameterStandard InvalidParameterStandard) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterStandard

	return InvalidParameters{
		InvalidParameterStandard: &invalidParameterStandard,
		Type:                     typ,
	}
}

func CreateInvalidParametersInvalidParameterMinimumLength(invalidParameterMinimumLength InvalidParameterMinimumLength) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterMinimumLength

	return InvalidParameters{
		InvalidParameterMinimumLength: &invalidParameterMinimumLength,
		Type:                          typ,
	}
}

func CreateInvalidParametersInvalidParameterMaximumLength(invalidParameterMaximumLength InvalidParameterMaximumLength) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterMaximumLength

	return InvalidParameters{
		InvalidParameterMaximumLength: &invalidParameterMaximumLength,
		Type:                          typ,
	}
}

func CreateInvalidParametersInvalidParameterChoiceItem(invalidParameterChoiceItem InvalidParameterChoiceItem) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterChoiceItem

	return InvalidParameters{
		InvalidParameterChoiceItem: &invalidParameterChoiceItem,
		Type:                       typ,
	}
}

func CreateInvalidParametersInvalidParameterDependentItem(invalidParameterDependentItem InvalidParameterDependentItem) InvalidParameters {
	typ := InvalidParametersTypeInvalidParameterDependentItem

	return InvalidParameters{
		InvalidParameterDependentItem: &invalidParameterDependentItem,
		Type:                          typ,
	}
}

func (u *InvalidParameters) UnmarshalJSON(data []byte) error {

	var candidates []utils.UnionCandidate

	// Collect all valid candidates
	var invalidParameterMinimumLength InvalidParameterMinimumLength = InvalidParameterMinimumLength{}
	if err := utils.UnmarshalJSON(data, &invalidParameterMinimumLength, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  InvalidParametersTypeInvalidParameterMinimumLength,
			Value: &invalidParameterMinimumLength,
		})
	}

	var invalidParameterMaximumLength InvalidParameterMaximumLength = InvalidParameterMaximumLength{}
	if err := utils.UnmarshalJSON(data, &invalidParameterMaximumLength, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  InvalidParametersTypeInvalidParameterMaximumLength,
			Value: &invalidParameterMaximumLength,
		})
	}

	var invalidParameterChoiceItem InvalidParameterChoiceItem = InvalidParameterChoiceItem{}
	if err := utils.UnmarshalJSON(data, &invalidParameterChoiceItem, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  InvalidParametersTypeInvalidParameterChoiceItem,
			Value: &invalidParameterChoiceItem,
		})
	}

	var invalidParameterDependentItem InvalidParameterDependentItem = InvalidParameterDependentItem{}
	if err := utils.UnmarshalJSON(data, &invalidParameterDependentItem, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  InvalidParametersTypeInvalidParameterDependentItem,
			Value: &invalidParameterDependentItem,
		})
	}

	var invalidParameterStandard InvalidParameterStandard = InvalidParameterStandard{}
	if err := utils.UnmarshalJSON(data, &invalidParameterStandard, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  InvalidParametersTypeInvalidParameterStandard,
			Value: &invalidParameterStandard,
		})
	}

	if len(candidates) == 0 {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for InvalidParameters", string(data))
	}

	// Pick the best candidate using multi-stage filtering
	best := utils.PickBestCandidate(candidates)
	if best == nil {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for InvalidParameters", string(data))
	}

	// Set the union type and value based on the best candidate
	u.Type = best.Type.(InvalidParametersType)
	switch best.Type {
	case InvalidParametersTypeInvalidParameterMinimumLength:
		u.InvalidParameterMinimumLength = best.Value.(*InvalidParameterMinimumLength)
		return nil
	case InvalidParametersTypeInvalidParameterMaximumLength:
		u.InvalidParameterMaximumLength = best.Value.(*InvalidParameterMaximumLength)
		return nil
	case InvalidParametersTypeInvalidParameterChoiceItem:
		u.InvalidParameterChoiceItem = best.Value.(*InvalidParameterChoiceItem)
		return nil
	case InvalidParametersTypeInvalidParameterDependentItem:
		u.InvalidParameterDependentItem = best.Value.(*InvalidParameterDependentItem)
		return nil
	case InvalidParametersTypeInvalidParameterStandard:
		u.InvalidParameterStandard = best.Value.(*InvalidParameterStandard)
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InvalidParameters", string(data))
}

func (u InvalidParameters) MarshalJSON() ([]byte, error) {
	if u.InvalidParameterStandard != nil {
		return utils.MarshalJSON(u.InvalidParameterStandard, "", true)
	}

	if u.InvalidParameterMinimumLength != nil {
		return utils.MarshalJSON(u.InvalidParameterMinimumLength, "", true)
	}

	if u.InvalidParameterMaximumLength != nil {
		return utils.MarshalJSON(u.InvalidParameterMaximumLength, "", true)
	}

	if u.InvalidParameterChoiceItem != nil {
		return utils.MarshalJSON(u.InvalidParameterChoiceItem, "", true)
	}

	if u.InvalidParameterDependentItem != nil {
		return utils.MarshalJSON(u.InvalidParameterDependentItem, "", true)
	}

	return nil, errors.New("could not marshal union type InvalidParameters: all fields are null")
}
