// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type TLSVersions string

const (
	TLSVersionsTls12 TLSVersions = "tls12"
	TLSVersionsTls13 TLSVersions = "tls13"
)

func (e TLSVersions) ToPointer() *TLSVersions {
	return &e
}
func (e *TLSVersions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tls12":
		fallthrough
	case "tls13":
		*e = TLSVersions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLSVersions: %v", v)
	}
}

type BackendClusterTLS struct {
	// If true, TLS is enabled for connections to this backend cluster. If false, TLS is explicitly disabled.
	Enabled bool `json:"enabled"`
	// If true, skip certificate verification. It's not secure to use for production.
	InsecureSkipVerify *bool `default:"false" json:"insecure_skip_verify"`
	// A literal value or a reference to an existing secret as a template string expression.
	// The value is stored and returned by the API as-is, not treated as sensitive information.
	//
	CaBundle *string `json:"ca_bundle,omitempty"`
	// List of supported TLS versions.
	TLSVersions []TLSVersions `json:"tls_versions,omitempty"`
}

func (b BackendClusterTLS) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BackendClusterTLS) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BackendClusterTLS) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *BackendClusterTLS) GetInsecureSkipVerify() *bool {
	if o == nil {
		return nil
	}
	return o.InsecureSkipVerify
}

func (o *BackendClusterTLS) GetCaBundle() *string {
	if o == nil {
		return nil
	}
	return o.CaBundle
}

func (o *BackendClusterTLS) GetTLSVersions() []TLSVersions {
	if o == nil {
		return nil
	}
	return o.TLSVersions
}
