// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Granularity - Force time grouping into buckets of the specified duration.  Only has an effect if "time" is in the "dimensions" list.
//
// The granularity of the result may be coarser than requested.  The finest allowed granularity depends on the query's time range: data farther in the past may have coarser granularity.  The exact result granularity will be reported in the response `meta.granularity_ms` field.
//
// If granularity is not specified and "time" is in the dimensions list, a default will be chosen based on the time range requested.
//
// Different relative times support different granularities:
//
//   - 15m => tenSecondly, thirtySecondly, minutely
//   - 1h  => tenSecondly, thirtySecondly, minutely, fiveMinutely, tenMinutely
//   - 6h  => thirtySecondly, minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly
//   - 12h => minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly
//   - 24h => fiveMinutely, tenMinutely, thirtyMinutely, hourly
//   - 7d  => thirtyMinutely, hourly, twoHourly, twelveHourly, daily
//   - 30d => hourly, twoHourly, twelveHourly, daily, weekly
//
// For special time ranges:
//
//   - current_week, previous_week   => thirtyMinutely, hourly, twoHourly, twelveHourly, daily
//   - current_month, previous_month => hourly, twoHourly, twelveHourly, daily, weekly
//
// For absolute time ranges, daily will be used.
type Granularity string

const (
	GranularityTenSecondly    Granularity = "tenSecondly"
	GranularityThirtySecondly Granularity = "thirtySecondly"
	GranularityMinutely       Granularity = "minutely"
	GranularityFiveMinutely   Granularity = "fiveMinutely"
	GranularityTenMinutely    Granularity = "tenMinutely"
	GranularityThirtyMinutely Granularity = "thirtyMinutely"
	GranularityHourly         Granularity = "hourly"
	GranularityTwoHourly      Granularity = "twoHourly"
	GranularityTwelveHourly   Granularity = "twelveHourly"
	GranularityDaily          Granularity = "daily"
	GranularityWeekly         Granularity = "weekly"
)

func (e Granularity) ToPointer() *Granularity {
	return &e
}
func (e *Granularity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tenSecondly":
		fallthrough
	case "thirtySecondly":
		fallthrough
	case "minutely":
		fallthrough
	case "fiveMinutely":
		fallthrough
	case "tenMinutely":
		fallthrough
	case "thirtyMinutely":
		fallthrough
	case "hourly":
		fallthrough
	case "twoHourly":
		fallthrough
	case "twelveHourly":
		fallthrough
	case "daily":
		fallthrough
	case "weekly":
		*e = Granularity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Granularity: %v", v)
	}
}
