// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdvancedMetrics string

const (
	AdvancedMetricsKongLatencyAverage     AdvancedMetrics = "kong_latency_average"
	AdvancedMetricsKongLatencyP50         AdvancedMetrics = "kong_latency_p50"
	AdvancedMetricsKongLatencyP95         AdvancedMetrics = "kong_latency_p95"
	AdvancedMetricsKongLatencyP99         AdvancedMetrics = "kong_latency_p99"
	AdvancedMetricsRequestCount           AdvancedMetrics = "request_count"
	AdvancedMetricsRequestPerMinute       AdvancedMetrics = "request_per_minute"
	AdvancedMetricsRequestSizeAverage     AdvancedMetrics = "request_size_average"
	AdvancedMetricsRequestSizeP50         AdvancedMetrics = "request_size_p50"
	AdvancedMetricsRequestSizeP95         AdvancedMetrics = "request_size_p95"
	AdvancedMetricsRequestSizeP99         AdvancedMetrics = "request_size_p99"
	AdvancedMetricsRequestSizeSum         AdvancedMetrics = "request_size_sum"
	AdvancedMetricsResponseLatencyAverage AdvancedMetrics = "response_latency_average"
	AdvancedMetricsResponseLatencyP50     AdvancedMetrics = "response_latency_p50"
	AdvancedMetricsResponseLatencyP95     AdvancedMetrics = "response_latency_p95"
	AdvancedMetricsResponseLatencyP99     AdvancedMetrics = "response_latency_p99"
	AdvancedMetricsResponseSizeAverage    AdvancedMetrics = "response_size_average"
	AdvancedMetricsResponseSizeP50        AdvancedMetrics = "response_size_p50"
	AdvancedMetricsResponseSizeP95        AdvancedMetrics = "response_size_p95"
	AdvancedMetricsResponseSizeP99        AdvancedMetrics = "response_size_p99"
	AdvancedMetricsResponseSizeSum        AdvancedMetrics = "response_size_sum"
	AdvancedMetricsUpstreamLatencyAverage AdvancedMetrics = "upstream_latency_average"
	AdvancedMetricsUpstreamLatencyP50     AdvancedMetrics = "upstream_latency_p50"
	AdvancedMetricsUpstreamLatencyP95     AdvancedMetrics = "upstream_latency_p95"
	AdvancedMetricsUpstreamLatencyP99     AdvancedMetrics = "upstream_latency_p99"
)

func (e AdvancedMetrics) ToPointer() *AdvancedMetrics {
	return &e
}
func (e *AdvancedMetrics) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kong_latency_average":
		fallthrough
	case "kong_latency_p50":
		fallthrough
	case "kong_latency_p95":
		fallthrough
	case "kong_latency_p99":
		fallthrough
	case "request_count":
		fallthrough
	case "request_per_minute":
		fallthrough
	case "request_size_average":
		fallthrough
	case "request_size_p50":
		fallthrough
	case "request_size_p95":
		fallthrough
	case "request_size_p99":
		fallthrough
	case "request_size_sum":
		fallthrough
	case "response_latency_average":
		fallthrough
	case "response_latency_p50":
		fallthrough
	case "response_latency_p95":
		fallthrough
	case "response_latency_p99":
		fallthrough
	case "response_size_average":
		fallthrough
	case "response_size_p50":
		fallthrough
	case "response_size_p95":
		fallthrough
	case "response_size_p99":
		fallthrough
	case "response_size_sum":
		fallthrough
	case "upstream_latency_average":
		fallthrough
	case "upstream_latency_p50":
		fallthrough
	case "upstream_latency_p95":
		fallthrough
	case "upstream_latency_p99":
		*e = AdvancedMetrics(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdvancedMetrics: %v", v)
	}
}
