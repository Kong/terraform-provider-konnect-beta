// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// VirtualClusterAuthenticationOauthBearerMediation - Methods to mediate authentication:
// * passthrough - pass authentication from the client through proxy to the backend cluster without any kind of
//
//	validation
//
// * validate_forward - pass authentication from the client through proxy to the backend cluster.
//
//	Proxy does the validation before forwarding it to the client.
//
// * terminate - terminate authentication at the proxy level and originate authentication to the backend cluster
//
//	using the configuration defined at BackendCluster's authentication.
//	SASL auth is not originated if authentication on the backend_cluster is not configured.
type VirtualClusterAuthenticationOauthBearerMediation string

const (
	VirtualClusterAuthenticationOauthBearerMediationPassthrough     VirtualClusterAuthenticationOauthBearerMediation = "passthrough"
	VirtualClusterAuthenticationOauthBearerMediationValidateForward VirtualClusterAuthenticationOauthBearerMediation = "validate_forward"
	VirtualClusterAuthenticationOauthBearerMediationTerminate       VirtualClusterAuthenticationOauthBearerMediation = "terminate"
)

func (e VirtualClusterAuthenticationOauthBearerMediation) ToPointer() *VirtualClusterAuthenticationOauthBearerMediation {
	return &e
}
func (e *VirtualClusterAuthenticationOauthBearerMediation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passthrough":
		fallthrough
	case "validate_forward":
		fallthrough
	case "terminate":
		*e = VirtualClusterAuthenticationOauthBearerMediation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualClusterAuthenticationOauthBearerMediation: %v", v)
	}
}

// VirtualClusterAuthenticationOauthBearer - Oauth Bearer authentication scheme for the virtual cluster.
type VirtualClusterAuthenticationOauthBearer struct {
	type_ string `const:"oauth_bearer" json:"type"`
	// Methods to mediate authentication:
	// * passthrough - pass authentication from the client through proxy to the backend cluster without any kind of
	//
	//   validation
	// * validate_forward - pass authentication from the client through proxy to the backend cluster.
	//
	//   Proxy does the validation before forwarding it to the client.
	// * terminate - terminate authentication at the proxy level and originate authentication to the backend cluster
	//
	//   using the configuration defined at BackendCluster's authentication.
	//   SASL auth is not originated if authentication on the backend_cluster is not configured.
	//
	Mediation VirtualClusterAuthenticationOauthBearerMediation `json:"mediation"`
	// Maps JWT claims in the case when sub and scope are presented as different claims in your JWT token.
	ClaimsMapping *VirtualClusterAuthenticationClaimsMapping `json:"claims_mapping,omitempty"`
	// JSON Web Key Set configuration for verifying token signatures.
	Jwks *VirtualClusterAuthenticationJWKS `json:"jwks,omitempty"`
	// Validation rules.
	Validate *VirtualClusterAuthenticationValidate `json:"validate,omitempty"`
}

func (v VirtualClusterAuthenticationOauthBearer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VirtualClusterAuthenticationOauthBearer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VirtualClusterAuthenticationOauthBearer) GetType() string {
	return "oauth_bearer"
}

func (o *VirtualClusterAuthenticationOauthBearer) GetMediation() VirtualClusterAuthenticationOauthBearerMediation {
	if o == nil {
		return VirtualClusterAuthenticationOauthBearerMediation("")
	}
	return o.Mediation
}

func (o *VirtualClusterAuthenticationOauthBearer) GetClaimsMapping() *VirtualClusterAuthenticationClaimsMapping {
	if o == nil {
		return nil
	}
	return o.ClaimsMapping
}

func (o *VirtualClusterAuthenticationOauthBearer) GetJwks() *VirtualClusterAuthenticationJWKS {
	if o == nil {
		return nil
	}
	return o.Jwks
}

func (o *VirtualClusterAuthenticationOauthBearer) GetValidate() *VirtualClusterAuthenticationValidate {
	if o == nil {
		return nil
	}
	return o.Validate
}
