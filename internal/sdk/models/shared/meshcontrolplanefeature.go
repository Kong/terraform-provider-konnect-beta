// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MeshControlPlaneFeatureType string

const (
	MeshControlPlaneFeatureTypeMeshCreation              MeshControlPlaneFeatureType = "MeshCreation"
	MeshControlPlaneFeatureTypeHostnameGeneratorCreation MeshControlPlaneFeatureType = "HostnameGeneratorCreation"
)

func (e MeshControlPlaneFeatureType) ToPointer() *MeshControlPlaneFeatureType {
	return &e
}
func (e *MeshControlPlaneFeatureType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshCreation":
		fallthrough
	case "HostnameGeneratorCreation":
		*e = MeshControlPlaneFeatureType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshControlPlaneFeatureType: %v", v)
	}
}

// MeshControlPlaneFeature - Features to be enabled in the control plane. Currently only defaults are supported.
type MeshControlPlaneFeature struct {
	Type                      MeshControlPlaneFeatureType                        `json:"type"`
	HostnameGeneratorCreation *MeshControlPlaneFeatureHostnameGenerationCreation `json:"hostnameGeneratorCreation,omitempty"`
	MeshCreation              *MeshControlPlaneFeatureMeshCreation               `json:"meshCreation,omitempty"`
}

func (o *MeshControlPlaneFeature) GetType() MeshControlPlaneFeatureType {
	if o == nil {
		return MeshControlPlaneFeatureType("")
	}
	return o.Type
}

func (o *MeshControlPlaneFeature) GetHostnameGeneratorCreation() *MeshControlPlaneFeatureHostnameGenerationCreation {
	if o == nil {
		return nil
	}
	return o.HostnameGeneratorCreation
}

func (o *MeshControlPlaneFeature) GetMeshCreation() *MeshControlPlaneFeatureMeshCreation {
	if o == nil {
		return nil
	}
	return o.MeshCreation
}
