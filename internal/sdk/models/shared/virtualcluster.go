// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
	"time"
)

// VirtualCluster - A representation of a Kafka cluster that maps to a backend cluster.
type VirtualCluster struct {
	// The unique identifier of the virtual cluster.
	ID string `json:"id"`
	// A human-readable description of the virtual cluster.
	Description *string `json:"description,omitempty"`
	// The backend cluster associated with the virtual cluster.
	Destination BackendClusterReference `json:"destination"`
	// How to handle authentication from clients.
	//
	// It tries to authenticate with every rule sequentially one by one.
	// It succeeds on the first match, and fails if no rule matches.
	//
	Authentication []VirtualClusterAuthenticationScheme `json:"authentication"`
	// Namespace allows to implement multitenancy using a single backend cluster.
	// It allows to either hide or enforce a static prefix on resources (topics, consumer group IDs, transaction IDs).
	//
	Namespace *VirtualClusterNamespace `json:"namespace,omitempty"`
	// The name of the virtual cluster.
	Name string `json:"name"`
	// The DNS label used in the bootstrap server URL to identify the virtual cluster when using SNI routing.
	// The format follows the RFC1035: 1-63 chars, lowercase alphanumeric or '-', must start with a letter and end with an alphanumeric character.
	DNSLabel string `json:"dns_label"`
	// Configures whether or not ACL policies are enforced on the gateway.
	// - `enforce_on_gateway` means the gateway enforces its own ACL policies for this virtual cluster
	//
	//   and does not forward ACL-related commands to the backend cluster.
	//   Note that if there are no ACL policies configured, all access is denied.
	// - `passthrough` tells the gateway to forward all ACL-related commands.
	//
	ACLMode VirtualClusterACLMode `json:"acl_mode"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (v VirtualCluster) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VirtualCluster) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "destination", "authentication", "name", "dns_label", "acl_mode", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (v *VirtualCluster) GetID() string {
	if v == nil {
		return ""
	}
	return v.ID
}

func (v *VirtualCluster) GetDescription() *string {
	if v == nil {
		return nil
	}
	return v.Description
}

func (v *VirtualCluster) GetDestination() BackendClusterReference {
	if v == nil {
		return BackendClusterReference{}
	}
	return v.Destination
}

func (v *VirtualCluster) GetAuthentication() []VirtualClusterAuthenticationScheme {
	if v == nil {
		return []VirtualClusterAuthenticationScheme{}
	}
	return v.Authentication
}

func (v *VirtualCluster) GetNamespace() *VirtualClusterNamespace {
	if v == nil {
		return nil
	}
	return v.Namespace
}

func (v *VirtualCluster) GetName() string {
	if v == nil {
		return ""
	}
	return v.Name
}

func (v *VirtualCluster) GetDNSLabel() string {
	if v == nil {
		return ""
	}
	return v.DNSLabel
}

func (v *VirtualCluster) GetACLMode() VirtualClusterACLMode {
	if v == nil {
		return VirtualClusterACLMode("")
	}
	return v.ACLMode
}

func (v *VirtualCluster) GetLabels() map[string]*string {
	if v == nil {
		return nil
	}
	return v.Labels
}

func (v *VirtualCluster) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *VirtualCluster) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}
