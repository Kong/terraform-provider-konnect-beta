// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryReferenceType string

const (
	SchemaRegistryReferenceTypeSchemaRegistryReferenceByID   SchemaRegistryReferenceType = "SchemaRegistryReferenceById"
	SchemaRegistryReferenceTypeSchemaRegistryReferenceByName SchemaRegistryReferenceType = "SchemaRegistryReferenceByName"
)

// SchemaRegistryReference - A reference to a schema Registry.
type SchemaRegistryReference struct {
	SchemaRegistryReferenceByID   *SchemaRegistryReferenceByID   `queryParam:"inline,name=SchemaRegistryReference"`
	SchemaRegistryReferenceByName *SchemaRegistryReferenceByName `queryParam:"inline,name=SchemaRegistryReference"`

	Type SchemaRegistryReferenceType
}

func CreateSchemaRegistryReferenceSchemaRegistryReferenceByID(schemaRegistryReferenceByID SchemaRegistryReferenceByID) SchemaRegistryReference {
	typ := SchemaRegistryReferenceTypeSchemaRegistryReferenceByID

	return SchemaRegistryReference{
		SchemaRegistryReferenceByID: &schemaRegistryReferenceByID,
		Type:                        typ,
	}
}

func CreateSchemaRegistryReferenceSchemaRegistryReferenceByName(schemaRegistryReferenceByName SchemaRegistryReferenceByName) SchemaRegistryReference {
	typ := SchemaRegistryReferenceTypeSchemaRegistryReferenceByName

	return SchemaRegistryReference{
		SchemaRegistryReferenceByName: &schemaRegistryReferenceByName,
		Type:                          typ,
	}
}

func (u *SchemaRegistryReference) UnmarshalJSON(data []byte) error {

	var candidates []utils.UnionCandidate

	// Collect all valid candidates
	var schemaRegistryReferenceByID SchemaRegistryReferenceByID = SchemaRegistryReferenceByID{}
	if err := utils.UnmarshalJSON(data, &schemaRegistryReferenceByID, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  SchemaRegistryReferenceTypeSchemaRegistryReferenceByID,
			Value: &schemaRegistryReferenceByID,
		})
	}

	var schemaRegistryReferenceByName SchemaRegistryReferenceByName = SchemaRegistryReferenceByName{}
	if err := utils.UnmarshalJSON(data, &schemaRegistryReferenceByName, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  SchemaRegistryReferenceTypeSchemaRegistryReferenceByName,
			Value: &schemaRegistryReferenceByName,
		})
	}

	if len(candidates) == 0 {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryReference", string(data))
	}

	// Pick the best candidate using multi-stage filtering
	best := utils.PickBestCandidate(candidates)
	if best == nil {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryReference", string(data))
	}

	// Set the union type and value based on the best candidate
	u.Type = best.Type.(SchemaRegistryReferenceType)
	switch best.Type {
	case SchemaRegistryReferenceTypeSchemaRegistryReferenceByID:
		u.SchemaRegistryReferenceByID = best.Value.(*SchemaRegistryReferenceByID)
		return nil
	case SchemaRegistryReferenceTypeSchemaRegistryReferenceByName:
		u.SchemaRegistryReferenceByName = best.Value.(*SchemaRegistryReferenceByName)
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryReference", string(data))
}

func (u SchemaRegistryReference) MarshalJSON() ([]byte, error) {
	if u.SchemaRegistryReferenceByID != nil {
		return utils.MarshalJSON(u.SchemaRegistryReferenceByID, "", true)
	}

	if u.SchemaRegistryReferenceByName != nil {
		return utils.MarshalJSON(u.SchemaRegistryReferenceByName, "", true)
	}

	return nil, errors.New("could not marshal union type SchemaRegistryReference: all fields are null")
}
