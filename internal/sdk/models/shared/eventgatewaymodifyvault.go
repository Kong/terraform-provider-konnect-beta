// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayModifyVaultType string

const (
	EventGatewayModifyVaultTypeEnv EventGatewayModifyVaultType = "env"
)

// EventGatewayModifyVault - The typed schema of the vault to modify it.
type EventGatewayModifyVault struct {
	EventGatewayVaultEnv *EventGatewayVaultEnv `queryParam:"inline"`

	Type EventGatewayModifyVaultType
}

func CreateEventGatewayModifyVaultEnv(env EventGatewayVaultEnv) EventGatewayModifyVault {
	typ := EventGatewayModifyVaultTypeEnv

	typStr := EventGatewayVaultEnvType(typ)
	env.Type = typStr

	return EventGatewayModifyVault{
		EventGatewayVaultEnv: &env,
		Type:                 typ,
	}
}

func (u *EventGatewayModifyVault) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "env":
		eventGatewayVaultEnv := new(EventGatewayVaultEnv)
		if err := utils.UnmarshalJSON(data, &eventGatewayVaultEnv, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == env) type EventGatewayVaultEnv within EventGatewayModifyVault: %w", string(data), err)
		}

		u.EventGatewayVaultEnv = eventGatewayVaultEnv
		u.Type = EventGatewayModifyVaultTypeEnv
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayModifyVault", string(data))
}

func (u EventGatewayModifyVault) MarshalJSON() ([]byte, error) {
	if u.EventGatewayVaultEnv != nil {
		return utils.MarshalJSON(u.EventGatewayVaultEnv, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayModifyVault: all fields are null")
}
