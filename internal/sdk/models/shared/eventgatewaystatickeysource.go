// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventGatewayStaticKeySourceType string

const (
	EventGatewayStaticKeySourceTypeStatic EventGatewayStaticKeySourceType = "static"
)

func (e EventGatewayStaticKeySourceType) ToPointer() *EventGatewayStaticKeySourceType {
	return &e
}
func (e *EventGatewayStaticKeySourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		*e = EventGatewayStaticKeySourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGatewayStaticKeySourceType: %v", v)
	}
}

type Keys struct {
	// The unique identifier of the key.
	ID string `json:"id"`
	// A template string expression containing a reference to a secret
	Key string `json:"key"`
}

func (o *Keys) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Keys) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

// EventGatewayStaticKeySource - A key source that uses a static symmetric key. The key is provided as a base64-encoded string.
type EventGatewayStaticKeySource struct {
	Type EventGatewayStaticKeySourceType `json:"type"`
	// A list of static, user-provided keys. Each one must be 128 bits long.
	Keys []Keys `json:"keys"`
}

func (o *EventGatewayStaticKeySource) GetType() EventGatewayStaticKeySourceType {
	if o == nil {
		return EventGatewayStaticKeySourceType("")
	}
	return o.Type
}

func (o *EventGatewayStaticKeySource) GetKeys() []Keys {
	if o == nil {
		return []Keys{}
	}
	return o.Keys
}
