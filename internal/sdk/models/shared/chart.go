// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type ChartType string

const (
	ChartTypeDonut          ChartType = "donut"
	ChartTypeTimeseriesLine ChartType = "timeseries_line"
	ChartTypeTimeseriesBar  ChartType = "timeseries_bar"
	ChartTypeHorizontalBar  ChartType = "horizontal_bar"
	ChartTypeVerticalBar    ChartType = "vertical_bar"
	ChartTypeSingleValue    ChartType = "single_value"
)

// Chart - The type of chart to render.
type Chart struct {
	DonutChart       *DonutChart       `queryParam:"inline,name=Chart"`
	TimeseriesChart  *TimeseriesChart  `queryParam:"inline,name=Chart"`
	BarChart         *BarChart         `queryParam:"inline,name=Chart"`
	SingleValueChart *SingleValueChart `queryParam:"inline,name=Chart"`

	Type ChartType
}

func CreateChartDonut(donut DonutChart) Chart {
	typ := ChartTypeDonut

	typStr := DonutChartType(typ)
	donut.Type = typStr

	return Chart{
		DonutChart: &donut,
		Type:       typ,
	}
}

func CreateChartTimeseriesLine(timeseriesLine TimeseriesChart) Chart {
	typ := ChartTypeTimeseriesLine

	typStr := TimeseriesChartType(typ)
	timeseriesLine.Type = typStr

	return Chart{
		TimeseriesChart: &timeseriesLine,
		Type:            typ,
	}
}

func CreateChartTimeseriesBar(timeseriesBar TimeseriesChart) Chart {
	typ := ChartTypeTimeseriesBar

	typStr := TimeseriesChartType(typ)
	timeseriesBar.Type = typStr

	return Chart{
		TimeseriesChart: &timeseriesBar,
		Type:            typ,
	}
}

func CreateChartHorizontalBar(horizontalBar BarChart) Chart {
	typ := ChartTypeHorizontalBar

	typStr := BarChartType(typ)
	horizontalBar.Type = typStr

	return Chart{
		BarChart: &horizontalBar,
		Type:     typ,
	}
}

func CreateChartVerticalBar(verticalBar BarChart) Chart {
	typ := ChartTypeVerticalBar

	typStr := BarChartType(typ)
	verticalBar.Type = typStr

	return Chart{
		BarChart: &verticalBar,
		Type:     typ,
	}
}

func CreateChartSingleValue(singleValue SingleValueChart) Chart {
	typ := ChartTypeSingleValue

	typStr := SingleValueChartType(typ)
	singleValue.Type = typStr

	return Chart{
		SingleValueChart: &singleValue,
		Type:             typ,
	}
}

func (u *Chart) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "donut":
		donutChart := new(DonutChart)
		if err := utils.UnmarshalJSON(data, &donutChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == donut) type DonutChart within Chart: %w", string(data), err)
		}

		u.DonutChart = donutChart
		u.Type = ChartTypeDonut
		return nil
	case "timeseries_line":
		timeseriesChart := new(TimeseriesChart)
		if err := utils.UnmarshalJSON(data, &timeseriesChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == timeseries_line) type TimeseriesChart within Chart: %w", string(data), err)
		}

		u.TimeseriesChart = timeseriesChart
		u.Type = ChartTypeTimeseriesLine
		return nil
	case "timeseries_bar":
		timeseriesChart := new(TimeseriesChart)
		if err := utils.UnmarshalJSON(data, &timeseriesChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == timeseries_bar) type TimeseriesChart within Chart: %w", string(data), err)
		}

		u.TimeseriesChart = timeseriesChart
		u.Type = ChartTypeTimeseriesBar
		return nil
	case "horizontal_bar":
		barChart := new(BarChart)
		if err := utils.UnmarshalJSON(data, &barChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == horizontal_bar) type BarChart within Chart: %w", string(data), err)
		}

		u.BarChart = barChart
		u.Type = ChartTypeHorizontalBar
		return nil
	case "vertical_bar":
		barChart := new(BarChart)
		if err := utils.UnmarshalJSON(data, &barChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == vertical_bar) type BarChart within Chart: %w", string(data), err)
		}

		u.BarChart = barChart
		u.Type = ChartTypeVerticalBar
		return nil
	case "single_value":
		singleValueChart := new(SingleValueChart)
		if err := utils.UnmarshalJSON(data, &singleValueChart, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == single_value) type SingleValueChart within Chart: %w", string(data), err)
		}

		u.SingleValueChart = singleValueChart
		u.Type = ChartTypeSingleValue
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Chart", string(data))
}

func (u Chart) MarshalJSON() ([]byte, error) {
	if u.DonutChart != nil {
		return utils.MarshalJSON(u.DonutChart, "", true)
	}

	if u.TimeseriesChart != nil {
		return utils.MarshalJSON(u.TimeseriesChart, "", true)
	}

	if u.BarChart != nil {
		return utils.MarshalJSON(u.BarChart, "", true)
	}

	if u.SingleValueChart != nil {
		return utils.MarshalJSON(u.SingleValueChart, "", true)
	}

	return nil, errors.New("could not marshal union type Chart: all fields are null")
}
