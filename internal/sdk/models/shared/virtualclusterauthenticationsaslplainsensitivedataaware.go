// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation - The mediation type for SASL/PLAIN authentication.
type VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation string

const (
	VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediationPassthrough VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation = "passthrough"
	VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediationTerminate   VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation = "terminate"
)

func (e VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation) ToPointer() *VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation {
	return &e
}
func (e *VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passthrough":
		fallthrough
	case "terminate":
		*e = VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation: %v", v)
	}
}

// VirtualClusterAuthenticationSaslPlainSensitiveDataAware - SASL/PLAIN authentication scheme for the virtual cluster.
type VirtualClusterAuthenticationSaslPlainSensitiveDataAware struct {
	type_ string `const:"sasl_plain" json:"type"`
	// The mediation type for SASL/PLAIN authentication.
	Mediation VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation `json:"mediation"`
	// List of principals to be able to authenticate with, used with `terminate` mediation.
	Principals []VirtualClusterAuthenticationPrincipalSensitiveDataAware `json:"principals"`
}

func (v VirtualClusterAuthenticationSaslPlainSensitiveDataAware) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VirtualClusterAuthenticationSaslPlainSensitiveDataAware) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"type", "mediation"}); err != nil {
		return err
	}
	return nil
}

func (v *VirtualClusterAuthenticationSaslPlainSensitiveDataAware) GetType() string {
	return "sasl_plain"
}

func (v *VirtualClusterAuthenticationSaslPlainSensitiveDataAware) GetMediation() VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation {
	if v == nil {
		return VirtualClusterAuthenticationSaslPlainSensitiveDataAwareMediation("")
	}
	return v.Mediation
}

func (v *VirtualClusterAuthenticationSaslPlainSensitiveDataAware) GetPrincipals() []VirtualClusterAuthenticationPrincipalSensitiveDataAware {
	if v == nil {
		return nil
	}
	return v.Principals
}
