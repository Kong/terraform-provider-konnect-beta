// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Duration - The timeframe to ensure that an application does not exceed the request limit.
type Duration string

const (
	DurationSeconds Duration = "seconds"
	DurationMinutes Duration = "minutes"
	DurationHours   Duration = "hours"
)

func (e Duration) ToPointer() *Duration {
	return &e
}
func (e *Duration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		*e = Duration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Duration: %v", v)
	}
}

// RateLimitingConfig - Rate limit configuration that can be applied to an API Package or an API Package Operation.
type RateLimitingConfig struct {
	// The amount of requests allowed for each operation within the specified duration.
	Limit *int64 `json:"limit,omitempty"`
	// The timeframe to ensure that an application does not exceed the request limit.
	Duration *Duration `json:"duration,omitempty"`
}

func (o *RateLimitingConfig) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *RateLimitingConfig) GetDuration() *Duration {
	if o == nil {
		return nil
	}
	return o.Duration
}
