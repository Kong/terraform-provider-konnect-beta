// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type BackendClusterAuthenticationSensitiveDataAwareSchemeType string

const (
	BackendClusterAuthenticationSensitiveDataAwareSchemeTypeAnonymous BackendClusterAuthenticationSensitiveDataAwareSchemeType = "anonymous"
	BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslPlain BackendClusterAuthenticationSensitiveDataAwareSchemeType = "sasl_plain"
	BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslScram BackendClusterAuthenticationSensitiveDataAwareSchemeType = "sasl_scram"
)

type BackendClusterAuthenticationSensitiveDataAwareScheme struct {
	BackendClusterAuthenticationAnonymous                   *BackendClusterAuthenticationAnonymous                   `queryParam:"inline,name=BackendClusterAuthenticationSensitiveDataAwareScheme"`
	BackendClusterAuthenticationSaslPlainSensitiveDataAware *BackendClusterAuthenticationSaslPlainSensitiveDataAware `queryParam:"inline,name=BackendClusterAuthenticationSensitiveDataAwareScheme"`
	BackendClusterAuthenticationSaslScramSensitiveDataAware *BackendClusterAuthenticationSaslScramSensitiveDataAware `queryParam:"inline,name=BackendClusterAuthenticationSensitiveDataAwareScheme"`

	Type BackendClusterAuthenticationSensitiveDataAwareSchemeType
}

func CreateBackendClusterAuthenticationSensitiveDataAwareSchemeAnonymous(anonymous BackendClusterAuthenticationAnonymous) BackendClusterAuthenticationSensitiveDataAwareScheme {
	typ := BackendClusterAuthenticationSensitiveDataAwareSchemeTypeAnonymous

	return BackendClusterAuthenticationSensitiveDataAwareScheme{
		BackendClusterAuthenticationAnonymous: &anonymous,
		Type:                                  typ,
	}
}

func CreateBackendClusterAuthenticationSensitiveDataAwareSchemeSaslPlain(saslPlain BackendClusterAuthenticationSaslPlainSensitiveDataAware) BackendClusterAuthenticationSensitiveDataAwareScheme {
	typ := BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslPlain

	return BackendClusterAuthenticationSensitiveDataAwareScheme{
		BackendClusterAuthenticationSaslPlainSensitiveDataAware: &saslPlain,
		Type: typ,
	}
}

func CreateBackendClusterAuthenticationSensitiveDataAwareSchemeSaslScram(saslScram BackendClusterAuthenticationSaslScramSensitiveDataAware) BackendClusterAuthenticationSensitiveDataAwareScheme {
	typ := BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslScram

	return BackendClusterAuthenticationSensitiveDataAwareScheme{
		BackendClusterAuthenticationSaslScramSensitiveDataAware: &saslScram,
		Type: typ,
	}
}

func (u *BackendClusterAuthenticationSensitiveDataAwareScheme) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "anonymous":
		backendClusterAuthenticationAnonymous := new(BackendClusterAuthenticationAnonymous)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationAnonymous, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == anonymous) type BackendClusterAuthenticationAnonymous within BackendClusterAuthenticationSensitiveDataAwareScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationAnonymous = backendClusterAuthenticationAnonymous
		u.Type = BackendClusterAuthenticationSensitiveDataAwareSchemeTypeAnonymous
		return nil
	case "sasl_plain":
		backendClusterAuthenticationSaslPlainSensitiveDataAware := new(BackendClusterAuthenticationSaslPlainSensitiveDataAware)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationSaslPlainSensitiveDataAware, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sasl_plain) type BackendClusterAuthenticationSaslPlainSensitiveDataAware within BackendClusterAuthenticationSensitiveDataAwareScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationSaslPlainSensitiveDataAware = backendClusterAuthenticationSaslPlainSensitiveDataAware
		u.Type = BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslPlain
		return nil
	case "sasl_scram":
		backendClusterAuthenticationSaslScramSensitiveDataAware := new(BackendClusterAuthenticationSaslScramSensitiveDataAware)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationSaslScramSensitiveDataAware, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sasl_scram) type BackendClusterAuthenticationSaslScramSensitiveDataAware within BackendClusterAuthenticationSensitiveDataAwareScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationSaslScramSensitiveDataAware = backendClusterAuthenticationSaslScramSensitiveDataAware
		u.Type = BackendClusterAuthenticationSensitiveDataAwareSchemeTypeSaslScram
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BackendClusterAuthenticationSensitiveDataAwareScheme", string(data))
}

func (u BackendClusterAuthenticationSensitiveDataAwareScheme) MarshalJSON() ([]byte, error) {
	if u.BackendClusterAuthenticationAnonymous != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationAnonymous, "", true)
	}

	if u.BackendClusterAuthenticationSaslPlainSensitiveDataAware != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationSaslPlainSensitiveDataAware, "", true)
	}

	if u.BackendClusterAuthenticationSaslScramSensitiveDataAware != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationSaslScramSensitiveDataAware, "", true)
	}

	return nil, errors.New("could not marshal union type BackendClusterAuthenticationSensitiveDataAwareScheme: all fields are null")
}
