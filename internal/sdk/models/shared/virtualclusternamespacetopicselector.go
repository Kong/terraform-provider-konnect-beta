// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type VirtualClusterNamespaceTopicSelectorType string

const (
	VirtualClusterNamespaceTopicSelectorTypeGlob      VirtualClusterNamespaceTopicSelectorType = "glob"
	VirtualClusterNamespaceTopicSelectorTypeExactList VirtualClusterNamespaceTopicSelectorType = "exact_list"
)

type VirtualClusterNamespaceTopicSelector struct {
	VirtualClusterNamespaceTopicSelectorGlob      *VirtualClusterNamespaceTopicSelectorGlob      `queryParam:"inline"`
	VirtualClusterNamespaceTopicSelectorExactList *VirtualClusterNamespaceTopicSelectorExactList `queryParam:"inline"`

	Type VirtualClusterNamespaceTopicSelectorType
}

func CreateVirtualClusterNamespaceTopicSelectorGlob(glob VirtualClusterNamespaceTopicSelectorGlob) VirtualClusterNamespaceTopicSelector {
	typ := VirtualClusterNamespaceTopicSelectorTypeGlob

	typStr := VirtualClusterNamespaceTopicSelectorGlobType(typ)
	glob.Type = typStr

	return VirtualClusterNamespaceTopicSelector{
		VirtualClusterNamespaceTopicSelectorGlob: &glob,
		Type:                                     typ,
	}
}

func CreateVirtualClusterNamespaceTopicSelectorExactList(exactList VirtualClusterNamespaceTopicSelectorExactList) VirtualClusterNamespaceTopicSelector {
	typ := VirtualClusterNamespaceTopicSelectorTypeExactList

	typStr := VirtualClusterNamespaceTopicSelectorExactListType(typ)
	exactList.Type = typStr

	return VirtualClusterNamespaceTopicSelector{
		VirtualClusterNamespaceTopicSelectorExactList: &exactList,
		Type: typ,
	}
}

func (u *VirtualClusterNamespaceTopicSelector) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "glob":
		virtualClusterNamespaceTopicSelectorGlob := new(VirtualClusterNamespaceTopicSelectorGlob)
		if err := utils.UnmarshalJSON(data, &virtualClusterNamespaceTopicSelectorGlob, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == glob) type VirtualClusterNamespaceTopicSelectorGlob within VirtualClusterNamespaceTopicSelector: %w", string(data), err)
		}

		u.VirtualClusterNamespaceTopicSelectorGlob = virtualClusterNamespaceTopicSelectorGlob
		u.Type = VirtualClusterNamespaceTopicSelectorTypeGlob
		return nil
	case "exact_list":
		virtualClusterNamespaceTopicSelectorExactList := new(VirtualClusterNamespaceTopicSelectorExactList)
		if err := utils.UnmarshalJSON(data, &virtualClusterNamespaceTopicSelectorExactList, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == exact_list) type VirtualClusterNamespaceTopicSelectorExactList within VirtualClusterNamespaceTopicSelector: %w", string(data), err)
		}

		u.VirtualClusterNamespaceTopicSelectorExactList = virtualClusterNamespaceTopicSelectorExactList
		u.Type = VirtualClusterNamespaceTopicSelectorTypeExactList
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterNamespaceTopicSelector", string(data))
}

func (u VirtualClusterNamespaceTopicSelector) MarshalJSON() ([]byte, error) {
	if u.VirtualClusterNamespaceTopicSelectorGlob != nil {
		return utils.MarshalJSON(u.VirtualClusterNamespaceTopicSelectorGlob, "", true)
	}

	if u.VirtualClusterNamespaceTopicSelectorExactList != nil {
		return utils.MarshalJSON(u.VirtualClusterNamespaceTopicSelectorExactList, "", true)
	}

	return nil, errors.New("could not marshal union type VirtualClusterNamespaceTopicSelector: all fields are null")
}
