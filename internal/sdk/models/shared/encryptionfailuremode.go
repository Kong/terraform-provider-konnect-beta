// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EncryptionFailureMode - Describes how to handle failing encryption or decryption.
// Use `error` if the record should be rejected if encryption or decryption fails.
// Use `passthrough` to ignore encryption or decryption failure and continue proxying the record.
type EncryptionFailureMode string

const (
	EncryptionFailureModeError       EncryptionFailureMode = "error"
	EncryptionFailureModePassthrough EncryptionFailureMode = "passthrough"
)

func (e EncryptionFailureMode) ToPointer() *EncryptionFailureMode {
	return &e
}
func (e *EncryptionFailureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "passthrough":
		*e = EncryptionFailureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionFailureMode: %v", v)
	}
}
