// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayConsumePolicyUpdateType string

const (
	EventGatewayConsumePolicyUpdateTypeModifyHeaders    EventGatewayConsumePolicyUpdateType = "modify_headers"
	EventGatewayConsumePolicyUpdateTypeSchemaValidation EventGatewayConsumePolicyUpdateType = "schema_validation"
	EventGatewayConsumePolicyUpdateTypeDecrypt          EventGatewayConsumePolicyUpdateType = "decrypt"
	EventGatewayConsumePolicyUpdateTypeSkipRecord       EventGatewayConsumePolicyUpdateType = "skip_record"
)

// EventGatewayConsumePolicyUpdate - The typed schema of the consume policy to modify it.
type EventGatewayConsumePolicyUpdate struct {
	EventGatewayModifyHeadersPolicy             *EventGatewayModifyHeadersPolicy             `queryParam:"inline"`
	EventGatewayConsumeSchemaValidationPolicy   *EventGatewayConsumeSchemaValidationPolicy   `queryParam:"inline"`
	EventGatewayDecryptSensitiveDataAwarePolicy *EventGatewayDecryptSensitiveDataAwarePolicy `queryParam:"inline"`
	EventGatewaySkipRecordPolicy                *EventGatewaySkipRecordPolicy                `queryParam:"inline"`

	Type EventGatewayConsumePolicyUpdateType
}

func CreateEventGatewayConsumePolicyUpdateModifyHeaders(modifyHeaders EventGatewayModifyHeadersPolicy) EventGatewayConsumePolicyUpdate {
	typ := EventGatewayConsumePolicyUpdateTypeModifyHeaders

	return EventGatewayConsumePolicyUpdate{
		EventGatewayModifyHeadersPolicy: &modifyHeaders,
		Type:                            typ,
	}
}

func CreateEventGatewayConsumePolicyUpdateSchemaValidation(schemaValidation EventGatewayConsumeSchemaValidationPolicy) EventGatewayConsumePolicyUpdate {
	typ := EventGatewayConsumePolicyUpdateTypeSchemaValidation

	return EventGatewayConsumePolicyUpdate{
		EventGatewayConsumeSchemaValidationPolicy: &schemaValidation,
		Type: typ,
	}
}

func CreateEventGatewayConsumePolicyUpdateDecrypt(decrypt EventGatewayDecryptSensitiveDataAwarePolicy) EventGatewayConsumePolicyUpdate {
	typ := EventGatewayConsumePolicyUpdateTypeDecrypt

	return EventGatewayConsumePolicyUpdate{
		EventGatewayDecryptSensitiveDataAwarePolicy: &decrypt,
		Type: typ,
	}
}

func CreateEventGatewayConsumePolicyUpdateSkipRecord(skipRecord EventGatewaySkipRecordPolicy) EventGatewayConsumePolicyUpdate {
	typ := EventGatewayConsumePolicyUpdateTypeSkipRecord

	return EventGatewayConsumePolicyUpdate{
		EventGatewaySkipRecordPolicy: &skipRecord,
		Type:                         typ,
	}
}

func (u *EventGatewayConsumePolicyUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "modify_headers":
		eventGatewayModifyHeadersPolicy := new(EventGatewayModifyHeadersPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayModifyHeadersPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == modify_headers) type EventGatewayModifyHeadersPolicy within EventGatewayConsumePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayModifyHeadersPolicy = eventGatewayModifyHeadersPolicy
		u.Type = EventGatewayConsumePolicyUpdateTypeModifyHeaders
		return nil
	case "schema_validation":
		eventGatewayConsumeSchemaValidationPolicy := new(EventGatewayConsumeSchemaValidationPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayConsumeSchemaValidationPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == schema_validation) type EventGatewayConsumeSchemaValidationPolicy within EventGatewayConsumePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayConsumeSchemaValidationPolicy = eventGatewayConsumeSchemaValidationPolicy
		u.Type = EventGatewayConsumePolicyUpdateTypeSchemaValidation
		return nil
	case "decrypt":
		eventGatewayDecryptSensitiveDataAwarePolicy := new(EventGatewayDecryptSensitiveDataAwarePolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayDecryptSensitiveDataAwarePolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == decrypt) type EventGatewayDecryptSensitiveDataAwarePolicy within EventGatewayConsumePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayDecryptSensitiveDataAwarePolicy = eventGatewayDecryptSensitiveDataAwarePolicy
		u.Type = EventGatewayConsumePolicyUpdateTypeDecrypt
		return nil
	case "skip_record":
		eventGatewaySkipRecordPolicy := new(EventGatewaySkipRecordPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewaySkipRecordPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == skip_record) type EventGatewaySkipRecordPolicy within EventGatewayConsumePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewaySkipRecordPolicy = eventGatewaySkipRecordPolicy
		u.Type = EventGatewayConsumePolicyUpdateTypeSkipRecord
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayConsumePolicyUpdate", string(data))
}

func (u EventGatewayConsumePolicyUpdate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayModifyHeadersPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayModifyHeadersPolicy, "", true)
	}

	if u.EventGatewayConsumeSchemaValidationPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayConsumeSchemaValidationPolicy, "", true)
	}

	if u.EventGatewayDecryptSensitiveDataAwarePolicy != nil {
		return utils.MarshalJSON(u.EventGatewayDecryptSensitiveDataAwarePolicy, "", true)
	}

	if u.EventGatewaySkipRecordPolicy != nil {
		return utils.MarshalJSON(u.EventGatewaySkipRecordPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayConsumePolicyUpdate: all fields are null")
}
