// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type TimeseriesChartType string

const (
	TimeseriesChartTypeTimeseriesLine TimeseriesChartType = "timeseries_line"
	TimeseriesChartTypeTimeseriesBar  TimeseriesChartType = "timeseries_bar"
)

func (e TimeseriesChartType) ToPointer() *TimeseriesChartType {
	return &e
}
func (e *TimeseriesChartType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "timeseries_line":
		fallthrough
	case "timeseries_bar":
		*e = TimeseriesChartType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeseriesChartType: %v", v)
	}
}

// TimeseriesChart - A chart that can render timeseries data -- data from a query that has `time` as a dimension -- as lines or bars.
//
// This type of chart can support:
//
// - One or more metrics: `{ metrics: ["response_latency_p99", "response_latency_p95"], dimensions: ["time"] }`
// - One metric plus one non-time dimension: `{ metrics: ["request_count"], dimensions: ["time", "gateway_service"] }`
//
// Either way, ensure that `time` is in the list of query dimensions.
type TimeseriesChart struct {
	// The title of the chart, which is displayed in the tile's header.
	ChartTitle *string             `json:"chart_title,omitempty"`
	Type       TimeseriesChartType `json:"type"`
	// Whether to stack the bars or lines (implicitly adding them together to form a total), or leave them independent from each other.
	//
	Stacked *bool `json:"stacked,omitempty"`
}

func (t TimeseriesChart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TimeseriesChart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TimeseriesChart) GetChartTitle() *string {
	if t == nil {
		return nil
	}
	return t.ChartTitle
}

func (t *TimeseriesChart) GetType() TimeseriesChartType {
	if t == nil {
		return TimeseriesChartType("")
	}
	return t.Type
}

func (t *TimeseriesChart) GetStacked() *bool {
	if t == nil {
		return nil
	}
	return t.Stacked
}
