// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm - The algorithm used for SASL/SCRAM authentication.
type BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm string

const (
	BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithmSha256 BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm = "sha256"
	BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithmSha512 BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm = "sha512"
)

func (e BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm) ToPointer() *BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm {
	return &e
}
func (e *BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sha256":
		fallthrough
	case "sha512":
		*e = BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm: %v", v)
	}
}

// BackendClusterAuthenticationSaslScramSensitiveDataAware - SASL/SCRAM authentication scheme for the backend cluster without requiring sensitive password data.
type BackendClusterAuthenticationSaslScramSensitiveDataAware struct {
	type_ string `const:"sasl_scram" json:"type"`
	// The algorithm used for SASL/SCRAM authentication.
	Algorithm BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm `json:"algorithm"`
	// A literal value or a reference to an existing secret as a template string expression.
	// The value is stored and returned by the API as-is, not treated as sensitive information.
	//
	Username string `json:"username"`
	// A sensitive value containing the secret or a reference to a secret as a template string expression.
	// If the value is provided as plain text, it is encrypted at rest and omitted from API responses.
	// If provided as an expression, the expression itself is stored and returned by the API.
	//
	Password *string `json:"password,omitempty"`
}

func (b BackendClusterAuthenticationSaslScramSensitiveDataAware) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BackendClusterAuthenticationSaslScramSensitiveDataAware) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"type", "algorithm", "username"}); err != nil {
		return err
	}
	return nil
}

func (b *BackendClusterAuthenticationSaslScramSensitiveDataAware) GetType() string {
	return "sasl_scram"
}

func (b *BackendClusterAuthenticationSaslScramSensitiveDataAware) GetAlgorithm() BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm {
	if b == nil {
		return BackendClusterAuthenticationSaslScramSensitiveDataAwareAlgorithm("")
	}
	return b.Algorithm
}

func (b *BackendClusterAuthenticationSaslScramSensitiveDataAware) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

func (b *BackendClusterAuthenticationSaslScramSensitiveDataAware) GetPassword() *string {
	if b == nil {
		return nil
	}
	return b.Password
}
