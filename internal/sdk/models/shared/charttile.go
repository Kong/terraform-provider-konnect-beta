// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// Position of the tile in the dashboard's grid.  Numbering starts at 0, so a tile in the upper left of the dashboard will be at column 0, row 0.
type Position struct {
	Col int64 `json:"col"`
	Row int64 `json:"row"`
}

func (o *Position) GetCol() int64 {
	if o == nil {
		return 0
	}
	return o.Col
}

func (o *Position) GetRow() int64 {
	if o == nil {
		return 0
	}
	return o.Row
}

// Size - Number of columns and rows the tile occupies.  A dashboard always has 6 columns, but has as many rows as needed to accommodate the given tiles.
type Size struct {
	Cols int64 `json:"cols"`
	Rows int64 `json:"rows"`
}

func (o *Size) GetCols() int64 {
	if o == nil {
		return 0
	}
	return o.Cols
}

func (o *Size) GetRows() int64 {
	if o == nil {
		return 0
	}
	return o.Rows
}

// Layout - Information about how the tile is placed on the dashboard.
//
// Examples:
// - a tile occupying the first half of the top row: `{ "position": { "col": 0, "row": 0 }, size: { "cols": 3, "rows": 1 } }`
// - a tile occupying the second half of the top row: `{ "position": { "col": 3, "row": 0 }, size: { "cols": 3, "rows": 1 } }`
type Layout struct {
	// Position of the tile in the dashboard's grid.  Numbering starts at 0, so a tile in the upper left of the dashboard will be at column 0, row 0.
	//
	Position Position `json:"position"`
	// Number of columns and rows the tile occupies.  A dashboard always has 6 columns, but has as many rows as needed to accommodate the given tiles.
	//
	Size Size `json:"size"`
}

func (o *Layout) GetPosition() Position {
	if o == nil {
		return Position{}
	}
	return o.Position
}

func (o *Layout) GetSize() Size {
	if o == nil {
		return Size{}
	}
	return o.Size
}

// ChartTileType - The type of tile.  Chart tiles must have type 'chart'.
type ChartTileType string

const (
	ChartTileTypeChart ChartTileType = "chart"
)

func (e ChartTileType) ToPointer() *ChartTileType {
	return &e
}
func (e *ChartTileType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chart":
		*e = ChartTileType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChartTileType: %v", v)
	}
}

type QueryType string

const (
	QueryTypeAPIUsage QueryType = "api_usage"
	QueryTypeLlmUsage QueryType = "llm_usage"
)

type Query struct {
	AdvancedQuery *AdvancedQuery `queryParam:"inline"`
	LLMQuery      *LLMQuery      `queryParam:"inline"`

	Type QueryType
}

func CreateQueryAPIUsage(apiUsage AdvancedQuery) Query {
	typ := QueryTypeAPIUsage

	typStr := Datasource(typ)
	apiUsage.Datasource = typStr

	return Query{
		AdvancedQuery: &apiUsage,
		Type:          typ,
	}
}

func CreateQueryLlmUsage(llmUsage LLMQuery) Query {
	typ := QueryTypeLlmUsage

	typStr := LLMQueryDatasource(typ)
	llmUsage.Datasource = typStr

	return Query{
		LLMQuery: &llmUsage,
		Type:     typ,
	}
}

func (u *Query) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Datasource string `json:"datasource"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Datasource {
	case "api_usage":
		advancedQuery := new(AdvancedQuery)
		if err := utils.UnmarshalJSON(data, &advancedQuery, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Datasource == api_usage) type AdvancedQuery within Query: %w", string(data), err)
		}

		u.AdvancedQuery = advancedQuery
		u.Type = QueryTypeAPIUsage
		return nil
	case "llm_usage":
		llmQuery := new(LLMQuery)
		if err := utils.UnmarshalJSON(data, &llmQuery, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Datasource == llm_usage) type LLMQuery within Query: %w", string(data), err)
		}

		u.LLMQuery = llmQuery
		u.Type = QueryTypeLlmUsage
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Query", string(data))
}

func (u Query) MarshalJSON() ([]byte, error) {
	if u.AdvancedQuery != nil {
		return utils.MarshalJSON(u.AdvancedQuery, "", true)
	}

	if u.LLMQuery != nil {
		return utils.MarshalJSON(u.LLMQuery, "", true)
	}

	return nil, errors.New("could not marshal union type Query: all fields are null")
}

// Definition - The tile's definition, which consists of a query to fetch data and a chart to render the data.
// Note that some charts expect certain types of queries to render properly.  The documentation for the individual chart types has more information.
type Definition struct {
	Query Query `json:"query"`
	// The type of chart to render.
	Chart Chart `json:"chart"`
}

func (o *Definition) GetQuery() Query {
	if o == nil {
		return Query{}
	}
	return o.Query
}

func (o *Definition) GetQueryAPIUsage() *AdvancedQuery {
	return o.GetQuery().AdvancedQuery
}

func (o *Definition) GetQueryLlmUsage() *LLMQuery {
	return o.GetQuery().LLMQuery
}

func (o *Definition) GetChart() Chart {
	if o == nil {
		return Chart{}
	}
	return o.Chart
}

func (o *Definition) GetChartDonut() *DonutChart {
	return o.GetChart().DonutChart
}

func (o *Definition) GetChartTimeseriesLine() *TimeseriesChart {
	return o.GetChart().TimeseriesChart
}

func (o *Definition) GetChartTimeseriesBar() *TimeseriesChart {
	return o.GetChart().TimeseriesChart
}

func (o *Definition) GetChartHorizontalBar() *BarChart {
	return o.GetChart().BarChart
}

func (o *Definition) GetChartVerticalBar() *BarChart {
	return o.GetChart().BarChart
}

func (o *Definition) GetChartSingleValue() *SingleValueChart {
	return o.GetChart().SingleValueChart
}

// ChartTile - A tile that queries data and renders a chart.
type ChartTile struct {
	// Information about how the tile is placed on the dashboard.
	//
	// Examples:
	// - a tile occupying the first half of the top row: `{ "position": { "col": 0, "row": 0 }, size: { "cols": 3, "rows": 1 } }`
	// - a tile occupying the second half of the top row: `{ "position": { "col": 3, "row": 0 }, size: { "cols": 3, "rows": 1 } }`
	//
	Layout Layout `json:"layout"`
	// The type of tile.  Chart tiles must have type 'chart'.
	Type ChartTileType `json:"type"`
	// The tile's definition, which consists of a query to fetch data and a chart to render the data.
	// Note that some charts expect certain types of queries to render properly.  The documentation for the individual chart types has more information.
	//
	Definition Definition `json:"definition"`
}

func (o *ChartTile) GetLayout() Layout {
	if o == nil {
		return Layout{}
	}
	return o.Layout
}

func (o *ChartTile) GetType() ChartTileType {
	if o == nil {
		return ChartTileType("")
	}
	return o.Type
}

func (o *ChartTile) GetDefinition() Definition {
	if o == nil {
		return Definition{}
	}
	return o.Definition
}
