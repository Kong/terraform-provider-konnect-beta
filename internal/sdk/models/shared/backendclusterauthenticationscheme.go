// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type BackendClusterAuthenticationSchemeType string

const (
	BackendClusterAuthenticationSchemeTypeAnonymous BackendClusterAuthenticationSchemeType = "anonymous"
	BackendClusterAuthenticationSchemeTypeSaslPlain BackendClusterAuthenticationSchemeType = "sasl_plain"
	BackendClusterAuthenticationSchemeTypeSaslScram BackendClusterAuthenticationSchemeType = "sasl_scram"
)

type BackendClusterAuthenticationScheme struct {
	BackendClusterAuthenticationAnonymous *BackendClusterAuthenticationAnonymous `queryParam:"inline"`
	BackendClusterAuthenticationSaslPlain *BackendClusterAuthenticationSaslPlain `queryParam:"inline"`
	BackendClusterAuthenticationSaslScram *BackendClusterAuthenticationSaslScram `queryParam:"inline"`

	Type BackendClusterAuthenticationSchemeType
}

func CreateBackendClusterAuthenticationSchemeAnonymous(anonymous BackendClusterAuthenticationAnonymous) BackendClusterAuthenticationScheme {
	typ := BackendClusterAuthenticationSchemeTypeAnonymous

	typStr := BackendClusterAuthenticationAnonymousType(typ)
	anonymous.Type = typStr

	return BackendClusterAuthenticationScheme{
		BackendClusterAuthenticationAnonymous: &anonymous,
		Type:                                  typ,
	}
}

func CreateBackendClusterAuthenticationSchemeSaslPlain(saslPlain BackendClusterAuthenticationSaslPlain) BackendClusterAuthenticationScheme {
	typ := BackendClusterAuthenticationSchemeTypeSaslPlain

	typStr := BackendClusterAuthenticationSaslPlainType(typ)
	saslPlain.Type = typStr

	return BackendClusterAuthenticationScheme{
		BackendClusterAuthenticationSaslPlain: &saslPlain,
		Type:                                  typ,
	}
}

func CreateBackendClusterAuthenticationSchemeSaslScram(saslScram BackendClusterAuthenticationSaslScram) BackendClusterAuthenticationScheme {
	typ := BackendClusterAuthenticationSchemeTypeSaslScram

	typStr := BackendClusterAuthenticationSaslScramType(typ)
	saslScram.Type = typStr

	return BackendClusterAuthenticationScheme{
		BackendClusterAuthenticationSaslScram: &saslScram,
		Type:                                  typ,
	}
}

func (u *BackendClusterAuthenticationScheme) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "anonymous":
		backendClusterAuthenticationAnonymous := new(BackendClusterAuthenticationAnonymous)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationAnonymous, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == anonymous) type BackendClusterAuthenticationAnonymous within BackendClusterAuthenticationScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationAnonymous = backendClusterAuthenticationAnonymous
		u.Type = BackendClusterAuthenticationSchemeTypeAnonymous
		return nil
	case "sasl_plain":
		backendClusterAuthenticationSaslPlain := new(BackendClusterAuthenticationSaslPlain)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationSaslPlain, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sasl_plain) type BackendClusterAuthenticationSaslPlain within BackendClusterAuthenticationScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationSaslPlain = backendClusterAuthenticationSaslPlain
		u.Type = BackendClusterAuthenticationSchemeTypeSaslPlain
		return nil
	case "sasl_scram":
		backendClusterAuthenticationSaslScram := new(BackendClusterAuthenticationSaslScram)
		if err := utils.UnmarshalJSON(data, &backendClusterAuthenticationSaslScram, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sasl_scram) type BackendClusterAuthenticationSaslScram within BackendClusterAuthenticationScheme: %w", string(data), err)
		}

		u.BackendClusterAuthenticationSaslScram = backendClusterAuthenticationSaslScram
		u.Type = BackendClusterAuthenticationSchemeTypeSaslScram
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BackendClusterAuthenticationScheme", string(data))
}

func (u BackendClusterAuthenticationScheme) MarshalJSON() ([]byte, error) {
	if u.BackendClusterAuthenticationAnonymous != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationAnonymous, "", true)
	}

	if u.BackendClusterAuthenticationSaslPlain != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationSaslPlain, "", true)
	}

	if u.BackendClusterAuthenticationSaslScram != nil {
		return utils.MarshalJSON(u.BackendClusterAuthenticationSaslScram, "", true)
	}

	return nil, errors.New("could not marshal union type BackendClusterAuthenticationScheme: all fields are null")
}
