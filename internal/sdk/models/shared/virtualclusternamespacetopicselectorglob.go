// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// Conflict - How to inform the user about conflicts where multiple backend topics would map to the same virtual topic name.
// * warn - log in the Event Gateway logs. Additionally, it sets knep_namespace_topic_conflict to 1.
// * ignore - do not do anything. It does not cause knep_namespace_topic_conflict metric to be set to 1.
type Conflict string

const (
	ConflictWarn   Conflict = "warn"
	ConflictIgnore Conflict = "ignore"
)

func (e Conflict) ToPointer() *Conflict {
	return &e
}
func (e *Conflict) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "warn":
		fallthrough
	case "ignore":
		*e = Conflict(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Conflict: %v", v)
	}
}

type VirtualClusterNamespaceTopicSelectorGlob struct {
	type_ string `const:"glob" json:"type"`
	// Expose any backend topic that matches this glob pattern (e.g., `operations_data_*`).
	Glob string `json:"glob"`
	// How to inform the user about conflicts where multiple backend topics would map to the same virtual topic name.
	// * warn - log in the Event Gateway logs. Additionally, it sets knep_namespace_topic_conflict to 1.
	// * ignore - do not do anything. It does not cause knep_namespace_topic_conflict metric to be set to 1.
	//
	Conflict *Conflict `default:"warn" json:"conflict"`
}

func (v VirtualClusterNamespaceTopicSelectorGlob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VirtualClusterNamespaceTopicSelectorGlob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"type", "glob"}); err != nil {
		return err
	}
	return nil
}

func (v *VirtualClusterNamespaceTopicSelectorGlob) GetType() string {
	return "glob"
}

func (v *VirtualClusterNamespaceTopicSelectorGlob) GetGlob() string {
	if v == nil {
		return ""
	}
	return v.Glob
}

func (v *VirtualClusterNamespaceTopicSelectorGlob) GetConflict() *Conflict {
	if v == nil {
		return nil
	}
	return v.Conflict
}
