// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VirtualClusterAuthenticationSaslPlainType string

const (
	VirtualClusterAuthenticationSaslPlainTypeSaslPlain VirtualClusterAuthenticationSaslPlainType = "sasl_plain"
)

func (e VirtualClusterAuthenticationSaslPlainType) ToPointer() *VirtualClusterAuthenticationSaslPlainType {
	return &e
}
func (e *VirtualClusterAuthenticationSaslPlainType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sasl_plain":
		*e = VirtualClusterAuthenticationSaslPlainType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualClusterAuthenticationSaslPlainType: %v", v)
	}
}

// Mediation - The mediation type for SASL/PLAIN authentication.
type Mediation string

const (
	MediationPassthrough Mediation = "passthrough"
	MediationTerminate   Mediation = "terminate"
)

func (e Mediation) ToPointer() *Mediation {
	return &e
}
func (e *Mediation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passthrough":
		fallthrough
	case "terminate":
		*e = Mediation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mediation: %v", v)
	}
}

// VirtualClusterAuthenticationSaslPlain - SASL/PLAIN authentication scheme for the virtual cluster.
type VirtualClusterAuthenticationSaslPlain struct {
	Type VirtualClusterAuthenticationSaslPlainType `json:"type"`
	// The mediation type for SASL/PLAIN authentication.
	Mediation Mediation `json:"mediation"`
	// List of principals to be able to authenticate with, used with `terminate` mediation.
	Principals []VirtualClusterAuthenticationPrincipal `json:"principals"`
}

func (o *VirtualClusterAuthenticationSaslPlain) GetType() VirtualClusterAuthenticationSaslPlainType {
	if o == nil {
		return VirtualClusterAuthenticationSaslPlainType("")
	}
	return o.Type
}

func (o *VirtualClusterAuthenticationSaslPlain) GetMediation() Mediation {
	if o == nil {
		return Mediation("")
	}
	return o.Mediation
}

func (o *VirtualClusterAuthenticationSaslPlain) GetPrincipals() []VirtualClusterAuthenticationPrincipal {
	if o == nil {
		return nil
	}
	return o.Principals
}
