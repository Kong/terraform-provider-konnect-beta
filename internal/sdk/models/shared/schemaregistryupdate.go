// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryUpdateType string

const (
	SchemaRegistryUpdateTypeConfluent SchemaRegistryUpdateType = "confluent"
)

// SchemaRegistryUpdate - The typed schema of the schema registry to modify it.
type SchemaRegistryUpdate struct {
	SchemaRegistryConfluentSensitiveDataAware *SchemaRegistryConfluentSensitiveDataAware `queryParam:"inline,name=SchemaRegistryUpdate"`

	Type SchemaRegistryUpdateType
}

func CreateSchemaRegistryUpdateConfluent(confluent SchemaRegistryConfluentSensitiveDataAware) SchemaRegistryUpdate {
	typ := SchemaRegistryUpdateTypeConfluent

	return SchemaRegistryUpdate{
		SchemaRegistryConfluentSensitiveDataAware: &confluent,
		Type: typ,
	}
}

func (u *SchemaRegistryUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "confluent":
		schemaRegistryConfluentSensitiveDataAware := new(SchemaRegistryConfluentSensitiveDataAware)
		if err := utils.UnmarshalJSON(data, &schemaRegistryConfluentSensitiveDataAware, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == confluent) type SchemaRegistryConfluentSensitiveDataAware within SchemaRegistryUpdate: %w", string(data), err)
		}

		u.SchemaRegistryConfluentSensitiveDataAware = schemaRegistryConfluentSensitiveDataAware
		u.Type = SchemaRegistryUpdateTypeConfluent
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryUpdate", string(data))
}

func (u SchemaRegistryUpdate) MarshalJSON() ([]byte, error) {
	if u.SchemaRegistryConfluentSensitiveDataAware != nil {
		return utils.MarshalJSON(u.SchemaRegistryConfluentSensitiveDataAware, "", true)
	}

	return nil, errors.New("could not marshal union type SchemaRegistryUpdate: all fields are null")
}
