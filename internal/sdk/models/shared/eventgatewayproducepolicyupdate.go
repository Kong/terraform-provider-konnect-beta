// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayProducePolicyUpdateType string

const (
	EventGatewayProducePolicyUpdateTypeModifyHeaders    EventGatewayProducePolicyUpdateType = "modify_headers"
	EventGatewayProducePolicyUpdateTypeSchemaValidation EventGatewayProducePolicyUpdateType = "schema_validation"
	EventGatewayProducePolicyUpdateTypeEncrypt          EventGatewayProducePolicyUpdateType = "encrypt"
	EventGatewayProducePolicyUpdateTypeSkipRecord       EventGatewayProducePolicyUpdateType = "skip_record"
)

// EventGatewayProducePolicyUpdate - The typed schema of the produce policy to modify it.
type EventGatewayProducePolicyUpdate struct {
	EventGatewayModifyHeadersPolicy             *EventGatewayModifyHeadersPolicy             `queryParam:"inline"`
	EventGatewayProduceSchemaValidationPolicy   *EventGatewayProduceSchemaValidationPolicy   `queryParam:"inline"`
	EventGatewayEncryptSensitiveDataAwarePolicy *EventGatewayEncryptSensitiveDataAwarePolicy `queryParam:"inline"`
	EventGatewaySkipRecordPolicy                *EventGatewaySkipRecordPolicy                `queryParam:"inline"`

	Type EventGatewayProducePolicyUpdateType
}

func CreateEventGatewayProducePolicyUpdateModifyHeaders(modifyHeaders EventGatewayModifyHeadersPolicy) EventGatewayProducePolicyUpdate {
	typ := EventGatewayProducePolicyUpdateTypeModifyHeaders

	return EventGatewayProducePolicyUpdate{
		EventGatewayModifyHeadersPolicy: &modifyHeaders,
		Type:                            typ,
	}
}

func CreateEventGatewayProducePolicyUpdateSchemaValidation(schemaValidation EventGatewayProduceSchemaValidationPolicy) EventGatewayProducePolicyUpdate {
	typ := EventGatewayProducePolicyUpdateTypeSchemaValidation

	return EventGatewayProducePolicyUpdate{
		EventGatewayProduceSchemaValidationPolicy: &schemaValidation,
		Type: typ,
	}
}

func CreateEventGatewayProducePolicyUpdateEncrypt(encrypt EventGatewayEncryptSensitiveDataAwarePolicy) EventGatewayProducePolicyUpdate {
	typ := EventGatewayProducePolicyUpdateTypeEncrypt

	return EventGatewayProducePolicyUpdate{
		EventGatewayEncryptSensitiveDataAwarePolicy: &encrypt,
		Type: typ,
	}
}

func CreateEventGatewayProducePolicyUpdateSkipRecord(skipRecord EventGatewaySkipRecordPolicy) EventGatewayProducePolicyUpdate {
	typ := EventGatewayProducePolicyUpdateTypeSkipRecord

	return EventGatewayProducePolicyUpdate{
		EventGatewaySkipRecordPolicy: &skipRecord,
		Type:                         typ,
	}
}

func (u *EventGatewayProducePolicyUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "modify_headers":
		eventGatewayModifyHeadersPolicy := new(EventGatewayModifyHeadersPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayModifyHeadersPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == modify_headers) type EventGatewayModifyHeadersPolicy within EventGatewayProducePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayModifyHeadersPolicy = eventGatewayModifyHeadersPolicy
		u.Type = EventGatewayProducePolicyUpdateTypeModifyHeaders
		return nil
	case "schema_validation":
		eventGatewayProduceSchemaValidationPolicy := new(EventGatewayProduceSchemaValidationPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayProduceSchemaValidationPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == schema_validation) type EventGatewayProduceSchemaValidationPolicy within EventGatewayProducePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayProduceSchemaValidationPolicy = eventGatewayProduceSchemaValidationPolicy
		u.Type = EventGatewayProducePolicyUpdateTypeSchemaValidation
		return nil
	case "encrypt":
		eventGatewayEncryptSensitiveDataAwarePolicy := new(EventGatewayEncryptSensitiveDataAwarePolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayEncryptSensitiveDataAwarePolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == encrypt) type EventGatewayEncryptSensitiveDataAwarePolicy within EventGatewayProducePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayEncryptSensitiveDataAwarePolicy = eventGatewayEncryptSensitiveDataAwarePolicy
		u.Type = EventGatewayProducePolicyUpdateTypeEncrypt
		return nil
	case "skip_record":
		eventGatewaySkipRecordPolicy := new(EventGatewaySkipRecordPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewaySkipRecordPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == skip_record) type EventGatewaySkipRecordPolicy within EventGatewayProducePolicyUpdate: %w", string(data), err)
		}

		u.EventGatewaySkipRecordPolicy = eventGatewaySkipRecordPolicy
		u.Type = EventGatewayProducePolicyUpdateTypeSkipRecord
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayProducePolicyUpdate", string(data))
}

func (u EventGatewayProducePolicyUpdate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayModifyHeadersPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayModifyHeadersPolicy, "", true)
	}

	if u.EventGatewayProduceSchemaValidationPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayProduceSchemaValidationPolicy, "", true)
	}

	if u.EventGatewayEncryptSensitiveDataAwarePolicy != nil {
		return utils.MarshalJSON(u.EventGatewayEncryptSensitiveDataAwarePolicy, "", true)
	}

	if u.EventGatewaySkipRecordPolicy != nil {
		return utils.MarshalJSON(u.EventGatewaySkipRecordPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayProducePolicyUpdate: all fields are null")
}
