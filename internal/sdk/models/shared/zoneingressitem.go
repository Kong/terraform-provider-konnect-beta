// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type AvailableServices struct {
	// instance of external service available from the zone
	ExternalService *bool `json:"externalService,omitempty"`
	// number of instances available for given tags
	Instances *int64 `json:"instances,omitempty"`
	// mesh of the instances available for given tags
	Mesh *string `json:"mesh,omitempty"`
	// tags of the service
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *AvailableServices) GetExternalService() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalService
}

func (o *AvailableServices) GetInstances() *int64 {
	if o == nil {
		return nil
	}
	return o.Instances
}

func (o *AvailableServices) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *AvailableServices) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

// ZoneIngressItemAdmin - Admin contains configuration related to Envoy Admin API
type ZoneIngressItemAdmin struct {
	// Port on which Envoy Admin API server will be listening
	Port *int64 `json:"port,omitempty"`
}

func (o *ZoneIngressItemAdmin) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// ZoneIngressItemNetworking - Networking defines the address and port of the Ingress to listen on.
// Additionally publicly advertised address and port could be specified.
type ZoneIngressItemNetworking struct {
	// Address on which inbound listener will be exposed
	Address *string `json:"address,omitempty"`
	// Admin contains configuration related to Envoy Admin API
	Admin *ZoneIngressItemAdmin `json:"admin,omitempty"`
	// AdvertisedAddress defines IP or DNS name on which ZoneIngress is
	// accessible to other Kuma clusters.
	AdvertisedAddress *string `json:"advertisedAddress,omitempty"`
	// AdvertisedPort defines port on which ZoneIngress is accessible to other
	// Kuma clusters.
	AdvertisedPort *int64 `json:"advertisedPort,omitempty"`
	// Port of the inbound interface that will forward requests to the service.
	Port *int64 `json:"port,omitempty"`
}

func (o *ZoneIngressItemNetworking) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *ZoneIngressItemNetworking) GetAdmin() *ZoneIngressItemAdmin {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *ZoneIngressItemNetworking) GetAdvertisedAddress() *string {
	if o == nil {
		return nil
	}
	return o.AdvertisedAddress
}

func (o *ZoneIngressItemNetworking) GetAdvertisedPort() *int64 {
	if o == nil {
		return nil
	}
	return o.AdvertisedPort
}

func (o *ZoneIngressItemNetworking) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// ZoneIngressItem - Successful response
type ZoneIngressItem struct {
	// AvailableService contains tags that represent unique subset of
	// endpoints
	AvailableServices []AvailableServices `json:"availableServices"`
	Labels            map[string]string   `json:"labels,omitempty"`
	Name              string              `json:"name"`
	// Networking defines the address and port of the Ingress to listen on.
	// Additionally publicly advertised address and port could be specified.
	Networking *ZoneIngressItemNetworking `json:"networking,omitempty"`
	Type       string                     `json:"type"`
	// Zone field contains Zone name where ingress is serving, field will be
	// automatically set by Global Kuma CP
	Zone *string `json:"zone,omitempty"`
}

func (o *ZoneIngressItem) GetAvailableServices() []AvailableServices {
	if o == nil {
		return nil
	}
	return o.AvailableServices
}

func (o *ZoneIngressItem) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *ZoneIngressItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ZoneIngressItem) GetNetworking() *ZoneIngressItemNetworking {
	if o == nil {
		return nil
	}
	return o.Networking
}

func (o *ZoneIngressItem) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ZoneIngressItem) GetZone() *string {
	if o == nil {
		return nil
	}
	return o.Zone
}
