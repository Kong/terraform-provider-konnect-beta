// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
	"time"
)

// EventGatewayVaultEventGatewayKonnectVault - A konnect vault.
type EventGatewayVaultEventGatewayKonnectVault struct {
	// The name of the vault.
	Name  string `json:"name"`
	type_ string `const:"konnect" json:"type"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// A human-readable description of the vault.
	Description *string `json:"description,omitempty"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
	// The unique identifier of the vault.
	ID string `json:"id"`
}

func (e EventGatewayVaultEventGatewayKonnectVault) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayVaultEventGatewayKonnectVault) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetType() string {
	return "konnect"
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *EventGatewayVaultEventGatewayKonnectVault) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// EventGatewayEnvVaultConfig - The configuration of the environment vault.
type EventGatewayEnvVaultConfig struct {
	// The optional prefix for environment variables.
	Prefix string `json:"prefix"`
}

func (o *EventGatewayEnvVaultConfig) GetPrefix() string {
	if o == nil {
		return ""
	}
	return o.Prefix
}

// EventGatewayVaultEventGatewayEnvVault - An environment vault.
type EventGatewayVaultEventGatewayEnvVault struct {
	// The name of the vault.
	Name  string `json:"name"`
	type_ string `const:"env" json:"type"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// A human-readable description of the vault.
	Description *string `json:"description,omitempty"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
	// The configuration of the environment vault.
	Config EventGatewayEnvVaultConfig `json:"config"`
	// The unique identifier of the vault.
	ID string `json:"id"`
}

func (e EventGatewayVaultEventGatewayEnvVault) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayVaultEventGatewayEnvVault) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetType() string {
	return "env"
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetConfig() EventGatewayEnvVaultConfig {
	if o == nil {
		return EventGatewayEnvVaultConfig{}
	}
	return o.Config
}

func (o *EventGatewayVaultEventGatewayEnvVault) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type EventGatewayVaultType string

const (
	EventGatewayVaultTypeEventGatewayVaultEventGatewayEnvVault     EventGatewayVaultType = "EventGatewayVault_EventGatewayEnvVault"
	EventGatewayVaultTypeEventGatewayVaultEventGatewayKonnectVault EventGatewayVaultType = "EventGatewayVault_EventGatewayKonnectVault"
)

type EventGatewayVault struct {
	EventGatewayVaultEventGatewayEnvVault     *EventGatewayVaultEventGatewayEnvVault     `queryParam:"inline"`
	EventGatewayVaultEventGatewayKonnectVault *EventGatewayVaultEventGatewayKonnectVault `queryParam:"inline"`

	Type EventGatewayVaultType
}

func CreateEventGatewayVaultEventGatewayVaultEventGatewayEnvVault(eventGatewayVaultEventGatewayEnvVault EventGatewayVaultEventGatewayEnvVault) EventGatewayVault {
	typ := EventGatewayVaultTypeEventGatewayVaultEventGatewayEnvVault

	return EventGatewayVault{
		EventGatewayVaultEventGatewayEnvVault: &eventGatewayVaultEventGatewayEnvVault,
		Type:                                  typ,
	}
}

func CreateEventGatewayVaultEventGatewayVaultEventGatewayKonnectVault(eventGatewayVaultEventGatewayKonnectVault EventGatewayVaultEventGatewayKonnectVault) EventGatewayVault {
	typ := EventGatewayVaultTypeEventGatewayVaultEventGatewayKonnectVault

	return EventGatewayVault{
		EventGatewayVaultEventGatewayKonnectVault: &eventGatewayVaultEventGatewayKonnectVault,
		Type: typ,
	}
}

func (u *EventGatewayVault) UnmarshalJSON(data []byte) error {

	var eventGatewayVaultEventGatewayKonnectVault EventGatewayVaultEventGatewayKonnectVault = EventGatewayVaultEventGatewayKonnectVault{}
	if err := utils.UnmarshalJSON(data, &eventGatewayVaultEventGatewayKonnectVault, "", true, true); err == nil {
		u.EventGatewayVaultEventGatewayKonnectVault = &eventGatewayVaultEventGatewayKonnectVault
		u.Type = EventGatewayVaultTypeEventGatewayVaultEventGatewayKonnectVault
		return nil
	}

	var eventGatewayVaultEventGatewayEnvVault EventGatewayVaultEventGatewayEnvVault = EventGatewayVaultEventGatewayEnvVault{}
	if err := utils.UnmarshalJSON(data, &eventGatewayVaultEventGatewayEnvVault, "", true, true); err == nil {
		u.EventGatewayVaultEventGatewayEnvVault = &eventGatewayVaultEventGatewayEnvVault
		u.Type = EventGatewayVaultTypeEventGatewayVaultEventGatewayEnvVault
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayVault", string(data))
}

func (u EventGatewayVault) MarshalJSON() ([]byte, error) {
	if u.EventGatewayVaultEventGatewayEnvVault != nil {
		return utils.MarshalJSON(u.EventGatewayVaultEventGatewayEnvVault, "", true)
	}

	if u.EventGatewayVaultEventGatewayKonnectVault != nil {
		return utils.MarshalJSON(u.EventGatewayVaultEventGatewayKonnectVault, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayVault: all fields are null")
}
