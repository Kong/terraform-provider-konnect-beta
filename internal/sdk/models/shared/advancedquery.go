// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Datasource string

const (
	DatasourceAPIUsage Datasource = "api_usage"
)

func (e Datasource) ToPointer() *Datasource {
	return &e
}
func (e *Datasource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_usage":
		*e = Datasource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Datasource: %v", v)
	}
}

type Dimensions string

const (
	DimensionsAPI                       Dimensions = "api"
	DimensionsAPIProduct                Dimensions = "api_product"
	DimensionsAPIProductVersion         Dimensions = "api_product_version"
	DimensionsApplication               Dimensions = "application"
	DimensionsConsumer                  Dimensions = "consumer"
	DimensionsControlPlane              Dimensions = "control_plane"
	DimensionsControlPlaneGroup         Dimensions = "control_plane_group"
	DimensionsDataPlaneNode             Dimensions = "data_plane_node"
	DimensionsDataPlaneNodeVersion      Dimensions = "data_plane_node_version"
	DimensionsGatewayService            Dimensions = "gateway_service"
	DimensionsPortal                    Dimensions = "portal"
	DimensionsResponseSource            Dimensions = "response_source"
	DimensionsRoute                     Dimensions = "route"
	DimensionsStatusCode                Dimensions = "status_code"
	DimensionsStatusCodeGrouped         Dimensions = "status_code_grouped"
	DimensionsTime                      Dimensions = "time"
	DimensionsUpstreamStatusCode        Dimensions = "upstream_status_code"
	DimensionsUpstreamStatusCodeGrouped Dimensions = "upstream_status_code_grouped"
)

func (e Dimensions) ToPointer() *Dimensions {
	return &e
}
func (e *Dimensions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api":
		fallthrough
	case "api_product":
		fallthrough
	case "api_product_version":
		fallthrough
	case "application":
		fallthrough
	case "consumer":
		fallthrough
	case "control_plane":
		fallthrough
	case "control_plane_group":
		fallthrough
	case "data_plane_node":
		fallthrough
	case "data_plane_node_version":
		fallthrough
	case "gateway_service":
		fallthrough
	case "portal":
		fallthrough
	case "response_source":
		fallthrough
	case "route":
		fallthrough
	case "status_code":
		fallthrough
	case "status_code_grouped":
		fallthrough
	case "time":
		fallthrough
	case "upstream_status_code":
		fallthrough
	case "upstream_status_code_grouped":
		*e = Dimensions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dimensions: %v", v)
	}
}

// AdvancedQuery - A query targeting the API usage analytics datasource.
type AdvancedQuery struct {
	Datasource Datasource `json:"datasource"`
	// List of aggregated metrics to collect across the requested time span. If no metrics are specified, request_count will be computed by default.
	Metrics    []AdvancedMetrics `json:"metrics,omitempty"`
	Dimensions []Dimensions      `json:"dimensions,omitempty"`
	// A list of filters to apply to the query.
	Filters []AdvancedFilters `json:"filters,omitempty"`
	// Force time grouping into buckets of the specified duration.  Only has an effect if "time" is in the "dimensions" list.
	//
	// The granularity of the result may be coarser than requested.  The finest allowed granularity depends on the query's time range: data farther in the past may have coarser granularity.  The exact result granularity will be reported in the response `meta.granularity_ms` field.
	//
	// If granularity is not specified and "time" is in the dimensions list, a default will be chosen based on the time range requested.
	//
	// Different relative times support different granularities:
	//
	//   - 15m => tenSecondly, thirtySecondly, minutely
	//   - 1h  => tenSecondly, thirtySecondly, minutely, fiveMinutely, tenMinutely
	//   - 6h  => thirtySecondly, minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly
	//   - 12h => minutely, fiveMinutely, tenMinutely, thirtyMinutely, hourly
	//   - 24h => fiveMinutely, tenMinutely, thirtyMinutely, hourly
	//   - 7d  => thirtyMinutely, hourly, twoHourly, twelveHourly, daily
	//   - 30d => hourly, twoHourly, twelveHourly, daily, weekly
	//
	// For special time ranges:
	//
	//   - current_week, previous_week   => thirtyMinutely, hourly, twoHourly, twelveHourly, daily
	//   - current_month, previous_month => hourly, twoHourly, twelveHourly, daily, weekly
	//
	// For absolute time ranges, daily will be used.
	//
	Granularity *Granularity `json:"granularity,omitempty"`
	// The time range to query.
	TimeRange *TimeRange `json:"time_range,omitempty"`
}

func (o *AdvancedQuery) GetDatasource() Datasource {
	if o == nil {
		return Datasource("")
	}
	return o.Datasource
}

func (o *AdvancedQuery) GetMetrics() []AdvancedMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

func (o *AdvancedQuery) GetDimensions() []Dimensions {
	if o == nil {
		return nil
	}
	return o.Dimensions
}

func (o *AdvancedQuery) GetFilters() []AdvancedFilters {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *AdvancedQuery) GetGranularity() *Granularity {
	if o == nil {
		return nil
	}
	return o.Granularity
}

func (o *AdvancedQuery) GetTimeRange() *TimeRange {
	if o == nil {
		return nil
	}
	return o.TimeRange
}

func (o *AdvancedQuery) GetTimeRangeRelative() *MetricsRelativeTimeRangeDtoV2 {
	if v := o.GetTimeRange(); v != nil {
		return v.MetricsRelativeTimeRangeDtoV2
	}
	return nil
}

func (o *AdvancedQuery) GetTimeRangeAbsolute() *MetricsAbsoluteTimeRangeDtoV2 {
	if v := o.GetTimeRange(); v != nil {
		return v.MetricsAbsoluteTimeRangeDtoV2
	}
	return nil
}
