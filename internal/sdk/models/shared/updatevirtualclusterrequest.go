// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// UpdateVirtualClusterRequest - The request schema for updating a virtual cluster.
type UpdateVirtualClusterRequest struct {
	// The name of the virtual cluster.
	Name string `json:"name"`
	// A human-readable description of the virtual cluster.
	Description *string `default:"null" json:"description"`
	// The backend cluster associated with the virtual cluster.
	//
	// Either `id` or `name` must be provided. Following changes to the backend cluster name won't affect the
	// reference, as the system will create the entities relationship by `id`.
	//
	Destination BackendClusterReferenceModify `json:"destination"`
	// How to handle authentication from clients.
	//
	// It tries to authenticate with every rule sequentially one by one.
	// It succeeds on the first match, and fails if no rule matches.
	//
	Authentication []VirtualClusterAuthenticationScheme `json:"authentication"`
	// Namespace allows to implement multitenancy using a single backend cluster.
	// It allows to either hide or enforce a static prefix on resources (topics, consumer group IDs, transaction IDs).
	//
	Namespace *VirtualClusterNamespace `json:"namespace,omitempty"`
	// The DNS label used in the bootstrap server URL to identify the virtual cluster when using SNI routing.
	// The format follows the RFC1035: 1-63 chars, lowercase alphanumeric or '-', must start with a letter and end with an alphanumeric character.
	DNSLabel string `json:"dns_label"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (u UpdateVirtualClusterRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateVirtualClusterRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateVirtualClusterRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateVirtualClusterRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateVirtualClusterRequest) GetDestination() BackendClusterReferenceModify {
	if o == nil {
		return BackendClusterReferenceModify{}
	}
	return o.Destination
}

func (o *UpdateVirtualClusterRequest) GetAuthentication() []VirtualClusterAuthenticationScheme {
	if o == nil {
		return []VirtualClusterAuthenticationScheme{}
	}
	return o.Authentication
}

func (o *UpdateVirtualClusterRequest) GetNamespace() *VirtualClusterNamespace {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *UpdateVirtualClusterRequest) GetDNSLabel() string {
	if o == nil {
		return ""
	}
	return o.DNSLabel
}

func (o *UpdateVirtualClusterRequest) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
