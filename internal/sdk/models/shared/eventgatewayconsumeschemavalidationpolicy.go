// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// EventGatewayConsumeSchemaValidationPolicyConfig - The configuration of the schema validation policy.
type EventGatewayConsumeSchemaValidationPolicyConfig struct {
	// How to validate the schema and parse the record.
	// * confluent_schema_registry - validates against confluent schema registry.
	// * json - simple JSON parsing without the schema.
	//
	Type SchemaValidationType `json:"type"`
	// A reference to a schema Registry.
	SchemaRegistry *SchemaRegistryReference `json:"schema_registry,omitempty"`
	// Defines a behavior when record key is not valid.
	// * mark - marks a record with kong/server header and client ID value
	//   to help to identify the clients violating schema.
	// * skip - skips delivering a record.
	//
	KeyValidationAction *ConsumeKeyValidationAction `json:"key_validation_action,omitempty"`
	// Defines a behavior when record value is not valid.
	// * mark - marks a record with kong/server header and client ID value
	//   to help to identify the clients violating schema.
	// * skip - skips delivering a record.
	//
	ValueValidationAction *ConsumeValueValidationAction `json:"value_validation_action,omitempty"`
}

func (o *EventGatewayConsumeSchemaValidationPolicyConfig) GetType() SchemaValidationType {
	if o == nil {
		return SchemaValidationType("")
	}
	return o.Type
}

func (o *EventGatewayConsumeSchemaValidationPolicyConfig) GetSchemaRegistry() *SchemaRegistryReference {
	if o == nil {
		return nil
	}
	return o.SchemaRegistry
}

func (o *EventGatewayConsumeSchemaValidationPolicyConfig) GetKeyValidationAction() *ConsumeKeyValidationAction {
	if o == nil {
		return nil
	}
	return o.KeyValidationAction
}

func (o *EventGatewayConsumeSchemaValidationPolicyConfig) GetValueValidationAction() *ConsumeValueValidationAction {
	if o == nil {
		return nil
	}
	return o.ValueValidationAction
}

// EventGatewayConsumeSchemaValidationPolicy - A policy that validates consume messages against a schema registry.
type EventGatewayConsumeSchemaValidationPolicy struct {
	type_ string `const:"schema_validation" json:"type"`
	// A unique user-defined name of the policy.
	Name *string `default:"null" json:"name"`
	// A human-readable description of the policy.
	Description *string `default:"null" json:"description"`
	// Whether the policy is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// A string containing the boolean expression that determines whether the policy is applied.
	Condition *string `json:"condition,omitempty"`
	// The configuration of the schema validation policy.
	Config *EventGatewayConsumeSchemaValidationPolicyConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (e EventGatewayConsumeSchemaValidationPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayConsumeSchemaValidationPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetType() string {
	return "schema_validation"
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetConfig() *EventGatewayConsumeSchemaValidationPolicyConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *EventGatewayConsumeSchemaValidationPolicy) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
