// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type ForwardToClusterBySNIConfigType string

const (
	ForwardToClusterBySNIConfigTypeSni ForwardToClusterBySNIConfigType = "sni"
)

func (e ForwardToClusterBySNIConfigType) ToPointer() *ForwardToClusterBySNIConfigType {
	return &e
}
func (e *ForwardToClusterBySNIConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sni":
		*e = ForwardToClusterBySNIConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ForwardToClusterBySNIConfigType: %v", v)
	}
}

// ForwardToClusterBySNIConfig - The configuration to forward requests to virtual clusters configured with SNI routing.
type ForwardToClusterBySNIConfig struct {
	Type ForwardToClusterBySNIConfigType `json:"type"`
	// Optional suffix for TLS SNI validation.
	//
	// This suffix is concatenated with the virtual cluster "dns.label" label to form the base name for the SNI.
	// If not provided, the virtual cluster "dns.label" label alone is used as the base name for the SNI.
	// For example with sni_suffix: `.example.com` and virtual cluster "dns.label" label: `my-cluster`,
	// the SNI suffix for it is `my-cluster.example.com`.
	// If "dns.label" label is absent on the virtual cluster, the traffic won't be routed there.
	//
	// The bootstrap host is `bootstrap.my-cluster.example.com` and then each broker is addressable at `broker-0.my-cluster.example.com`, `broker-1.my-cluster.example.com`, etc.
	// This means that your deployment needs to have a wildcard certificate for the domain and a DNS resolver that routes `*.my-cluster.example.com` to the proxy.
	//
	SniSuffix *string `default:"null" json:"sni_suffix"`
	// Virtual brokers are advertised to clients with this port instead of listen_port. Useful when proxy is
	// behind loadbalancer listening on different port.
	//
	AdvertisedPort *int64 `default:"null" json:"advertised_port"`
}

func (f ForwardToClusterBySNIConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *ForwardToClusterBySNIConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ForwardToClusterBySNIConfig) GetType() ForwardToClusterBySNIConfigType {
	if o == nil {
		return ForwardToClusterBySNIConfigType("")
	}
	return o.Type
}

func (o *ForwardToClusterBySNIConfig) GetSniSuffix() *string {
	if o == nil {
		return nil
	}
	return o.SniSuffix
}

func (o *ForwardToClusterBySNIConfig) GetAdvertisedPort() *int64 {
	if o == nil {
		return nil
	}
	return o.AdvertisedPort
}
