// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LLMFiltersField string

const (
	LLMFiltersFieldAiPlugin              LLMFiltersField = "ai_plugin"
	LLMFiltersFieldAiProvider            LLMFiltersField = "ai_provider"
	LLMFiltersFieldAiRequestModel        LLMFiltersField = "ai_request_model"
	LLMFiltersFieldAiResponseModel       LLMFiltersField = "ai_response_model"
	LLMFiltersFieldApplication           LLMFiltersField = "application"
	LLMFiltersFieldConsumer              LLMFiltersField = "consumer"
	LLMFiltersFieldControlPlane          LLMFiltersField = "control_plane"
	LLMFiltersFieldControlPlaneGroup     LLMFiltersField = "control_plane_group"
	LLMFiltersFieldGatewayService        LLMFiltersField = "gateway_service"
	LLMFiltersFieldLlmCacheStatus        LLMFiltersField = "llm_cache_status"
	LLMFiltersFieldLlmEmbeddingsModel    LLMFiltersField = "llm_embeddings_model"
	LLMFiltersFieldLlmEmbeddingsProvider LLMFiltersField = "llm_embeddings_provider"
	LLMFiltersFieldRealm                 LLMFiltersField = "realm"
	LLMFiltersFieldRoute                 LLMFiltersField = "route"
	LLMFiltersFieldStatusCode            LLMFiltersField = "status_code"
	LLMFiltersFieldStatusCodeGrouped     LLMFiltersField = "status_code_grouped"
)

func (e LLMFiltersField) ToPointer() *LLMFiltersField {
	return &e
}
func (e *LLMFiltersField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ai_plugin":
		fallthrough
	case "ai_provider":
		fallthrough
	case "ai_request_model":
		fallthrough
	case "ai_response_model":
		fallthrough
	case "application":
		fallthrough
	case "consumer":
		fallthrough
	case "control_plane":
		fallthrough
	case "control_plane_group":
		fallthrough
	case "gateway_service":
		fallthrough
	case "llm_cache_status":
		fallthrough
	case "llm_embeddings_model":
		fallthrough
	case "llm_embeddings_provider":
		fallthrough
	case "realm":
		fallthrough
	case "route":
		fallthrough
	case "status_code":
		fallthrough
	case "status_code_grouped":
		*e = LLMFiltersField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LLMFiltersField: %v", v)
	}
}

type LLMFiltersOperator string

const (
	LLMFiltersOperatorIn       LLMFiltersOperator = "in"
	LLMFiltersOperatorNotIn    LLMFiltersOperator = "not_in"
	LLMFiltersOperatorEmpty    LLMFiltersOperator = "empty"
	LLMFiltersOperatorNotEmpty LLMFiltersOperator = "not_empty"
)

func (e LLMFiltersOperator) ToPointer() *LLMFiltersOperator {
	return &e
}
func (e *LLMFiltersOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in":
		fallthrough
	case "not_in":
		fallthrough
	case "empty":
		fallthrough
	case "not_empty":
		*e = LLMFiltersOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LLMFiltersOperator: %v", v)
	}
}

type LLMFilters struct {
	Field    LLMFiltersField    `json:"field"`
	Operator LLMFiltersOperator `json:"operator"`
	Value    any                `json:"value,omitempty"`
}

func (o *LLMFilters) GetField() LLMFiltersField {
	if o == nil {
		return LLMFiltersField("")
	}
	return o.Field
}

func (o *LLMFilters) GetOperator() LLMFiltersOperator {
	if o == nil {
		return LLMFiltersOperator("")
	}
	return o.Operator
}

func (o *LLMFilters) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}
