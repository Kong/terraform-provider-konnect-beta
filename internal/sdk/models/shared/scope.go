// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
	"time"
)

// Scope - A scope
type Scope struct {
	// The ID of the scope
	ID string `json:"id"`
	// The name of the scope
	Name string `json:"name"`
	// Description of the scope
	Description string `json:"description"`
	// Specifies whether the scope is included by default in access tokens without being explicitly requested by the client. If the scope is not allowed by the client, it will not be included in the access token.
	Default *bool `default:"false" json:"default"`
	// Specifies whether to include the scope in the metadata document
	IncludeInMetadata *bool `default:"false" json:"include_in_metadata"`
	// Specifies whether the scope is enabled. If the scope is not enabled, it cannot be requested by clients and will not be included in the access token.
	Enabled *bool `default:"true" json:"enabled"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (s Scope) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Scope) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Scope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Scope) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Scope) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Scope) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Scope) GetIncludeInMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeInMetadata
}

func (o *Scope) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Scope) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Scope) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
