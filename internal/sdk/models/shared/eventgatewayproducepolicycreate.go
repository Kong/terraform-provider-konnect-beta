// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayProducePolicyCreateType string

const (
	EventGatewayProducePolicyCreateTypeModifyHeaders    EventGatewayProducePolicyCreateType = "modify_headers"
	EventGatewayProducePolicyCreateTypeSchemaValidation EventGatewayProducePolicyCreateType = "schema_validation"
	EventGatewayProducePolicyCreateTypeEncrypt          EventGatewayProducePolicyCreateType = "encrypt"
	EventGatewayProducePolicyCreateTypeSkipRecord       EventGatewayProducePolicyCreateType = "skip_record"
)

// EventGatewayProducePolicyCreate - The typed schema of the produce policy to modify it.
type EventGatewayProducePolicyCreate struct {
	EventGatewayModifyHeadersPolicy           *EventGatewayModifyHeadersPolicy           `queryParam:"inline"`
	EventGatewayProduceSchemaValidationPolicy *EventGatewayProduceSchemaValidationPolicy `queryParam:"inline"`
	EventGatewayEncryptPolicy                 *EventGatewayEncryptPolicy                 `queryParam:"inline"`
	EventGatewaySkipRecordPolicy              *EventGatewaySkipRecordPolicy              `queryParam:"inline"`

	Type EventGatewayProducePolicyCreateType
}

func CreateEventGatewayProducePolicyCreateModifyHeaders(modifyHeaders EventGatewayModifyHeadersPolicy) EventGatewayProducePolicyCreate {
	typ := EventGatewayProducePolicyCreateTypeModifyHeaders

	return EventGatewayProducePolicyCreate{
		EventGatewayModifyHeadersPolicy: &modifyHeaders,
		Type:                            typ,
	}
}

func CreateEventGatewayProducePolicyCreateSchemaValidation(schemaValidation EventGatewayProduceSchemaValidationPolicy) EventGatewayProducePolicyCreate {
	typ := EventGatewayProducePolicyCreateTypeSchemaValidation

	return EventGatewayProducePolicyCreate{
		EventGatewayProduceSchemaValidationPolicy: &schemaValidation,
		Type: typ,
	}
}

func CreateEventGatewayProducePolicyCreateEncrypt(encrypt EventGatewayEncryptPolicy) EventGatewayProducePolicyCreate {
	typ := EventGatewayProducePolicyCreateTypeEncrypt

	return EventGatewayProducePolicyCreate{
		EventGatewayEncryptPolicy: &encrypt,
		Type:                      typ,
	}
}

func CreateEventGatewayProducePolicyCreateSkipRecord(skipRecord EventGatewaySkipRecordPolicy) EventGatewayProducePolicyCreate {
	typ := EventGatewayProducePolicyCreateTypeSkipRecord

	return EventGatewayProducePolicyCreate{
		EventGatewaySkipRecordPolicy: &skipRecord,
		Type:                         typ,
	}
}

func (u *EventGatewayProducePolicyCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "modify_headers":
		eventGatewayModifyHeadersPolicy := new(EventGatewayModifyHeadersPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayModifyHeadersPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == modify_headers) type EventGatewayModifyHeadersPolicy within EventGatewayProducePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayModifyHeadersPolicy = eventGatewayModifyHeadersPolicy
		u.Type = EventGatewayProducePolicyCreateTypeModifyHeaders
		return nil
	case "schema_validation":
		eventGatewayProduceSchemaValidationPolicy := new(EventGatewayProduceSchemaValidationPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayProduceSchemaValidationPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == schema_validation) type EventGatewayProduceSchemaValidationPolicy within EventGatewayProducePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayProduceSchemaValidationPolicy = eventGatewayProduceSchemaValidationPolicy
		u.Type = EventGatewayProducePolicyCreateTypeSchemaValidation
		return nil
	case "encrypt":
		eventGatewayEncryptPolicy := new(EventGatewayEncryptPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayEncryptPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == encrypt) type EventGatewayEncryptPolicy within EventGatewayProducePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayEncryptPolicy = eventGatewayEncryptPolicy
		u.Type = EventGatewayProducePolicyCreateTypeEncrypt
		return nil
	case "skip_record":
		eventGatewaySkipRecordPolicy := new(EventGatewaySkipRecordPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewaySkipRecordPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == skip_record) type EventGatewaySkipRecordPolicy within EventGatewayProducePolicyCreate: %w", string(data), err)
		}

		u.EventGatewaySkipRecordPolicy = eventGatewaySkipRecordPolicy
		u.Type = EventGatewayProducePolicyCreateTypeSkipRecord
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayProducePolicyCreate", string(data))
}

func (u EventGatewayProducePolicyCreate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayModifyHeadersPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayModifyHeadersPolicy, "", true)
	}

	if u.EventGatewayProduceSchemaValidationPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayProduceSchemaValidationPolicy, "", true)
	}

	if u.EventGatewayEncryptPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayEncryptPolicy, "", true)
	}

	if u.EventGatewaySkipRecordPolicy != nil {
		return utils.MarshalJSON(u.EventGatewaySkipRecordPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayProducePolicyCreate: all fields are null")
}
