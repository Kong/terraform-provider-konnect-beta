// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayClusterPolicyModifyType string

const (
	EventGatewayClusterPolicyModifyTypeIDPrefix     EventGatewayClusterPolicyModifyType = "id_prefix"
	EventGatewayClusterPolicyModifyTypeTopicRewrite EventGatewayClusterPolicyModifyType = "topic_rewrite"
)

// EventGatewayClusterPolicyModify - The typed schema of the cluster policy to modify it.
type EventGatewayClusterPolicyModify struct {
	EventGatewayIDPrefixPolicy     *EventGatewayIDPrefixPolicy     `queryParam:"inline"`
	EventGatewayTopicRewritePolicy *EventGatewayTopicRewritePolicy `queryParam:"inline"`

	Type EventGatewayClusterPolicyModifyType
}

func CreateEventGatewayClusterPolicyModifyIDPrefix(idPrefix EventGatewayIDPrefixPolicy) EventGatewayClusterPolicyModify {
	typ := EventGatewayClusterPolicyModifyTypeIDPrefix

	typStr := EventGatewayIDPrefixPolicyType(typ)
	idPrefix.Type = typStr

	return EventGatewayClusterPolicyModify{
		EventGatewayIDPrefixPolicy: &idPrefix,
		Type:                       typ,
	}
}

func CreateEventGatewayClusterPolicyModifyTopicRewrite(topicRewrite EventGatewayTopicRewritePolicy) EventGatewayClusterPolicyModify {
	typ := EventGatewayClusterPolicyModifyTypeTopicRewrite

	typStr := EventGatewayTopicRewritePolicyType(typ)
	topicRewrite.Type = typStr

	return EventGatewayClusterPolicyModify{
		EventGatewayTopicRewritePolicy: &topicRewrite,
		Type:                           typ,
	}
}

func (u *EventGatewayClusterPolicyModify) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "id_prefix":
		eventGatewayIDPrefixPolicy := new(EventGatewayIDPrefixPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayIDPrefixPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == id_prefix) type EventGatewayIDPrefixPolicy within EventGatewayClusterPolicyModify: %w", string(data), err)
		}

		u.EventGatewayIDPrefixPolicy = eventGatewayIDPrefixPolicy
		u.Type = EventGatewayClusterPolicyModifyTypeIDPrefix
		return nil
	case "topic_rewrite":
		eventGatewayTopicRewritePolicy := new(EventGatewayTopicRewritePolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayTopicRewritePolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == topic_rewrite) type EventGatewayTopicRewritePolicy within EventGatewayClusterPolicyModify: %w", string(data), err)
		}

		u.EventGatewayTopicRewritePolicy = eventGatewayTopicRewritePolicy
		u.Type = EventGatewayClusterPolicyModifyTypeTopicRewrite
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayClusterPolicyModify", string(data))
}

func (u EventGatewayClusterPolicyModify) MarshalJSON() ([]byte, error) {
	if u.EventGatewayIDPrefixPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayIDPrefixPolicy, "", true)
	}

	if u.EventGatewayTopicRewritePolicy != nil {
		return utils.MarshalJSON(u.EventGatewayTopicRewritePolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayClusterPolicyModify: all fields are null")
}
