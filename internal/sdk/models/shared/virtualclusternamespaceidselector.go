// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type VirtualClusterNamespaceIDSelectorType string

const (
	VirtualClusterNamespaceIDSelectorTypeGlob      VirtualClusterNamespaceIDSelectorType = "glob"
	VirtualClusterNamespaceIDSelectorTypeExactList VirtualClusterNamespaceIDSelectorType = "exact_list"
)

type VirtualClusterNamespaceIDSelector struct {
	VirtualClusterNamespaceIDSelectorGlob      *VirtualClusterNamespaceIDSelectorGlob      `queryParam:"inline"`
	VirtualClusterNamespaceIDSelectorExactList *VirtualClusterNamespaceIDSelectorExactList `queryParam:"inline"`

	Type VirtualClusterNamespaceIDSelectorType
}

func CreateVirtualClusterNamespaceIDSelectorGlob(glob VirtualClusterNamespaceIDSelectorGlob) VirtualClusterNamespaceIDSelector {
	typ := VirtualClusterNamespaceIDSelectorTypeGlob

	typStr := VirtualClusterNamespaceIDSelectorGlobType(typ)
	glob.Type = typStr

	return VirtualClusterNamespaceIDSelector{
		VirtualClusterNamespaceIDSelectorGlob: &glob,
		Type:                                  typ,
	}
}

func CreateVirtualClusterNamespaceIDSelectorExactList(exactList VirtualClusterNamespaceIDSelectorExactList) VirtualClusterNamespaceIDSelector {
	typ := VirtualClusterNamespaceIDSelectorTypeExactList

	typStr := VirtualClusterNamespaceIDSelectorExactListType(typ)
	exactList.Type = typStr

	return VirtualClusterNamespaceIDSelector{
		VirtualClusterNamespaceIDSelectorExactList: &exactList,
		Type: typ,
	}
}

func (u *VirtualClusterNamespaceIDSelector) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "glob":
		virtualClusterNamespaceIDSelectorGlob := new(VirtualClusterNamespaceIDSelectorGlob)
		if err := utils.UnmarshalJSON(data, &virtualClusterNamespaceIDSelectorGlob, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == glob) type VirtualClusterNamespaceIDSelectorGlob within VirtualClusterNamespaceIDSelector: %w", string(data), err)
		}

		u.VirtualClusterNamespaceIDSelectorGlob = virtualClusterNamespaceIDSelectorGlob
		u.Type = VirtualClusterNamespaceIDSelectorTypeGlob
		return nil
	case "exact_list":
		virtualClusterNamespaceIDSelectorExactList := new(VirtualClusterNamespaceIDSelectorExactList)
		if err := utils.UnmarshalJSON(data, &virtualClusterNamespaceIDSelectorExactList, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == exact_list) type VirtualClusterNamespaceIDSelectorExactList within VirtualClusterNamespaceIDSelector: %w", string(data), err)
		}

		u.VirtualClusterNamespaceIDSelectorExactList = virtualClusterNamespaceIDSelectorExactList
		u.Type = VirtualClusterNamespaceIDSelectorTypeExactList
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VirtualClusterNamespaceIDSelector", string(data))
}

func (u VirtualClusterNamespaceIDSelector) MarshalJSON() ([]byte, error) {
	if u.VirtualClusterNamespaceIDSelectorGlob != nil {
		return utils.MarshalJSON(u.VirtualClusterNamespaceIDSelectorGlob, "", true)
	}

	if u.VirtualClusterNamespaceIDSelectorExactList != nil {
		return utils.MarshalJSON(u.VirtualClusterNamespaceIDSelectorExactList, "", true)
	}

	return nil, errors.New("could not marshal union type VirtualClusterNamespaceIDSelector: all fields are null")
}
