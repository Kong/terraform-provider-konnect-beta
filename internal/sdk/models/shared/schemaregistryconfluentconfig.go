// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

// SchemaType - The format of the message.
type SchemaType string

const (
	SchemaTypeAvro SchemaType = "avro"
	SchemaTypeJSON SchemaType = "json"
)

func (e SchemaType) ToPointer() *SchemaType {
	return &e
}
func (e *SchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		fallthrough
	case "json":
		*e = SchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaType: %v", v)
	}
}

// SchemaRegistryConfluentConfig - The configuration of [Confluent Schema Registry](https://github.com/confluentinc/schema-registry)
type SchemaRegistryConfluentConfig struct {
	// The format of the message.
	SchemaType SchemaType `json:"schema_type"`
	// The endpoint of the Confluent schema registry.
	Endpoint string `json:"endpoint"`
	// Total time in seconds from establishing connection to receive a response from schema registry.
	//
	TimeoutSeconds *int64 `default:"10" json:"timeout_seconds"`
	// The authentication configuration for the schema registry.
	Authentication *SchemaRegistryAuthenticationScheme `json:"authentication,omitempty"`
}

func (s SchemaRegistryConfluentConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemaRegistryConfluentConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"schema_type", "endpoint"}); err != nil {
		return err
	}
	return nil
}

func (s *SchemaRegistryConfluentConfig) GetSchemaType() SchemaType {
	if s == nil {
		return SchemaType("")
	}
	return s.SchemaType
}

func (s *SchemaRegistryConfluentConfig) GetEndpoint() string {
	if s == nil {
		return ""
	}
	return s.Endpoint
}

func (s *SchemaRegistryConfluentConfig) GetTimeoutSeconds() *int64 {
	if s == nil {
		return nil
	}
	return s.TimeoutSeconds
}

func (s *SchemaRegistryConfluentConfig) GetAuthentication() *SchemaRegistryAuthenticationScheme {
	if s == nil {
		return nil
	}
	return s.Authentication
}

func (s *SchemaRegistryConfluentConfig) GetAuthenticationBasic() *SchemaRegistryAuthenticationBasic {
	if v := s.GetAuthentication(); v != nil {
		return v.SchemaRegistryAuthenticationBasic
	}
	return nil
}
