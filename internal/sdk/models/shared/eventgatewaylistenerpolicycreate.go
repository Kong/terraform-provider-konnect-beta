// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayListenerPolicyCreateType string

const (
	EventGatewayListenerPolicyCreateTypeTLSServer               EventGatewayListenerPolicyCreateType = "tls_server"
	EventGatewayListenerPolicyCreateTypeForwardToVirtualCluster EventGatewayListenerPolicyCreateType = "forward_to_virtual_cluster"
)

// EventGatewayListenerPolicyCreate - The typed schema of the policy to modify it.
type EventGatewayListenerPolicyCreate struct {
	EventGatewayTLSListenerPolicy *EventGatewayTLSListenerPolicy `queryParam:"inline"`
	ForwardToVirtualClusterPolicy *ForwardToVirtualClusterPolicy `queryParam:"inline"`

	Type EventGatewayListenerPolicyCreateType
}

func CreateEventGatewayListenerPolicyCreateTLSServer(tlsServer EventGatewayTLSListenerPolicy) EventGatewayListenerPolicyCreate {
	typ := EventGatewayListenerPolicyCreateTypeTLSServer

	return EventGatewayListenerPolicyCreate{
		EventGatewayTLSListenerPolicy: &tlsServer,
		Type:                          typ,
	}
}

func CreateEventGatewayListenerPolicyCreateForwardToVirtualCluster(forwardToVirtualCluster ForwardToVirtualClusterPolicy) EventGatewayListenerPolicyCreate {
	typ := EventGatewayListenerPolicyCreateTypeForwardToVirtualCluster

	return EventGatewayListenerPolicyCreate{
		ForwardToVirtualClusterPolicy: &forwardToVirtualCluster,
		Type:                          typ,
	}
}

func (u *EventGatewayListenerPolicyCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "tls_server":
		eventGatewayTLSListenerPolicy := new(EventGatewayTLSListenerPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayTLSListenerPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == tls_server) type EventGatewayTLSListenerPolicy within EventGatewayListenerPolicyCreate: %w", string(data), err)
		}

		u.EventGatewayTLSListenerPolicy = eventGatewayTLSListenerPolicy
		u.Type = EventGatewayListenerPolicyCreateTypeTLSServer
		return nil
	case "forward_to_virtual_cluster":
		forwardToVirtualClusterPolicy := new(ForwardToVirtualClusterPolicy)
		if err := utils.UnmarshalJSON(data, &forwardToVirtualClusterPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == forward_to_virtual_cluster) type ForwardToVirtualClusterPolicy within EventGatewayListenerPolicyCreate: %w", string(data), err)
		}

		u.ForwardToVirtualClusterPolicy = forwardToVirtualClusterPolicy
		u.Type = EventGatewayListenerPolicyCreateTypeForwardToVirtualCluster
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayListenerPolicyCreate", string(data))
}

func (u EventGatewayListenerPolicyCreate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayTLSListenerPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayTLSListenerPolicy, "", true)
	}

	if u.ForwardToVirtualClusterPolicy != nil {
		return utils.MarshalJSON(u.ForwardToVirtualClusterPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayListenerPolicyCreate: all fields are null")
}
