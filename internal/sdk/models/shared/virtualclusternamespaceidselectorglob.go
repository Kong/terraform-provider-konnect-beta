// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VirtualClusterNamespaceIDSelectorGlobType string

const (
	VirtualClusterNamespaceIDSelectorGlobTypeGlob VirtualClusterNamespaceIDSelectorGlobType = "glob"
)

func (e VirtualClusterNamespaceIDSelectorGlobType) ToPointer() *VirtualClusterNamespaceIDSelectorGlobType {
	return &e
}
func (e *VirtualClusterNamespaceIDSelectorGlobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "glob":
		*e = VirtualClusterNamespaceIDSelectorGlobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualClusterNamespaceIDSelectorGlobType: %v", v)
	}
}

type VirtualClusterNamespaceIDSelectorGlob struct {
	Type VirtualClusterNamespaceIDSelectorGlobType `json:"type"`
	// Expose any id that matches this glob pattern (e.g., `my_id_*`).
	Glob string `json:"glob"`
}

func (o *VirtualClusterNamespaceIDSelectorGlob) GetType() VirtualClusterNamespaceIDSelectorGlobType {
	if o == nil {
		return VirtualClusterNamespaceIDSelectorGlobType("")
	}
	return o.Type
}

func (o *VirtualClusterNamespaceIDSelectorGlob) GetGlob() string {
	if o == nil {
		return ""
	}
	return o.Glob
}
