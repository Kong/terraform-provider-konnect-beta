// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Name string

const (
	NameAll             Name = "all"
	NameAlter           Name = "alter"
	NameAlterConfigs    Name = "alter_configs"
	NameCreate          Name = "create"
	NameDelete          Name = "delete"
	NameDescribe        Name = "describe"
	NameDescribeConfigs Name = "describe_configs"
	NameIdempotentWrite Name = "idempotent_write"
	NameRead            Name = "read"
	NameWrite           Name = "write"
)

func (e Name) ToPointer() *Name {
	return &e
}
func (e *Name) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "alter":
		fallthrough
	case "alter_configs":
		fallthrough
	case "create":
		fallthrough
	case "delete":
		fallthrough
	case "describe":
		fallthrough
	case "describe_configs":
		fallthrough
	case "idempotent_write":
		fallthrough
	case "read":
		fallthrough
	case "write":
		*e = Name(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Name: %v", v)
	}
}

// EventGatewayACLOperation - An Event Gateway operation to match against in an ACL rule.
type EventGatewayACLOperation struct {
	Name Name `json:"name"`
}

func (e *EventGatewayACLOperation) GetName() Name {
	if e == nil {
		return Name("")
	}
	return e.Name
}
