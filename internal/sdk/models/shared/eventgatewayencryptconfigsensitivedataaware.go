// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// EventGatewayEncryptConfigSensitiveDataAware - The configuration of the encrypt policy.
type EventGatewayEncryptConfigSensitiveDataAware struct {
	// Describes how to handle failing encryption or decryption.
	// Use `error` if the record should be rejected if encryption or decryption fails.
	// Use `passthrough` to ignore encryption or decryption failure and continue proxying the record.
	//
	FailureMode EncryptionFailureMode `json:"failure_mode"`
	// Describes how to find a symmetric key for encryption.
	//
	KeySources []EventGatewayKeySource `json:"key_sources"`
	// Describes what parts of a record to encrypt.
	Encrypt []EncryptionRecordSelector `json:"encrypt"`
}

func (o *EventGatewayEncryptConfigSensitiveDataAware) GetFailureMode() EncryptionFailureMode {
	if o == nil {
		return EncryptionFailureMode("")
	}
	return o.FailureMode
}

func (o *EventGatewayEncryptConfigSensitiveDataAware) GetKeySources() []EventGatewayKeySource {
	if o == nil {
		return []EventGatewayKeySource{}
	}
	return o.KeySources
}

func (o *EventGatewayEncryptConfigSensitiveDataAware) GetEncrypt() []EncryptionRecordSelector {
	if o == nil {
		return []EncryptionRecordSelector{}
	}
	return o.Encrypt
}
