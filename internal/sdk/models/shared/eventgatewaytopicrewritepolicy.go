// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayTopicRewritePolicyType string

const (
	EventGatewayTopicRewritePolicyTypeTopicRewrite EventGatewayTopicRewritePolicyType = "topic_rewrite"
)

func (e EventGatewayTopicRewritePolicyType) ToPointer() *EventGatewayTopicRewritePolicyType {
	return &e
}
func (e *EventGatewayTopicRewritePolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "topic_rewrite":
		*e = EventGatewayTopicRewritePolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGatewayTopicRewritePolicyType: %v", v)
	}
}

// EventGatewayTopicRewritePolicyConfigType - Type of renaming rule.
type EventGatewayTopicRewritePolicyConfigType string

const (
	EventGatewayTopicRewritePolicyConfigTypePrefix     EventGatewayTopicRewritePolicyConfigType = "prefix"
	EventGatewayTopicRewritePolicyConfigTypeExpression EventGatewayTopicRewritePolicyConfigType = "expression"
)

func (e EventGatewayTopicRewritePolicyConfigType) ToPointer() *EventGatewayTopicRewritePolicyConfigType {
	return &e
}
func (e *EventGatewayTopicRewritePolicyConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prefix":
		fallthrough
	case "expression":
		*e = EventGatewayTopicRewritePolicyConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGatewayTopicRewritePolicyConfigType: %v", v)
	}
}

type Prefix struct {
	// A prefix that is added to a backend topic name.
	// If a response contains a topic without a prefix, it's omitted from the response.
	//
	Value string `json:"value"`
}

func (o *Prefix) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type Expression struct {
	// The expression that evaluates to a string - a backend topic name.
	// If expression evaluates to an empty string, the request fails.
	//
	VirtualToBackend string `json:"virtual_to_backend"`
	// The expression that evaluates to a string - a virtual topic name.
	// If expression evaluates to an empty string, the request fails.
	//
	BackendToVirtual string `json:"backend_to_virtual"`
}

func (o *Expression) GetVirtualToBackend() string {
	if o == nil {
		return ""
	}
	return o.VirtualToBackend
}

func (o *Expression) GetBackendToVirtual() string {
	if o == nil {
		return ""
	}
	return o.BackendToVirtual
}

// EventGatewayTopicRewritePolicyConfig - The configuration of the topic rewrite policy.
type EventGatewayTopicRewritePolicyConfig struct {
	// Type of renaming rule.
	Type       EventGatewayTopicRewritePolicyConfigType `json:"type"`
	Prefix     *Prefix                                  `json:"prefix"`
	Expression *Expression                              `json:"expression"`
}

func (o *EventGatewayTopicRewritePolicyConfig) GetType() EventGatewayTopicRewritePolicyConfigType {
	if o == nil {
		return EventGatewayTopicRewritePolicyConfigType("")
	}
	return o.Type
}

func (o *EventGatewayTopicRewritePolicyConfig) GetPrefix() *Prefix {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *EventGatewayTopicRewritePolicyConfig) GetExpression() *Expression {
	if o == nil {
		return nil
	}
	return o.Expression
}

// EventGatewayTopicRewritePolicy - Defines a strategy for rewriting virtual topic names.
type EventGatewayTopicRewritePolicy struct {
	Type EventGatewayTopicRewritePolicyType `json:"type"`
	// A unique user-defined name of the policy.
	Name *string `default:"null" json:"name"`
	// A human-readable description of the policy.
	Description *string `default:"null" json:"description"`
	// Whether the policy is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// A string containing the boolean expression that determines whether the policy is applied.
	Condition *string `json:"condition,omitempty"`
	// The configuration of the topic rewrite policy.
	Config *EventGatewayTopicRewritePolicyConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (e EventGatewayTopicRewritePolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayTopicRewritePolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayTopicRewritePolicy) GetType() EventGatewayTopicRewritePolicyType {
	if o == nil {
		return EventGatewayTopicRewritePolicyType("")
	}
	return o.Type
}

func (o *EventGatewayTopicRewritePolicy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventGatewayTopicRewritePolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayTopicRewritePolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *EventGatewayTopicRewritePolicy) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *EventGatewayTopicRewritePolicy) GetConfig() *EventGatewayTopicRewritePolicyConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *EventGatewayTopicRewritePolicy) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
