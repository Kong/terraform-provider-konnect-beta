// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayTLSListenerPolicyConfig struct {
	Certificates []TLSCertificate `json:"certificates"`
	// A range of TLS versions.
	Versions *TLSVersionRange `json:"versions,omitempty"`
	// If false, only TLS connections are allowed. If true, both TLS and plaintext connections are allowed.
	//
	AllowPlaintext *bool `default:"false" json:"allow_plaintext"`
}

func (e EventGatewayTLSListenerPolicyConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayTLSListenerPolicyConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayTLSListenerPolicyConfig) GetCertificates() []TLSCertificate {
	if o == nil {
		return []TLSCertificate{}
	}
	return o.Certificates
}

func (o *EventGatewayTLSListenerPolicyConfig) GetVersions() *TLSVersionRange {
	if o == nil {
		return nil
	}
	return o.Versions
}

func (o *EventGatewayTLSListenerPolicyConfig) GetAllowPlaintext() *bool {
	if o == nil {
		return nil
	}
	return o.AllowPlaintext
}

// EventGatewayTLSListenerPolicy - The TLS Server policy defines the certificates and keys used by the gateway server when the client connects
// to the gateway over TLS.
//
// While it is possible to have multiple TLS policies on a listener, only one can be active at a time.
type EventGatewayTLSListenerPolicy struct {
	type_ string `const:"tls_server" json:"type"`
	// A unique user-defined name of the policy.
	Name *string `default:"null" json:"name"`
	// A human-readable description of the policy.
	Description *string `default:"null" json:"description"`
	// Whether the policy is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// A string containing the boolean expression that determines whether the policy is applied.
	Condition *string                              `json:"condition,omitempty"`
	Config    *EventGatewayTLSListenerPolicyConfig `json:"config"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (e EventGatewayTLSListenerPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventGatewayTLSListenerPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventGatewayTLSListenerPolicy) GetType() string {
	return "tls_server"
}

func (o *EventGatewayTLSListenerPolicy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventGatewayTLSListenerPolicy) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventGatewayTLSListenerPolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *EventGatewayTLSListenerPolicy) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *EventGatewayTLSListenerPolicy) GetConfig() *EventGatewayTLSListenerPolicyConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *EventGatewayTLSListenerPolicy) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
