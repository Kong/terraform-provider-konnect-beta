// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayProduceSchemaValidationPolicyConfigType string

const (
	EventGatewayProduceSchemaValidationPolicyConfigTypeConfluentSchemaRegistry EventGatewayProduceSchemaValidationPolicyConfigType = "confluent_schema_registry"
	EventGatewayProduceSchemaValidationPolicyConfigTypeJSON                    EventGatewayProduceSchemaValidationPolicyConfigType = "json"
)

// EventGatewayProduceSchemaValidationPolicyConfig - The configuration of the produce schema validation policy.
type EventGatewayProduceSchemaValidationPolicyConfig struct {
	EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig *EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig `queryParam:"inline,name=EventGatewayProduceSchemaValidationPolicyConfig"`
	EventGatewayProduceSchemaValidationPolicyJSONConfig           *EventGatewayProduceSchemaValidationPolicyJSONConfig           `queryParam:"inline,name=EventGatewayProduceSchemaValidationPolicyConfig"`

	Type EventGatewayProduceSchemaValidationPolicyConfigType
}

func CreateEventGatewayProduceSchemaValidationPolicyConfigConfluentSchemaRegistry(confluentSchemaRegistry EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig) EventGatewayProduceSchemaValidationPolicyConfig {
	typ := EventGatewayProduceSchemaValidationPolicyConfigTypeConfluentSchemaRegistry

	return EventGatewayProduceSchemaValidationPolicyConfig{
		EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig: &confluentSchemaRegistry,
		Type: typ,
	}
}

func CreateEventGatewayProduceSchemaValidationPolicyConfigJSON(json EventGatewayProduceSchemaValidationPolicyJSONConfig) EventGatewayProduceSchemaValidationPolicyConfig {
	typ := EventGatewayProduceSchemaValidationPolicyConfigTypeJSON

	return EventGatewayProduceSchemaValidationPolicyConfig{
		EventGatewayProduceSchemaValidationPolicyJSONConfig: &json,
		Type: typ,
	}
}

func (u *EventGatewayProduceSchemaValidationPolicyConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "confluent_schema_registry":
		eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig := new(EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig)
		if err := utils.UnmarshalJSON(data, &eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == confluent_schema_registry) type EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig within EventGatewayProduceSchemaValidationPolicyConfig: %w", string(data), err)
		}

		u.EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig = eventGatewayProduceSchemaValidationPolicySchemaRegistryConfig
		u.Type = EventGatewayProduceSchemaValidationPolicyConfigTypeConfluentSchemaRegistry
		return nil
	case "json":
		eventGatewayProduceSchemaValidationPolicyJSONConfig := new(EventGatewayProduceSchemaValidationPolicyJSONConfig)
		if err := utils.UnmarshalJSON(data, &eventGatewayProduceSchemaValidationPolicyJSONConfig, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == json) type EventGatewayProduceSchemaValidationPolicyJSONConfig within EventGatewayProduceSchemaValidationPolicyConfig: %w", string(data), err)
		}

		u.EventGatewayProduceSchemaValidationPolicyJSONConfig = eventGatewayProduceSchemaValidationPolicyJSONConfig
		u.Type = EventGatewayProduceSchemaValidationPolicyConfigTypeJSON
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayProduceSchemaValidationPolicyConfig", string(data))
}

func (u EventGatewayProduceSchemaValidationPolicyConfig) MarshalJSON() ([]byte, error) {
	if u.EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig != nil {
		return utils.MarshalJSON(u.EventGatewayProduceSchemaValidationPolicySchemaRegistryConfig, "", true)
	}

	if u.EventGatewayProduceSchemaValidationPolicyJSONConfig != nil {
		return utils.MarshalJSON(u.EventGatewayProduceSchemaValidationPolicyJSONConfig, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayProduceSchemaValidationPolicyConfig: all fields are null")
}
