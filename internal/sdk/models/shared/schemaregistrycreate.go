// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryCreateType string

const (
	SchemaRegistryCreateTypeConfluent SchemaRegistryCreateType = "confluent"
)

// SchemaRegistryCreate - The typed schema of the schema registry to create it.
type SchemaRegistryCreate struct {
	SchemaRegistryConfluent *SchemaRegistryConfluent `queryParam:"inline"`

	Type SchemaRegistryCreateType
}

func CreateSchemaRegistryCreateConfluent(confluent SchemaRegistryConfluent) SchemaRegistryCreate {
	typ := SchemaRegistryCreateTypeConfluent

	return SchemaRegistryCreate{
		SchemaRegistryConfluent: &confluent,
		Type:                    typ,
	}
}

func (u *SchemaRegistryCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "confluent":
		schemaRegistryConfluent := new(SchemaRegistryConfluent)
		if err := utils.UnmarshalJSON(data, &schemaRegistryConfluent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == confluent) type SchemaRegistryConfluent within SchemaRegistryCreate: %w", string(data), err)
		}

		u.SchemaRegistryConfluent = schemaRegistryConfluent
		u.Type = SchemaRegistryCreateTypeConfluent
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryCreate", string(data))
}

func (u SchemaRegistryCreate) MarshalJSON() ([]byte, error) {
	if u.SchemaRegistryConfluent != nil {
		return utils.MarshalJSON(u.SchemaRegistryConfluent, "", true)
	}

	return nil, errors.New("could not marshal union type SchemaRegistryCreate: all fields are null")
}
