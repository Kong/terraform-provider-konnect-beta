// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EncryptionRecordSelectorPartOfRecord - * key - encrypt the record key
// * value - encrypt the record value
type EncryptionRecordSelectorPartOfRecord string

const (
	EncryptionRecordSelectorPartOfRecordKey   EncryptionRecordSelectorPartOfRecord = "key"
	EncryptionRecordSelectorPartOfRecordValue EncryptionRecordSelectorPartOfRecord = "value"
)

func (e EncryptionRecordSelectorPartOfRecord) ToPointer() *EncryptionRecordSelectorPartOfRecord {
	return &e
}
func (e *EncryptionRecordSelectorPartOfRecord) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key":
		fallthrough
	case "value":
		*e = EncryptionRecordSelectorPartOfRecord(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionRecordSelectorPartOfRecord: %v", v)
	}
}

// EncryptionRecordSelector - Defines how to select part of a record for encryption as well as what key to encrypt it with.
type EncryptionRecordSelector struct {
	// * key - encrypt the record key
	// * value - encrypt the record value
	//
	PartOfRecord EncryptionRecordSelectorPartOfRecord `json:"part_of_record"`
	// The id of the key to use for encryption. It must match one of the keys defined in the policy's key_sources.
	//
	// An ID is a URI where the scheme refers to the type of key source and the rest is source-specific:
	// - static: the id defined in the list of static keys
	// - aws: a KMS key ARN
	//
	KeyID string `json:"key_id"`
}

func (e *EncryptionRecordSelector) GetPartOfRecord() EncryptionRecordSelectorPartOfRecord {
	if e == nil {
		return EncryptionRecordSelectorPartOfRecord("")
	}
	return e.PartOfRecord
}

func (e *EncryptionRecordSelector) GetKeyID() string {
	if e == nil {
		return ""
	}
	return e.KeyID
}
