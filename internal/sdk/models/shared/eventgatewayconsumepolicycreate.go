// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayConsumePolicyCreateType string

const (
	EventGatewayConsumePolicyCreateTypeModifyHeaders    EventGatewayConsumePolicyCreateType = "modify_headers"
	EventGatewayConsumePolicyCreateTypeSchemaValidation EventGatewayConsumePolicyCreateType = "schema_validation"
	EventGatewayConsumePolicyCreateTypeDecrypt          EventGatewayConsumePolicyCreateType = "decrypt"
	EventGatewayConsumePolicyCreateTypeSkipRecord       EventGatewayConsumePolicyCreateType = "skip_record"
)

// EventGatewayConsumePolicyCreate - The typed schema of the consume policy to modify it.
type EventGatewayConsumePolicyCreate struct {
	EventGatewayModifyHeadersPolicy           *EventGatewayModifyHeadersPolicy           `queryParam:"inline"`
	EventGatewayConsumeSchemaValidationPolicy *EventGatewayConsumeSchemaValidationPolicy `queryParam:"inline"`
	EventGatewayDecryptPolicy                 *EventGatewayDecryptPolicy                 `queryParam:"inline"`
	EventGatewaySkipRecordPolicy              *EventGatewaySkipRecordPolicy              `queryParam:"inline"`

	Type EventGatewayConsumePolicyCreateType
}

func CreateEventGatewayConsumePolicyCreateModifyHeaders(modifyHeaders EventGatewayModifyHeadersPolicy) EventGatewayConsumePolicyCreate {
	typ := EventGatewayConsumePolicyCreateTypeModifyHeaders

	return EventGatewayConsumePolicyCreate{
		EventGatewayModifyHeadersPolicy: &modifyHeaders,
		Type:                            typ,
	}
}

func CreateEventGatewayConsumePolicyCreateSchemaValidation(schemaValidation EventGatewayConsumeSchemaValidationPolicy) EventGatewayConsumePolicyCreate {
	typ := EventGatewayConsumePolicyCreateTypeSchemaValidation

	return EventGatewayConsumePolicyCreate{
		EventGatewayConsumeSchemaValidationPolicy: &schemaValidation,
		Type: typ,
	}
}

func CreateEventGatewayConsumePolicyCreateDecrypt(decrypt EventGatewayDecryptPolicy) EventGatewayConsumePolicyCreate {
	typ := EventGatewayConsumePolicyCreateTypeDecrypt

	return EventGatewayConsumePolicyCreate{
		EventGatewayDecryptPolicy: &decrypt,
		Type:                      typ,
	}
}

func CreateEventGatewayConsumePolicyCreateSkipRecord(skipRecord EventGatewaySkipRecordPolicy) EventGatewayConsumePolicyCreate {
	typ := EventGatewayConsumePolicyCreateTypeSkipRecord

	return EventGatewayConsumePolicyCreate{
		EventGatewaySkipRecordPolicy: &skipRecord,
		Type:                         typ,
	}
}

func (u *EventGatewayConsumePolicyCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "modify_headers":
		eventGatewayModifyHeadersPolicy := new(EventGatewayModifyHeadersPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayModifyHeadersPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == modify_headers) type EventGatewayModifyHeadersPolicy within EventGatewayConsumePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayModifyHeadersPolicy = eventGatewayModifyHeadersPolicy
		u.Type = EventGatewayConsumePolicyCreateTypeModifyHeaders
		return nil
	case "schema_validation":
		eventGatewayConsumeSchemaValidationPolicy := new(EventGatewayConsumeSchemaValidationPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayConsumeSchemaValidationPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == schema_validation) type EventGatewayConsumeSchemaValidationPolicy within EventGatewayConsumePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayConsumeSchemaValidationPolicy = eventGatewayConsumeSchemaValidationPolicy
		u.Type = EventGatewayConsumePolicyCreateTypeSchemaValidation
		return nil
	case "decrypt":
		eventGatewayDecryptPolicy := new(EventGatewayDecryptPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayDecryptPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == decrypt) type EventGatewayDecryptPolicy within EventGatewayConsumePolicyCreate: %w", string(data), err)
		}

		u.EventGatewayDecryptPolicy = eventGatewayDecryptPolicy
		u.Type = EventGatewayConsumePolicyCreateTypeDecrypt
		return nil
	case "skip_record":
		eventGatewaySkipRecordPolicy := new(EventGatewaySkipRecordPolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewaySkipRecordPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == skip_record) type EventGatewaySkipRecordPolicy within EventGatewayConsumePolicyCreate: %w", string(data), err)
		}

		u.EventGatewaySkipRecordPolicy = eventGatewaySkipRecordPolicy
		u.Type = EventGatewayConsumePolicyCreateTypeSkipRecord
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayConsumePolicyCreate", string(data))
}

func (u EventGatewayConsumePolicyCreate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayModifyHeadersPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayModifyHeadersPolicy, "", true)
	}

	if u.EventGatewayConsumeSchemaValidationPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayConsumeSchemaValidationPolicy, "", true)
	}

	if u.EventGatewayDecryptPolicy != nil {
		return utils.MarshalJSON(u.EventGatewayDecryptPolicy, "", true)
	}

	if u.EventGatewaySkipRecordPolicy != nil {
		return utils.MarshalJSON(u.EventGatewaySkipRecordPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayConsumePolicyCreate: all fields are null")
}
