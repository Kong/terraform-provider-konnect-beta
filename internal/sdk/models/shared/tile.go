// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type TileType string

const (
	TileTypeChart TileType = "chart"
)

type Tile struct {
	ChartTile *ChartTile `queryParam:"inline"`

	Type TileType
}

func CreateTileChart(chart ChartTile) Tile {
	typ := TileTypeChart

	typStr := ChartTileType(typ)
	chart.Type = typStr

	return Tile{
		ChartTile: &chart,
		Type:      typ,
	}
}

func (u *Tile) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "chart":
		chartTile := new(ChartTile)
		if err := utils.UnmarshalJSON(data, &chartTile, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == chart) type ChartTile within Tile: %w", string(data), err)
		}

		u.ChartTile = chartTile
		u.Type = TileTypeChart
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Tile", string(data))
}

func (u Tile) MarshalJSON() ([]byte, error) {
	if u.ChartTile != nil {
		return utils.MarshalJSON(u.ChartTile, "", true)
	}

	return nil, errors.New("could not marshal union type Tile: all fields are null")
}
