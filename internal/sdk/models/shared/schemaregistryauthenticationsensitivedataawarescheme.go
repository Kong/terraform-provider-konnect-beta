// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryAuthenticationSensitiveDataAwareSchemeType string

const (
	SchemaRegistryAuthenticationSensitiveDataAwareSchemeTypeBasic SchemaRegistryAuthenticationSensitiveDataAwareSchemeType = "basic"
)

// SchemaRegistryAuthenticationSensitiveDataAwareScheme - The authentication configuration for the schema registry.
type SchemaRegistryAuthenticationSensitiveDataAwareScheme struct {
	SchemaRegistryAuthenticationBasicSensitiveDataAware *SchemaRegistryAuthenticationBasicSensitiveDataAware `queryParam:"inline"`

	Type SchemaRegistryAuthenticationSensitiveDataAwareSchemeType
}

func CreateSchemaRegistryAuthenticationSensitiveDataAwareSchemeBasic(basic SchemaRegistryAuthenticationBasicSensitiveDataAware) SchemaRegistryAuthenticationSensitiveDataAwareScheme {
	typ := SchemaRegistryAuthenticationSensitiveDataAwareSchemeTypeBasic

	return SchemaRegistryAuthenticationSensitiveDataAwareScheme{
		SchemaRegistryAuthenticationBasicSensitiveDataAware: &basic,
		Type: typ,
	}
}

func (u *SchemaRegistryAuthenticationSensitiveDataAwareScheme) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "basic":
		schemaRegistryAuthenticationBasicSensitiveDataAware := new(SchemaRegistryAuthenticationBasicSensitiveDataAware)
		if err := utils.UnmarshalJSON(data, &schemaRegistryAuthenticationBasicSensitiveDataAware, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == basic) type SchemaRegistryAuthenticationBasicSensitiveDataAware within SchemaRegistryAuthenticationSensitiveDataAwareScheme: %w", string(data), err)
		}

		u.SchemaRegistryAuthenticationBasicSensitiveDataAware = schemaRegistryAuthenticationBasicSensitiveDataAware
		u.Type = SchemaRegistryAuthenticationSensitiveDataAwareSchemeTypeBasic
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryAuthenticationSensitiveDataAwareScheme", string(data))
}

func (u SchemaRegistryAuthenticationSensitiveDataAwareScheme) MarshalJSON() ([]byte, error) {
	if u.SchemaRegistryAuthenticationBasicSensitiveDataAware != nil {
		return utils.MarshalJSON(u.SchemaRegistryAuthenticationBasicSensitiveDataAware, "", true)
	}

	return nil, errors.New("could not marshal union type SchemaRegistryAuthenticationSensitiveDataAwareScheme: all fields are null")
}
