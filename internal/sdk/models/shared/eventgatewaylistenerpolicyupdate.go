// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayListenerPolicyUpdateType string

const (
	EventGatewayListenerPolicyUpdateTypeTLSServer               EventGatewayListenerPolicyUpdateType = "tls_server"
	EventGatewayListenerPolicyUpdateTypeForwardToVirtualCluster EventGatewayListenerPolicyUpdateType = "forward_to_virtual_cluster"
)

// EventGatewayListenerPolicyUpdate - The typed schema of the policy to modify it.
type EventGatewayListenerPolicyUpdate struct {
	EventGatewayTLSListenerSensitiveDataAwarePolicy *EventGatewayTLSListenerSensitiveDataAwarePolicy `queryParam:"inline"`
	ForwardToVirtualClusterPolicy                   *ForwardToVirtualClusterPolicy                   `queryParam:"inline"`

	Type EventGatewayListenerPolicyUpdateType
}

func CreateEventGatewayListenerPolicyUpdateTLSServer(tlsServer EventGatewayTLSListenerSensitiveDataAwarePolicy) EventGatewayListenerPolicyUpdate {
	typ := EventGatewayListenerPolicyUpdateTypeTLSServer

	return EventGatewayListenerPolicyUpdate{
		EventGatewayTLSListenerSensitiveDataAwarePolicy: &tlsServer,
		Type: typ,
	}
}

func CreateEventGatewayListenerPolicyUpdateForwardToVirtualCluster(forwardToVirtualCluster ForwardToVirtualClusterPolicy) EventGatewayListenerPolicyUpdate {
	typ := EventGatewayListenerPolicyUpdateTypeForwardToVirtualCluster

	return EventGatewayListenerPolicyUpdate{
		ForwardToVirtualClusterPolicy: &forwardToVirtualCluster,
		Type:                          typ,
	}
}

func (u *EventGatewayListenerPolicyUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "tls_server":
		eventGatewayTLSListenerSensitiveDataAwarePolicy := new(EventGatewayTLSListenerSensitiveDataAwarePolicy)
		if err := utils.UnmarshalJSON(data, &eventGatewayTLSListenerSensitiveDataAwarePolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == tls_server) type EventGatewayTLSListenerSensitiveDataAwarePolicy within EventGatewayListenerPolicyUpdate: %w", string(data), err)
		}

		u.EventGatewayTLSListenerSensitiveDataAwarePolicy = eventGatewayTLSListenerSensitiveDataAwarePolicy
		u.Type = EventGatewayListenerPolicyUpdateTypeTLSServer
		return nil
	case "forward_to_virtual_cluster":
		forwardToVirtualClusterPolicy := new(ForwardToVirtualClusterPolicy)
		if err := utils.UnmarshalJSON(data, &forwardToVirtualClusterPolicy, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == forward_to_virtual_cluster) type ForwardToVirtualClusterPolicy within EventGatewayListenerPolicyUpdate: %w", string(data), err)
		}

		u.ForwardToVirtualClusterPolicy = forwardToVirtualClusterPolicy
		u.Type = EventGatewayListenerPolicyUpdateTypeForwardToVirtualCluster
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayListenerPolicyUpdate", string(data))
}

func (u EventGatewayListenerPolicyUpdate) MarshalJSON() ([]byte, error) {
	if u.EventGatewayTLSListenerSensitiveDataAwarePolicy != nil {
		return utils.MarshalJSON(u.EventGatewayTLSListenerSensitiveDataAwarePolicy, "", true)
	}

	if u.ForwardToVirtualClusterPolicy != nil {
		return utils.MarshalJSON(u.ForwardToVirtualClusterPolicy, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayListenerPolicyUpdate: all fields are null")
}
