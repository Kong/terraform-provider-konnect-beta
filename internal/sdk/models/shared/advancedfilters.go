// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type Field string

const (
	FieldAPI                       Field = "api"
	FieldAPIProduct                Field = "api_product"
	FieldAPIProductVersion         Field = "api_product_version"
	FieldApplication               Field = "application"
	FieldConsumer                  Field = "consumer"
	FieldControlPlane              Field = "control_plane"
	FieldControlPlaneGroup         Field = "control_plane_group"
	FieldDataPlaneNode             Field = "data_plane_node"
	FieldDataPlaneNodeVersion      Field = "data_plane_node_version"
	FieldGatewayService            Field = "gateway_service"
	FieldPortal                    Field = "portal"
	FieldRealm                     Field = "realm"
	FieldResponseSource            Field = "response_source"
	FieldRoute                     Field = "route"
	FieldStatusCode                Field = "status_code"
	FieldStatusCodeGrouped         Field = "status_code_grouped"
	FieldUpstreamStatusCode        Field = "upstream_status_code"
	FieldUpstreamStatusCodeGrouped Field = "upstream_status_code_grouped"
)

func (e Field) ToPointer() *Field {
	return &e
}
func (e *Field) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api":
		fallthrough
	case "api_product":
		fallthrough
	case "api_product_version":
		fallthrough
	case "application":
		fallthrough
	case "consumer":
		fallthrough
	case "control_plane":
		fallthrough
	case "control_plane_group":
		fallthrough
	case "data_plane_node":
		fallthrough
	case "data_plane_node_version":
		fallthrough
	case "gateway_service":
		fallthrough
	case "portal":
		fallthrough
	case "realm":
		fallthrough
	case "response_source":
		fallthrough
	case "route":
		fallthrough
	case "status_code":
		fallthrough
	case "status_code_grouped":
		fallthrough
	case "upstream_status_code":
		fallthrough
	case "upstream_status_code_grouped":
		*e = Field(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Field: %v", v)
	}
}

type Operator string

const (
	OperatorIn       Operator = "in"
	OperatorNotIn    Operator = "not_in"
	OperatorEmpty    Operator = "empty"
	OperatorNotEmpty Operator = "not_empty"
)

func (e Operator) ToPointer() *Operator {
	return &e
}
func (e *Operator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in":
		fallthrough
	case "not_in":
		fallthrough
	case "empty":
		fallthrough
	case "not_empty":
		*e = Operator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Operator: %v", v)
	}
}

type AdvancedFilters struct {
	Field    Field    `json:"field"`
	Operator Operator `json:"operator"`
	Value    any      `json:"value,omitempty"`
}

func (a AdvancedFilters) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AdvancedFilters) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"field", "operator"}); err != nil {
		return err
	}
	return nil
}

func (a *AdvancedFilters) GetField() Field {
	if a == nil {
		return Field("")
	}
	return a.Field
}

func (a *AdvancedFilters) GetOperator() Operator {
	if a == nil {
		return Operator("")
	}
	return a.Operator
}

func (a *AdvancedFilters) GetValue() any {
	if a == nil {
		return nil
	}
	return a.Value
}
