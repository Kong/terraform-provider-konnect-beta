// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type SchemaRegistryAuthenticationSchemeType string

const (
	SchemaRegistryAuthenticationSchemeTypeBasic SchemaRegistryAuthenticationSchemeType = "basic"
)

// SchemaRegistryAuthenticationScheme - The authentication configuration for the schema registry.
type SchemaRegistryAuthenticationScheme struct {
	SchemaRegistryAuthenticationBasic *SchemaRegistryAuthenticationBasic `queryParam:"inline"`

	Type SchemaRegistryAuthenticationSchemeType
}

func CreateSchemaRegistryAuthenticationSchemeBasic(basic SchemaRegistryAuthenticationBasic) SchemaRegistryAuthenticationScheme {
	typ := SchemaRegistryAuthenticationSchemeTypeBasic

	typStr := SchemaRegistryAuthenticationBasicType(typ)
	basic.Type = typStr

	return SchemaRegistryAuthenticationScheme{
		SchemaRegistryAuthenticationBasic: &basic,
		Type:                              typ,
	}
}

func (u *SchemaRegistryAuthenticationScheme) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "basic":
		schemaRegistryAuthenticationBasic := new(SchemaRegistryAuthenticationBasic)
		if err := utils.UnmarshalJSON(data, &schemaRegistryAuthenticationBasic, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == basic) type SchemaRegistryAuthenticationBasic within SchemaRegistryAuthenticationScheme: %w", string(data), err)
		}

		u.SchemaRegistryAuthenticationBasic = schemaRegistryAuthenticationBasic
		u.Type = SchemaRegistryAuthenticationSchemeTypeBasic
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemaRegistryAuthenticationScheme", string(data))
}

func (u SchemaRegistryAuthenticationScheme) MarshalJSON() ([]byte, error) {
	if u.SchemaRegistryAuthenticationBasic != nil {
		return utils.MarshalJSON(u.SchemaRegistryAuthenticationBasic, "", true)
	}

	return nil, errors.New("could not marshal union type SchemaRegistryAuthenticationScheme: all fields are null")
}
