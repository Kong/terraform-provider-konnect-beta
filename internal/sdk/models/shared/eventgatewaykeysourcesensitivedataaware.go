// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/internal/utils"
)

type EventGatewayKeySourceSensitiveDataAwareType string

const (
	EventGatewayKeySourceSensitiveDataAwareTypeAws    EventGatewayKeySourceSensitiveDataAwareType = "aws"
	EventGatewayKeySourceSensitiveDataAwareTypeStatic EventGatewayKeySourceSensitiveDataAwareType = "static"
)

// EventGatewayKeySourceSensitiveDataAware - A key source that describes how to find a symmetric key for encryption or decryption.
// It can be an AWS KMS key source that uses a KMS to find a symmetric key,
// or a static key source that uses a static symmetric key provided as secrets.
type EventGatewayKeySourceSensitiveDataAware struct {
	EventGatewayAWSKeySource                      *EventGatewayAWSKeySource                      `queryParam:"inline"`
	EventGatewayStaticKeySourceSensitiveDataAware *EventGatewayStaticKeySourceSensitiveDataAware `queryParam:"inline"`

	Type EventGatewayKeySourceSensitiveDataAwareType
}

func CreateEventGatewayKeySourceSensitiveDataAwareAws(aws EventGatewayAWSKeySource) EventGatewayKeySourceSensitiveDataAware {
	typ := EventGatewayKeySourceSensitiveDataAwareTypeAws

	return EventGatewayKeySourceSensitiveDataAware{
		EventGatewayAWSKeySource: &aws,
		Type:                     typ,
	}
}

func CreateEventGatewayKeySourceSensitiveDataAwareStatic(static EventGatewayStaticKeySourceSensitiveDataAware) EventGatewayKeySourceSensitiveDataAware {
	typ := EventGatewayKeySourceSensitiveDataAwareTypeStatic

	return EventGatewayKeySourceSensitiveDataAware{
		EventGatewayStaticKeySourceSensitiveDataAware: &static,
		Type: typ,
	}
}

func (u *EventGatewayKeySourceSensitiveDataAware) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "aws":
		eventGatewayAWSKeySource := new(EventGatewayAWSKeySource)
		if err := utils.UnmarshalJSON(data, &eventGatewayAWSKeySource, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == aws) type EventGatewayAWSKeySource within EventGatewayKeySourceSensitiveDataAware: %w", string(data), err)
		}

		u.EventGatewayAWSKeySource = eventGatewayAWSKeySource
		u.Type = EventGatewayKeySourceSensitiveDataAwareTypeAws
		return nil
	case "static":
		eventGatewayStaticKeySourceSensitiveDataAware := new(EventGatewayStaticKeySourceSensitiveDataAware)
		if err := utils.UnmarshalJSON(data, &eventGatewayStaticKeySourceSensitiveDataAware, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == static) type EventGatewayStaticKeySourceSensitiveDataAware within EventGatewayKeySourceSensitiveDataAware: %w", string(data), err)
		}

		u.EventGatewayStaticKeySourceSensitiveDataAware = eventGatewayStaticKeySourceSensitiveDataAware
		u.Type = EventGatewayKeySourceSensitiveDataAwareTypeStatic
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EventGatewayKeySourceSensitiveDataAware", string(data))
}

func (u EventGatewayKeySourceSensitiveDataAware) MarshalJSON() ([]byte, error) {
	if u.EventGatewayAWSKeySource != nil {
		return utils.MarshalJSON(u.EventGatewayAWSKeySource, "", true)
	}

	if u.EventGatewayStaticKeySourceSensitiveDataAware != nil {
		return utils.MarshalJSON(u.EventGatewayStaticKeySourceSensitiveDataAware, "", true)
	}

	return nil, errors.New("could not marshal union type EventGatewayKeySourceSensitiveDataAware: all fields are null")
}
