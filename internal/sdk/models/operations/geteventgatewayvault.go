// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"net/http"
)

type GetEventGatewayVaultRequest struct {
	// The UUID of your Gateway.
	GatewayID string `pathParam:"style=simple,explode=false,name=gatewayId"`
	// The ID of the Vault.
	VaultID string `pathParam:"style=simple,explode=false,name=vaultId"`
}

func (g *GetEventGatewayVaultRequest) GetGatewayID() string {
	if g == nil {
		return ""
	}
	return g.GatewayID
}

func (g *GetEventGatewayVaultRequest) GetVaultID() string {
	if g == nil {
		return ""
	}
	return g.VaultID
}

type GetEventGatewayVaultResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A single vault object.
	EventGatewayVault *shared.EventGatewayVault
	// Unauthorized
	UnauthorizedError *shared.UnauthorizedError
	// Forbidden
	ForbiddenError *shared.ForbiddenError
	// Not Found
	NotFoundError *shared.NotFoundError
}

func (g *GetEventGatewayVaultResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetEventGatewayVaultResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetEventGatewayVaultResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetEventGatewayVaultResponse) GetEventGatewayVault() *shared.EventGatewayVault {
	if g == nil {
		return nil
	}
	return g.EventGatewayVault
}

func (g *GetEventGatewayVaultResponse) GetUnauthorizedError() *shared.UnauthorizedError {
	if g == nil {
		return nil
	}
	return g.UnauthorizedError
}

func (g *GetEventGatewayVaultResponse) GetForbiddenError() *shared.ForbiddenError {
	if g == nil {
		return nil
	}
	return g.ForbiddenError
}

func (g *GetEventGatewayVaultResponse) GetNotFoundError() *shared.NotFoundError {
	if g == nil {
		return nil
	}
	return g.NotFoundError
}
