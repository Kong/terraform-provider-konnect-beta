// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect-beta/internal/sdk/models/shared"
	"net/http"
)

type CreateEventGatewayVirtualClusterConsumePolicyRequest struct {
	// The UUID of your Gateway.
	GatewayID string `pathParam:"style=simple,explode=false,name=gatewayId"`
	// The ID of the Virtual Cluster.
	VirtualClusterID string `pathParam:"style=simple,explode=false,name=virtualClusterId"`
	// When specified, it sets the ID of the parent policy.
	ParentPolicyID *string `queryParam:"style=form,explode=true,name=parent_policy_id"`
	// The request schema for creating a consume policy.
	EventGatewayConsumePolicyCreate *shared.EventGatewayConsumePolicyCreate `request:"mediaType=application/json"`
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetGatewayID() string {
	if o == nil {
		return ""
	}
	return o.GatewayID
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetVirtualClusterID() string {
	if o == nil {
		return ""
	}
	return o.VirtualClusterID
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetParentPolicyID() *string {
	if o == nil {
		return nil
	}
	return o.ParentPolicyID
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetEventGatewayConsumePolicyCreate() *shared.EventGatewayConsumePolicyCreate {
	if o == nil {
		return nil
	}
	return o.EventGatewayConsumePolicyCreate
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetEventGatewayConsumePolicyCreateModifyHeaders() *shared.EventGatewayModifyHeadersPolicy {
	if v := o.GetEventGatewayConsumePolicyCreate(); v != nil {
		return v.EventGatewayModifyHeadersPolicy
	}
	return nil
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetEventGatewayConsumePolicyCreateSchemaValidation() *shared.EventGatewayConsumeSchemaValidationPolicy {
	if v := o.GetEventGatewayConsumePolicyCreate(); v != nil {
		return v.EventGatewayConsumeSchemaValidationPolicy
	}
	return nil
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetEventGatewayConsumePolicyCreateDecrypt() *shared.EventGatewayDecryptPolicy {
	if v := o.GetEventGatewayConsumePolicyCreate(); v != nil {
		return v.EventGatewayDecryptPolicy
	}
	return nil
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyRequest) GetEventGatewayConsumePolicyCreateSkipRecord() *shared.EventGatewaySkipRecordPolicy {
	if v := o.GetEventGatewayConsumePolicyCreate(); v != nil {
		return v.EventGatewaySkipRecordPolicy
	}
	return nil
}

type CreateEventGatewayVirtualClusterConsumePolicyResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Created
	EventGatewayPolicy *shared.EventGatewayPolicy
	// Bad Request
	BadRequestError *shared.BadRequestError
	// Unauthorized
	UnauthorizedError *shared.UnauthorizedError
	// Forbidden
	ForbiddenError *shared.ForbiddenError
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetEventGatewayPolicy() *shared.EventGatewayPolicy {
	if o == nil {
		return nil
	}
	return o.EventGatewayPolicy
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetBadRequestError() *shared.BadRequestError {
	if o == nil {
		return nil
	}
	return o.BadRequestError
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetUnauthorizedError() *shared.UnauthorizedError {
	if o == nil {
		return nil
	}
	return o.UnauthorizedError
}

func (o *CreateEventGatewayVirtualClusterConsumePolicyResponse) GetForbiddenError() *shared.ForbiddenError {
	if o == nil {
		return nil
	}
	return o.ForbiddenError
}
